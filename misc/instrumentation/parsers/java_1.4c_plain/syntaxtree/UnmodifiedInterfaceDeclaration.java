//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> "interface"
 * f1 -> &lt;IDENTIFIER&gt;
 * f2 -> [ "extends" NameList() ]
 * f3 -> "{"
 * f4 -> ( InterfaceMemberDeclaration() )*
 * f5 -> "}"
 * </PRE>
 */
public class UnmodifiedInterfaceDeclaration implements Node {
   private Node parent;
   public NodeToken f0;
   public NodeToken f1;
   public NodeOptional f2;
   public NodeToken f3;
   public NodeListOptional f4;
   public NodeToken f5;

   public UnmodifiedInterfaceDeclaration(NodeToken n0, NodeToken n1, NodeOptional n2, NodeToken n3, NodeListOptional n4, NodeToken n5) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
      f4 = n4;
      if ( f4 != null ) f4.setParent(this);
      f5 = n5;
      if ( f5 != null ) f5.setParent(this);
   }

   public UnmodifiedInterfaceDeclaration(NodeToken n0, NodeOptional n1, NodeListOptional n2) {
      f0 = new NodeToken("interface");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = n1;
      if ( f2 != null ) f2.setParent(this);
      f3 = new NodeToken("{");
      if ( f3 != null ) f3.setParent(this);
      f4 = n2;
      if ( f4 != null ) f4.setParent(this);
      f5 = new NodeToken("}");
      if ( f5 != null ) f5.setParent(this);
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

