/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.java15.visitor;
import org.codecover.instrumentation.java15.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

@SuppressWarnings("all")
public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> [ PackageDeclaration() ]
    * f1 -> ( ImportDeclaration() )*
    * f2 -> ( TypeDeclaration() )*
    * f3 -> ( &lt;"\u001a"&gt; )?
    * f4 -> ( &lt;STUFF_TO_IGNORE: ~[]&gt; )?
    * f5 -> &lt;EOF&gt;
    * </PRE>
    */
   public R visit(CompilationUnit n);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> "package"
    * f2 -> Name()
    * f3 -> ";"
    * </PRE>
    */
   public R visit(PackageDeclaration n);

   /**
    * <PRE>
    * f0 -> "import"
    * f1 -> [ "static" ]
    * f2 -> Name()
    * f3 -> [ "." "*" ]
    * f4 -> ";"
    * </PRE>
    */
   public R visit(ImportDeclaration n);

   /**
    * <PRE>
    * f0 -> ( ( "public" | "static" | "protected" | "private" | "final" | "abstract" | "synchronized" | "native" | "transient" | "volatile" | "strictfp" | Annotation() ) )*
    * </PRE>
    */
   public R visit(Modifiers n);

   /**
    * <PRE>
    * f0 -> ";"
    *       | Modifiers() ( ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() )
    * </PRE>
    */
   public R visit(TypeDeclaration n);

   /**
    * <PRE>
    * f0 -> ( "class" | "interface" )
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ TypeParameters() ]
    * f3 -> [ ExtendsList() ]
    * f4 -> [ ImplementsList() ]
    * f5 -> ClassOrInterfaceBody()
    * </PRE>
    */
   public R visit(ClassOrInterfaceDeclaration n);

   /**
    * <PRE>
    * f0 -> "extends"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "," ClassOrInterfaceType() )*
    * </PRE>
    */
   public R visit(ExtendsList n);

   /**
    * <PRE>
    * f0 -> "implements"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "," ClassOrInterfaceType() )*
    * </PRE>
    */
   public R visit(ImplementsList n);

   /**
    * <PRE>
    * f0 -> "enum"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ ImplementsList() ]
    * f3 -> EnumBody()
    * </PRE>
    */
   public R visit(EnumDeclaration n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> [ EnumConstant() ( "," EnumConstant() )* ]
    * f2 -> [ "," ]
    * f3 -> [ ";" ( ClassOrInterfaceBodyDeclaration() )* ]
    * f4 -> "}"
    * </PRE>
    */
   public R visit(EnumBody n);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Arguments() ]
    * f3 -> [ ClassOrInterfaceBody() ]
    * </PRE>
    */
   public R visit(EnumConstant n);

   /**
    * <PRE>
    * f0 -> "&lt;"
    * f1 -> TypeParameter()
    * f2 -> ( "," TypeParameter() )*
    * f3 -> "&gt;"
    * </PRE>
    */
   public R visit(TypeParameters n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ TypeBound() ]
    * </PRE>
    */
   public R visit(TypeParameter n);

   /**
    * <PRE>
    * f0 -> "extends"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "&" ClassOrInterfaceType() )*
    * </PRE>
    */
   public R visit(TypeBound n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( ClassOrInterfaceBodyDeclaration() )*
    * f2 -> "}"
    * </PRE>
    */
   public R visit(ClassOrInterfaceBody n);

   /**
    * <PRE>
    * f0 -> Initializer()
    *       | Modifiers() ( ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() | ConstructorDeclaration() | FieldDeclaration() | MethodDeclaration() )
    *       | ";"
    * </PRE>
    */
   public R visit(ClassOrInterfaceBodyDeclaration n);

   /**
    * <PRE>
    * f0 -> Type()
    * f1 -> VariableDeclarator()
    * f2 -> ( "," VariableDeclarator() )*
    * f3 -> ";"
    * </PRE>
    */
   public R visit(FieldDeclaration n);

   /**
    * <PRE>
    * f0 -> VariableDeclaratorId()
    * f1 -> [ "=" VariableInitializer() ]
    * </PRE>
    */
   public R visit(VariableDeclarator n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "[" "]" )*
    * </PRE>
    */
   public R visit(VariableDeclaratorId n);

   /**
    * <PRE>
    * f0 -> ArrayInitializer()
    *       | Expression()
    * </PRE>
    */
   public R visit(VariableInitializer n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> [ VariableInitializer() ( "," VariableInitializer() )* ]
    * f2 -> [ "," ]
    * f3 -> "}"
    * </PRE>
    */
   public R visit(ArrayInitializer n);

   /**
    * <PRE>
    * f0 -> [ TypeParameters() ]
    * f1 -> ResultType()
    * f2 -> MethodDeclarator()
    * f3 -> [ "throws" NameList() ]
    * f4 -> ( Block() | ";" )
    * </PRE>
    */
   public R visit(MethodDeclaration n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> FormalParameters()
    * f2 -> ( "[" "]" )*
    * </PRE>
    */
   public R visit(MethodDeclarator n);

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ FormalParameter() ( "," FormalParameter() )* ]
    * f2 -> ")"
    * </PRE>
    */
   public R visit(FormalParameters n);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> Type()
    * f2 -> [ "..." ]
    * f3 -> VariableDeclaratorId()
    * </PRE>
    */
   public R visit(FormalParameter n);

   /**
    * <PRE>
    * f0 -> [ TypeParameters() ]
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> FormalParameters()
    * f3 -> [ "throws" NameList() ]
    * f4 -> "{"
    * f5 -> [ ExplicitConstructorInvocation() ]
    * f6 -> ( BlockStatement() )*
    * f7 -> "}"
    * </PRE>
    */
   public R visit(ConstructorDeclaration n);

   /**
    * <PRE>
    * f0 -> ( ExplicitConstructorPrefix() "." )*
    * f1 -> [ TypeArguments() ]
    * f2 -> ( "this" | "super" )
    * f3 -> Arguments()
    * f4 -> ";"
    * </PRE>
    */
   public R visit(ExplicitConstructorInvocation n);

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; Arguments() )
    *       | &lt;IDENTIFIER&gt;
    *       | AllocationExpression()
    *       | "this"
    *       | "super"
    *       | ( "(" Expression() ")" )
    * </PRE>
    */
   public R visit(ExplicitConstructorPrefix n);

   /**
    * <PRE>
    * f0 -> [ "static" ]
    * f1 -> Block()
    * </PRE>
    */
   public R visit(Initializer n);

   /**
    * <PRE>
    * f0 -> ReferenceType()
    *       | PrimitiveType()
    * </PRE>
    */
   public R visit(Type n);

   /**
    * <PRE>
    * f0 -> PrimitiveType() ( "[" "]" )+
    *       | ( ClassOrInterfaceType() ( "[" "]" )* )
    * </PRE>
    */
   public R visit(ReferenceType n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ TypeArguments() ]
    * f2 -> ( "." &lt;IDENTIFIER&gt; [ TypeArguments() ] )*
    * </PRE>
    */
   public R visit(ClassOrInterfaceType n);

   /**
    * <PRE>
    * f0 -> "&lt;"
    * f1 -> TypeArgument()
    * f2 -> ( "," TypeArgument() )*
    * f3 -> "&gt;"
    * </PRE>
    */
   public R visit(TypeArguments n);

   /**
    * <PRE>
    * f0 -> ReferenceType()
    *       | "?" [ WildcardBounds() ]
    * </PRE>
    */
   public R visit(TypeArgument n);

   /**
    * <PRE>
    * f0 -> "extends" ReferenceType()
    *       | "super" ReferenceType()
    * </PRE>
    */
   public R visit(WildcardBounds n);

   /**
    * <PRE>
    * f0 -> "boolean"
    *       | "char"
    *       | "byte"
    *       | "short"
    *       | "int"
    *       | "long"
    *       | "float"
    *       | "double"
    * </PRE>
    */
   public R visit(PrimitiveType n);

   /**
    * <PRE>
    * f0 -> "void"
    *       | Type()
    * </PRE>
    */
   public R visit(ResultType n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "." &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public R visit(Name n);

   /**
    * <PRE>
    * f0 -> Name()
    * f1 -> ( "," Name() )*
    * </PRE>
    */
   public R visit(NameList n);

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * f1 -> [ AssignmentOperator() Expression() ]
    * </PRE>
    */
   public R visit(Expression n);

   /**
    * <PRE>
    * f0 -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "&lt;&lt;="
    *       | "&gt;&gt;="
    *       | "&gt;&gt;&gt;="
    *       | "&="
    *       | "^="
    *       | "|="
    * </PRE>
    */
   public R visit(AssignmentOperator n);

   /**
    * <PRE>
    * f0 -> ConditionalOrExpression()
    * f1 -> [ "?" Expression() ":" Expression() ]
    * </PRE>
    */
   public R visit(ConditionalExpression n);

   /**
    * <PRE>
    * f0 -> ConditionalAndExpression()
    * f1 -> ( "||" ConditionalAndExpression() )*
    * </PRE>
    */
   public R visit(ConditionalOrExpression n);

   /**
    * <PRE>
    * f0 -> InclusiveOrExpression()
    * f1 -> ( "&&" InclusiveOrExpression() )*
    * </PRE>
    */
   public R visit(ConditionalAndExpression n);

   /**
    * <PRE>
    * f0 -> ExclusiveOrExpression()
    * f1 -> ( "|" ExclusiveOrExpression() )*
    * </PRE>
    */
   public R visit(InclusiveOrExpression n);

   /**
    * <PRE>
    * f0 -> AndExpression()
    * f1 -> ( "^" AndExpression() )*
    * </PRE>
    */
   public R visit(ExclusiveOrExpression n);

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> ( "&" EqualityExpression() )*
    * </PRE>
    */
   public R visit(AndExpression n);

   /**
    * <PRE>
    * f0 -> InstanceOfExpression()
    * f1 -> ( ( "==" | "!=" ) InstanceOfExpression() )*
    * </PRE>
    */
   public R visit(EqualityExpression n);

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> [ "instanceof" Type() ]
    * </PRE>
    */
   public R visit(InstanceOfExpression n);

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> ( ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" ) ShiftExpression() )*
    * </PRE>
    */
   public R visit(RelationalExpression n);

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( "&lt;&lt;" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
    * </PRE>
    */
   public R visit(ShiftExpression n);

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public R visit(AdditiveExpression n);

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public R visit(MultiplicativeExpression n);

   /**
    * <PRE>
    * f0 -> ( "+" | "-" ) UnaryExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public R visit(UnaryExpression n);

   /**
    * <PRE>
    * f0 -> "++"
    * f1 -> PrimaryExpression()
    * </PRE>
    */
   public R visit(PreIncrementExpression n);

   /**
    * <PRE>
    * f0 -> "--"
    * f1 -> PrimaryExpression()
    * </PRE>
    */
   public R visit(PreDecrementExpression n);

   /**
    * <PRE>
    * f0 -> ( "~" | "!" ) UnaryExpression()
    *       | CastExpression()
    *       | PostfixExpression()
    * </PRE>
    */
   public R visit(UnaryExpressionNotPlusMinus n);

   /**
    * <PRE>
    * f0 -> "(" PrimitiveType() ")"
    *       | "(" Type() "[" "]"
    *       | "(" Type() ")" ( "~" | "!" | "(" | &lt;IDENTIFIER&gt; | "this" | "super" | "new" | Literal() )
    * </PRE>
    */
   public R visit(CastLookahead n);

   /**
    * <PRE>
    * f0 -> PrimaryExpression()
    * f1 -> [ "++" | "--" ]
    * </PRE>
    */
   public R visit(PostfixExpression n);

   /**
    * <PRE>
    * f0 -> "(" PrimitiveType() ")" UnaryExpression()
    *       | "(" Type() ")" UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public R visit(CastExpression n);

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimarySuffix() )*
    * </PRE>
    */
   public R visit(PrimaryExpression n);

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> TypeArguments()
    * f2 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(MemberSelector n);

   /**
    * <PRE>
    * f0 -> Literal()
    *       | ( &lt;IDENTIFIER&gt; "." )* "this"
    *       | "super" "." &lt;IDENTIFIER&gt;
    *       | "(" Expression() ")"
    *       | AllocationExpression()
    *       | ResultType() "." "class"
    *       | Name()
    * </PRE>
    */
   public R visit(PrimaryPrefix n);

   /**
    * <PRE>
    * f0 -> "." "super"
    *       | "." "this"
    *       | "." AllocationExpression()
    *       | MemberSelector()
    *       | "[" Expression() "]"
    *       | "." &lt;IDENTIFIER&gt;
    *       | Arguments()
    * </PRE>
    */
   public R visit(PrimarySuffix n);

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    * </PRE>
    */
   public R visit(Literal n);

   /**
    * <PRE>
    * f0 -> "true"
    *       | "false"
    * </PRE>
    */
   public R visit(BooleanLiteral n);

   /**
    * <PRE>
    * f0 -> "null"
    * </PRE>
    */
   public R visit(NullLiteral n);

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ ArgumentList() ]
    * f2 -> ")"
    * </PRE>
    */
   public R visit(Arguments n);

   /**
    * <PRE>
    * f0 -> Expression()
    * f1 -> ( "," Expression() )*
    * </PRE>
    */
   public R visit(ArgumentList n);

   /**
    * <PRE>
    * f0 -> "new" PrimitiveType() ArrayDimsAndInits()
    *       | "new" ClassOrInterfaceType() [ TypeArguments() ] ( ArrayDimsAndInits() | Arguments() [ ClassOrInterfaceBody() ] )
    * </PRE>
    */
   public R visit(AllocationExpression n);

   /**
    * <PRE>
    * f0 -> ( "[" Expression() "]" )+ ( "[" "]" )*
    *       | ( "[" "]" )+ ArrayInitializer()
    * </PRE>
    */
   public R visit(ArrayDimsAndInits n);

   /**
    * <PRE>
    * f0 -> LabeledStatement()
    *       | AssertStatement()
    *       | Block()
    *       | EmptyStatement()
    *       | StatementExpression() ";"
    *       | SwitchStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    *       | SynchronizedStatement()
    *       | TryStatement()
    * </PRE>
    */
   public R visit(Statement n);

   /**
    * <PRE>
    * f0 -> "assert"
    * f1 -> Expression()
    * f2 -> [ ":" Expression() ]
    * f3 -> ";"
    * </PRE>
    */
   public R visit(AssertStatement n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ":"
    * f2 -> Statement()
    * </PRE>
    */
   public R visit(LabeledStatement n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( BlockStatement() )*
    * f2 -> "}"
    * </PRE>
    */
   public R visit(Block n);

   /**
    * <PRE>
    * f0 -> LocalVariableDeclaration() ";"
    *       | ( Modifiers() ClassOrInterfaceDeclaration() )
    *       | Statement()
    * </PRE>
    */
   public R visit(BlockStatement n);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> Type()
    * f2 -> VariableDeclarator()
    * f3 -> ( "," VariableDeclarator() )*
    * </PRE>
    */
   public R visit(LocalVariableDeclaration n);

   /**
    * <PRE>
    * f0 -> ";"
    * </PRE>
    */
   public R visit(EmptyStatement n);

   /**
    * <PRE>
    * f0 -> PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | PrimaryExpression() [ "++" | "--" | AssignmentOperator() Expression() ]
    * </PRE>
    */
   public R visit(StatementExpression n);

   /**
    * <PRE>
    * f0 -> "switch"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( SwitchLabel() ( BlockStatement() )* )*
    * f6 -> "}"
    * </PRE>
    */
   public R visit(SwitchStatement n);

   /**
    * <PRE>
    * f0 -> "case" Expression() ":"
    *       | "default" ":"
    * </PRE>
    */
   public R visit(SwitchLabel n);

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> [ "else" Statement() ]
    * </PRE>
    */
   public R visit(IfStatement n);

   /**
    * <PRE>
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * </PRE>
    */
   public R visit(WhileStatement n);

   /**
    * <PRE>
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    * </PRE>
    */
   public R visit(DoStatement n);

   /**
    * <PRE>
    * f0 -> "for"
    * f1 -> "("
    * f2 -> ( Modifiers() Type() &lt;IDENTIFIER&gt; ":" Expression() | [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] )
    * f3 -> ")"
    * f4 -> Statement()
    * </PRE>
    */
   public R visit(ForStatement n);

   /**
    * <PRE>
    * f0 -> LocalVariableDeclaration()
    *       | StatementExpressionList()
    * </PRE>
    */
   public R visit(ForInit n);

   /**
    * <PRE>
    * f0 -> StatementExpression()
    * f1 -> ( "," StatementExpression() )*
    * </PRE>
    */
   public R visit(StatementExpressionList n);

   /**
    * <PRE>
    * f0 -> StatementExpressionList()
    * </PRE>
    */
   public R visit(ForUpdate n);

   /**
    * <PRE>
    * f0 -> "break"
    * f1 -> [ &lt;IDENTIFIER&gt; ]
    * f2 -> ";"
    * </PRE>
    */
   public R visit(BreakStatement n);

   /**
    * <PRE>
    * f0 -> "continue"
    * f1 -> [ &lt;IDENTIFIER&gt; ]
    * f2 -> ";"
    * </PRE>
    */
   public R visit(ContinueStatement n);

   /**
    * <PRE>
    * f0 -> "return"
    * f1 -> [ Expression() ]
    * f2 -> ";"
    * </PRE>
    */
   public R visit(ReturnStatement n);

   /**
    * <PRE>
    * f0 -> "throw"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public R visit(ThrowStatement n);

   /**
    * <PRE>
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Block()
    * </PRE>
    */
   public R visit(SynchronizedStatement n);

   /**
    * <PRE>
    * f0 -> "try"
    * f1 -> Block()
    * f2 -> ( "catch" "(" FormalParameter() ")" Block() )*
    * f3 -> [ "finally" Block() ]
    * </PRE>
    */
   public R visit(TryStatement n);

   /**
    * <PRE>
    * f0 -> ( "&gt;" "&gt;" "&gt;" )
    * </PRE>
    */
   public R visit(RUNSIGNEDSHIFT n);

   /**
    * <PRE>
    * f0 -> ( "&gt;" "&gt;" )
    * </PRE>
    */
   public R visit(RSIGNEDSHIFT n);

   /**
    * <PRE>
    * f0 -> NormalAnnotation()
    *       | SingleMemberAnnotation()
    *       | MarkerAnnotation()
    * </PRE>
    */
   public R visit(Annotation n);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * f2 -> "("
    * f3 -> [ MemberValuePairs() ]
    * f4 -> ")"
    * </PRE>
    */
   public R visit(NormalAnnotation n);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * </PRE>
    */
   public R visit(MarkerAnnotation n);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * f2 -> "("
    * f3 -> MemberValue()
    * f4 -> ")"
    * </PRE>
    */
   public R visit(SingleMemberAnnotation n);

   /**
    * <PRE>
    * f0 -> MemberValuePair()
    * f1 -> ( "," MemberValuePair() )*
    * </PRE>
    */
   public R visit(MemberValuePairs n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> "="
    * f2 -> MemberValue()
    * </PRE>
    */
   public R visit(MemberValuePair n);

   /**
    * <PRE>
    * f0 -> Annotation()
    *       | MemberValueArrayInitializer()
    *       | ConditionalExpression()
    * </PRE>
    */
   public R visit(MemberValue n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> MemberValue()
    * f2 -> ( "," MemberValue() )*
    * f3 -> [ "," ]
    * f4 -> "}"
    * </PRE>
    */
   public R visit(MemberValueArrayInitializer n);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> "interface"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> AnnotationTypeBody()
    * </PRE>
    */
   public R visit(AnnotationTypeDeclaration n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( AnnotationTypeMemberDeclaration() )*
    * f2 -> "}"
    * </PRE>
    */
   public R visit(AnnotationTypeBody n);

   /**
    * <PRE>
    * f0 -> Modifiers() ( Type() &lt;IDENTIFIER&gt; "(" ")" [ DefaultValue() ] ";" | ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() | FieldDeclaration() )
    *       | ( ";" )
    * </PRE>
    */
   public R visit(AnnotationTypeMemberDeclaration n);

   /**
    * <PRE>
    * f0 -> "default"
    * f1 -> MemberValue()
    * </PRE>
    */
   public R visit(DefaultValue n);

}

