/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.java15.visitor;
import org.codecover.instrumentation.java15.syntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

@SuppressWarnings("all")
public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu);
   public void visit(NodeListOptional n, A argu);
   public void visit(NodeOptional n, A argu);
   public void visit(NodeSequence n, A argu);
   public void visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> [ PackageDeclaration() ]
    * f1 -> ( ImportDeclaration() )*
    * f2 -> ( TypeDeclaration() )*
    * f3 -> ( &lt;"\u001a"&gt; )?
    * f4 -> ( &lt;STUFF_TO_IGNORE: ~[]&gt; )?
    * f5 -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(CompilationUnit n, A argu);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> "package"
    * f2 -> Name()
    * f3 -> ";"
    * </PRE>
    */
   public void visit(PackageDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> "import"
    * f1 -> [ "static" ]
    * f2 -> Name()
    * f3 -> [ "." "*" ]
    * f4 -> ";"
    * </PRE>
    */
   public void visit(ImportDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> ( ( "public" | "static" | "protected" | "private" | "final" | "abstract" | "synchronized" | "native" | "transient" | "volatile" | "strictfp" | Annotation() ) )*
    * </PRE>
    */
   public void visit(Modifiers n, A argu);

   /**
    * <PRE>
    * f0 -> ";"
    *       | Modifiers() ( ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() )
    * </PRE>
    */
   public void visit(TypeDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> ( "class" | "interface" )
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ TypeParameters() ]
    * f3 -> [ ExtendsList() ]
    * f4 -> [ ImplementsList() ]
    * f5 -> ClassOrInterfaceBody()
    * </PRE>
    */
   public void visit(ClassOrInterfaceDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> "extends"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "," ClassOrInterfaceType() )*
    * </PRE>
    */
   public void visit(ExtendsList n, A argu);

   /**
    * <PRE>
    * f0 -> "implements"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "," ClassOrInterfaceType() )*
    * </PRE>
    */
   public void visit(ImplementsList n, A argu);

   /**
    * <PRE>
    * f0 -> "enum"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ ImplementsList() ]
    * f3 -> EnumBody()
    * </PRE>
    */
   public void visit(EnumDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> [ EnumConstant() ( "," EnumConstant() )* ]
    * f2 -> [ "," ]
    * f3 -> [ ";" ( ClassOrInterfaceBodyDeclaration() )* ]
    * f4 -> "}"
    * </PRE>
    */
   public void visit(EnumBody n, A argu);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Arguments() ]
    * f3 -> [ ClassOrInterfaceBody() ]
    * </PRE>
    */
   public void visit(EnumConstant n, A argu);

   /**
    * <PRE>
    * f0 -> "&lt;"
    * f1 -> TypeParameter()
    * f2 -> ( "," TypeParameter() )*
    * f3 -> "&gt;"
    * </PRE>
    */
   public void visit(TypeParameters n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ TypeBound() ]
    * </PRE>
    */
   public void visit(TypeParameter n, A argu);

   /**
    * <PRE>
    * f0 -> "extends"
    * f1 -> ClassOrInterfaceType()
    * f2 -> ( "&" ClassOrInterfaceType() )*
    * </PRE>
    */
   public void visit(TypeBound n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( ClassOrInterfaceBodyDeclaration() )*
    * f2 -> "}"
    * </PRE>
    */
   public void visit(ClassOrInterfaceBody n, A argu);

   /**
    * <PRE>
    * f0 -> Initializer()
    *       | Modifiers() ( ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() | ConstructorDeclaration() | FieldDeclaration() | MethodDeclaration() )
    *       | ";"
    * </PRE>
    */
   public void visit(ClassOrInterfaceBodyDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> Type()
    * f1 -> VariableDeclarator()
    * f2 -> ( "," VariableDeclarator() )*
    * f3 -> ";"
    * </PRE>
    */
   public void visit(FieldDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> VariableDeclaratorId()
    * f1 -> [ "=" VariableInitializer() ]
    * </PRE>
    */
   public void visit(VariableDeclarator n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "[" "]" )*
    * </PRE>
    */
   public void visit(VariableDeclaratorId n, A argu);

   /**
    * <PRE>
    * f0 -> ArrayInitializer()
    *       | Expression()
    * </PRE>
    */
   public void visit(VariableInitializer n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> [ VariableInitializer() ( "," VariableInitializer() )* ]
    * f2 -> [ "," ]
    * f3 -> "}"
    * </PRE>
    */
   public void visit(ArrayInitializer n, A argu);

   /**
    * <PRE>
    * f0 -> [ TypeParameters() ]
    * f1 -> ResultType()
    * f2 -> MethodDeclarator()
    * f3 -> [ "throws" NameList() ]
    * f4 -> ( Block() | ";" )
    * </PRE>
    */
   public void visit(MethodDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> FormalParameters()
    * f2 -> ( "[" "]" )*
    * </PRE>
    */
   public void visit(MethodDeclarator n, A argu);

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ FormalParameter() ( "," FormalParameter() )* ]
    * f2 -> ")"
    * </PRE>
    */
   public void visit(FormalParameters n, A argu);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> Type()
    * f2 -> [ "..." ]
    * f3 -> VariableDeclaratorId()
    * </PRE>
    */
   public void visit(FormalParameter n, A argu);

   /**
    * <PRE>
    * f0 -> [ TypeParameters() ]
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> FormalParameters()
    * f3 -> [ "throws" NameList() ]
    * f4 -> "{"
    * f5 -> [ ExplicitConstructorInvocation() ]
    * f6 -> ( BlockStatement() )*
    * f7 -> "}"
    * </PRE>
    */
   public void visit(ConstructorDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> ( ExplicitConstructorPrefix() "." )*
    * f1 -> [ TypeArguments() ]
    * f2 -> ( "this" | "super" )
    * f3 -> Arguments()
    * f4 -> ";"
    * </PRE>
    */
   public void visit(ExplicitConstructorInvocation n, A argu);

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; Arguments() )
    *       | &lt;IDENTIFIER&gt;
    *       | AllocationExpression()
    *       | "this"
    *       | "super"
    *       | ( "(" Expression() ")" )
    * </PRE>
    */
   public void visit(ExplicitConstructorPrefix n, A argu);

   /**
    * <PRE>
    * f0 -> [ "static" ]
    * f1 -> Block()
    * </PRE>
    */
   public void visit(Initializer n, A argu);

   /**
    * <PRE>
    * f0 -> ReferenceType()
    *       | PrimitiveType()
    * </PRE>
    */
   public void visit(Type n, A argu);

   /**
    * <PRE>
    * f0 -> PrimitiveType() ( "[" "]" )+
    *       | ( ClassOrInterfaceType() ( "[" "]" )* )
    * </PRE>
    */
   public void visit(ReferenceType n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ TypeArguments() ]
    * f2 -> ( "." &lt;IDENTIFIER&gt; [ TypeArguments() ] )*
    * </PRE>
    */
   public void visit(ClassOrInterfaceType n, A argu);

   /**
    * <PRE>
    * f0 -> "&lt;"
    * f1 -> TypeArgument()
    * f2 -> ( "," TypeArgument() )*
    * f3 -> "&gt;"
    * </PRE>
    */
   public void visit(TypeArguments n, A argu);

   /**
    * <PRE>
    * f0 -> ReferenceType()
    *       | "?" [ WildcardBounds() ]
    * </PRE>
    */
   public void visit(TypeArgument n, A argu);

   /**
    * <PRE>
    * f0 -> "extends" ReferenceType()
    *       | "super" ReferenceType()
    * </PRE>
    */
   public void visit(WildcardBounds n, A argu);

   /**
    * <PRE>
    * f0 -> "boolean"
    *       | "char"
    *       | "byte"
    *       | "short"
    *       | "int"
    *       | "long"
    *       | "float"
    *       | "double"
    * </PRE>
    */
   public void visit(PrimitiveType n, A argu);

   /**
    * <PRE>
    * f0 -> "void"
    *       | Type()
    * </PRE>
    */
   public void visit(ResultType n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "." &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(Name n, A argu);

   /**
    * <PRE>
    * f0 -> Name()
    * f1 -> ( "," Name() )*
    * </PRE>
    */
   public void visit(NameList n, A argu);

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * f1 -> [ AssignmentOperator() Expression() ]
    * </PRE>
    */
   public void visit(Expression n, A argu);

   /**
    * <PRE>
    * f0 -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "&lt;&lt;="
    *       | "&gt;&gt;="
    *       | "&gt;&gt;&gt;="
    *       | "&="
    *       | "^="
    *       | "|="
    * </PRE>
    */
   public void visit(AssignmentOperator n, A argu);

   /**
    * <PRE>
    * f0 -> ConditionalOrExpression()
    * f1 -> [ "?" Expression() ":" Expression() ]
    * </PRE>
    */
   public void visit(ConditionalExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ConditionalAndExpression()
    * f1 -> ( "||" ConditionalAndExpression() )*
    * </PRE>
    */
   public void visit(ConditionalOrExpression n, A argu);

   /**
    * <PRE>
    * f0 -> InclusiveOrExpression()
    * f1 -> ( "&&" InclusiveOrExpression() )*
    * </PRE>
    */
   public void visit(ConditionalAndExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ExclusiveOrExpression()
    * f1 -> ( "|" ExclusiveOrExpression() )*
    * </PRE>
    */
   public void visit(InclusiveOrExpression n, A argu);

   /**
    * <PRE>
    * f0 -> AndExpression()
    * f1 -> ( "^" AndExpression() )*
    * </PRE>
    */
   public void visit(ExclusiveOrExpression n, A argu);

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> ( "&" EqualityExpression() )*
    * </PRE>
    */
   public void visit(AndExpression n, A argu);

   /**
    * <PRE>
    * f0 -> InstanceOfExpression()
    * f1 -> ( ( "==" | "!=" ) InstanceOfExpression() )*
    * </PRE>
    */
   public void visit(EqualityExpression n, A argu);

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> [ "instanceof" Type() ]
    * </PRE>
    */
   public void visit(InstanceOfExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> ( ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" ) ShiftExpression() )*
    * </PRE>
    */
   public void visit(RelationalExpression n, A argu);

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( "&lt;&lt;" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
    * </PRE>
    */
   public void visit(ShiftExpression n, A argu);

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public void visit(AdditiveExpression n, A argu);

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public void visit(MultiplicativeExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ( "+" | "-" ) UnaryExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public void visit(UnaryExpression n, A argu);

   /**
    * <PRE>
    * f0 -> "++"
    * f1 -> PrimaryExpression()
    * </PRE>
    */
   public void visit(PreIncrementExpression n, A argu);

   /**
    * <PRE>
    * f0 -> "--"
    * f1 -> PrimaryExpression()
    * </PRE>
    */
   public void visit(PreDecrementExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ( "~" | "!" ) UnaryExpression()
    *       | CastExpression()
    *       | PostfixExpression()
    * </PRE>
    */
   public void visit(UnaryExpressionNotPlusMinus n, A argu);

   /**
    * <PRE>
    * f0 -> "(" PrimitiveType() ")"
    *       | "(" Type() "[" "]"
    *       | "(" Type() ")" ( "~" | "!" | "(" | &lt;IDENTIFIER&gt; | "this" | "super" | "new" | Literal() )
    * </PRE>
    */
   public void visit(CastLookahead n, A argu);

   /**
    * <PRE>
    * f0 -> PrimaryExpression()
    * f1 -> [ "++" | "--" ]
    * </PRE>
    */
   public void visit(PostfixExpression n, A argu);

   /**
    * <PRE>
    * f0 -> "(" PrimitiveType() ")" UnaryExpression()
    *       | "(" Type() ")" UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public void visit(CastExpression n, A argu);

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimarySuffix() )*
    * </PRE>
    */
   public void visit(PrimaryExpression n, A argu);

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> TypeArguments()
    * f2 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(MemberSelector n, A argu);

   /**
    * <PRE>
    * f0 -> Literal()
    *       | ( &lt;IDENTIFIER&gt; "." )* "this"
    *       | "super" "." &lt;IDENTIFIER&gt;
    *       | "(" Expression() ")"
    *       | AllocationExpression()
    *       | ResultType() "." "class"
    *       | Name()
    * </PRE>
    */
   public void visit(PrimaryPrefix n, A argu);

   /**
    * <PRE>
    * f0 -> "." "super"
    *       | "." "this"
    *       | "." AllocationExpression()
    *       | MemberSelector()
    *       | "[" Expression() "]"
    *       | "." &lt;IDENTIFIER&gt;
    *       | Arguments()
    * </PRE>
    */
   public void visit(PrimarySuffix n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    * </PRE>
    */
   public void visit(Literal n, A argu);

   /**
    * <PRE>
    * f0 -> "true"
    *       | "false"
    * </PRE>
    */
   public void visit(BooleanLiteral n, A argu);

   /**
    * <PRE>
    * f0 -> "null"
    * </PRE>
    */
   public void visit(NullLiteral n, A argu);

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ ArgumentList() ]
    * f2 -> ")"
    * </PRE>
    */
   public void visit(Arguments n, A argu);

   /**
    * <PRE>
    * f0 -> Expression()
    * f1 -> ( "," Expression() )*
    * </PRE>
    */
   public void visit(ArgumentList n, A argu);

   /**
    * <PRE>
    * f0 -> "new" PrimitiveType() ArrayDimsAndInits()
    *       | "new" ClassOrInterfaceType() [ TypeArguments() ] ( ArrayDimsAndInits() | Arguments() [ ClassOrInterfaceBody() ] )
    * </PRE>
    */
   public void visit(AllocationExpression n, A argu);

   /**
    * <PRE>
    * f0 -> ( "[" Expression() "]" )+ ( "[" "]" )*
    *       | ( "[" "]" )+ ArrayInitializer()
    * </PRE>
    */
   public void visit(ArrayDimsAndInits n, A argu);

   /**
    * <PRE>
    * f0 -> LabeledStatement()
    *       | AssertStatement()
    *       | Block()
    *       | EmptyStatement()
    *       | StatementExpression() ";"
    *       | SwitchStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    *       | SynchronizedStatement()
    *       | TryStatement()
    * </PRE>
    */
   public void visit(Statement n, A argu);

   /**
    * <PRE>
    * f0 -> "assert"
    * f1 -> Expression()
    * f2 -> [ ":" Expression() ]
    * f3 -> ";"
    * </PRE>
    */
   public void visit(AssertStatement n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ":"
    * f2 -> Statement()
    * </PRE>
    */
   public void visit(LabeledStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( BlockStatement() )*
    * f2 -> "}"
    * </PRE>
    */
   public void visit(Block n, A argu);

   /**
    * <PRE>
    * f0 -> LocalVariableDeclaration() ";"
    *       | ( Modifiers() ClassOrInterfaceDeclaration() )
    *       | Statement()
    * </PRE>
    */
   public void visit(BlockStatement n, A argu);

   /**
    * <PRE>
    * f0 -> Modifiers()
    * f1 -> Type()
    * f2 -> VariableDeclarator()
    * f3 -> ( "," VariableDeclarator() )*
    * </PRE>
    */
   public void visit(LocalVariableDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> ";"
    * </PRE>
    */
   public void visit(EmptyStatement n, A argu);

   /**
    * <PRE>
    * f0 -> PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | PrimaryExpression() [ "++" | "--" | AssignmentOperator() Expression() ]
    * </PRE>
    */
   public void visit(StatementExpression n, A argu);

   /**
    * <PRE>
    * f0 -> "switch"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( SwitchLabel() ( BlockStatement() )* )*
    * f6 -> "}"
    * </PRE>
    */
   public void visit(SwitchStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "case" Expression() ":"
    *       | "default" ":"
    * </PRE>
    */
   public void visit(SwitchLabel n, A argu);

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> [ "else" Statement() ]
    * </PRE>
    */
   public void visit(IfStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * </PRE>
    */
   public void visit(WhileStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    * </PRE>
    */
   public void visit(DoStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "for"
    * f1 -> "("
    * f2 -> ( Modifiers() Type() &lt;IDENTIFIER&gt; ":" Expression() | [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] )
    * f3 -> ")"
    * f4 -> Statement()
    * </PRE>
    */
   public void visit(ForStatement n, A argu);

   /**
    * <PRE>
    * f0 -> LocalVariableDeclaration()
    *       | StatementExpressionList()
    * </PRE>
    */
   public void visit(ForInit n, A argu);

   /**
    * <PRE>
    * f0 -> StatementExpression()
    * f1 -> ( "," StatementExpression() )*
    * </PRE>
    */
   public void visit(StatementExpressionList n, A argu);

   /**
    * <PRE>
    * f0 -> StatementExpressionList()
    * </PRE>
    */
   public void visit(ForUpdate n, A argu);

   /**
    * <PRE>
    * f0 -> "break"
    * f1 -> [ &lt;IDENTIFIER&gt; ]
    * f2 -> ";"
    * </PRE>
    */
   public void visit(BreakStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "continue"
    * f1 -> [ &lt;IDENTIFIER&gt; ]
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ContinueStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "return"
    * f1 -> [ Expression() ]
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ReturnStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "throw"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ThrowStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Block()
    * </PRE>
    */
   public void visit(SynchronizedStatement n, A argu);

   /**
    * <PRE>
    * f0 -> "try"
    * f1 -> Block()
    * f2 -> ( "catch" "(" FormalParameter() ")" Block() )*
    * f3 -> [ "finally" Block() ]
    * </PRE>
    */
   public void visit(TryStatement n, A argu);

   /**
    * <PRE>
    * f0 -> ( "&gt;" "&gt;" "&gt;" )
    * </PRE>
    */
   public void visit(RUNSIGNEDSHIFT n, A argu);

   /**
    * <PRE>
    * f0 -> ( "&gt;" "&gt;" )
    * </PRE>
    */
   public void visit(RSIGNEDSHIFT n, A argu);

   /**
    * <PRE>
    * f0 -> NormalAnnotation()
    *       | SingleMemberAnnotation()
    *       | MarkerAnnotation()
    * </PRE>
    */
   public void visit(Annotation n, A argu);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * f2 -> "("
    * f3 -> [ MemberValuePairs() ]
    * f4 -> ")"
    * </PRE>
    */
   public void visit(NormalAnnotation n, A argu);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * </PRE>
    */
   public void visit(MarkerAnnotation n, A argu);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> Name()
    * f2 -> "("
    * f3 -> MemberValue()
    * f4 -> ")"
    * </PRE>
    */
   public void visit(SingleMemberAnnotation n, A argu);

   /**
    * <PRE>
    * f0 -> MemberValuePair()
    * f1 -> ( "," MemberValuePair() )*
    * </PRE>
    */
   public void visit(MemberValuePairs n, A argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> "="
    * f2 -> MemberValue()
    * </PRE>
    */
   public void visit(MemberValuePair n, A argu);

   /**
    * <PRE>
    * f0 -> Annotation()
    *       | MemberValueArrayInitializer()
    *       | ConditionalExpression()
    * </PRE>
    */
   public void visit(MemberValue n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> MemberValue()
    * f2 -> ( "," MemberValue() )*
    * f3 -> [ "," ]
    * f4 -> "}"
    * </PRE>
    */
   public void visit(MemberValueArrayInitializer n, A argu);

   /**
    * <PRE>
    * f0 -> "@"
    * f1 -> "interface"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> AnnotationTypeBody()
    * </PRE>
    */
   public void visit(AnnotationTypeDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( AnnotationTypeMemberDeclaration() )*
    * f2 -> "}"
    * </PRE>
    */
   public void visit(AnnotationTypeBody n, A argu);

   /**
    * <PRE>
    * f0 -> Modifiers() ( Type() &lt;IDENTIFIER&gt; "(" ")" [ DefaultValue() ] ";" | ClassOrInterfaceDeclaration() | EnumDeclaration() | AnnotationTypeDeclaration() | FieldDeclaration() )
    *       | ( ";" )
    * </PRE>
    */
   public void visit(AnnotationTypeMemberDeclaration n, A argu);

   /**
    * <PRE>
    * f0 -> "default"
    * f1 -> MemberValue()
    * </PRE>
    */
   public void visit(DefaultValue n, A argu);

}

