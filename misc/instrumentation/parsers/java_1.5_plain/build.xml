<!--
 !
 ! You need javacc 4.0 in "..\..\lib\javacc-4.0\bin\lib\javacc.jar"
 ! You can get it from: https://javacc.dev.java.net/
 !
 !-->
<project default="generate">

    <property name="jtb-src" value="Java1.5-adapted.jj"/>
    <property name="jtb-out" value="Java1.5_jtb.out.jj"/>
    <property name="javacc-src" value="${jtb-out}"/>

    <target name="all">
        <antcall target="generate"/>
        <antcall target="copy"/>
    </target>

    <target name="generate">
        <antcall target="jtb"/>
        <antcall target="javacc"/>
        <antcall target="replacing"/>

        <echo message="use 'ant copy' to copy files to trunk/code/instrumentation-java/"/>
    </target>

    <target name="jtb">
        <delete>
            <fileset dir="." includes="org/codecover/instrumentation/java15/syntaxtree/*.java"/>
            <fileset dir="." includes="org/codecover/instrumentation/java15/visitor/*.java"/>
        </delete>

        <java jar ="..\..\lib\jtb132.jar"
              failonerror="true"
              fork="yes"
              clonevm="yes">

            <!-- package for the syntaxtree and visitor -->
            <arg line="-p org.codecover.instrumentation.java15" />
            <!-- target grammar -->
            <arg line="-o ${jtb-out}" />
            <!-- produce treedumper -->
            <arg line="-printer" />
            <!-- A Scheme tree building visitor -->
            <!-- <arg line="-scheme" /> -->
            <!-- Generate JavaDoc-friendly comments in the nodes and visitor. -->
            <arg line="-jd" />
            <!-- Generate parent pointers in all node classes. -->
            <arg line="-pp" />
            <!-- Generate special tokens into the tree. -->
            <arg line="-tk" />
            <!-- source grammar -->
            <arg line="${jtb-src}" />
        </java>

        <move todir="org/codecover/instrumentation/java15/syntaxtree">
            <fileset dir="syntaxtree" />
        </move>
        <move todir="org/codecover/instrumentation/java15/visitor">
            <fileset dir="visitor" />
        </move>
    </target>

    <target name="javacc">
        <delete>
            <fileset dir="."
                     includes="org/codecover/instrumentation/java15/parser/*.java"
                     excludes="org/codecover/instrumentation/java15/parser/JavaCharStream.java"/>
        </delete>

        <java classname="javacc"
              failonerror="true"
              fork="yes"
              clonevm="yes"
              classpath="..\..\lib\javacc-4.0\bin\lib\javacc.jar">

            <!-- Parser is nonstatic -->
            <arg line="-static=false" />
            <!-- move created files to this dir and use as package declaration -->
            <arg line="-output_directory=org/codecover/instrumentation/java15/parser/" />
            <!-- source grammar -->
            <arg line="${javacc-src}" />
        </java>
    </target>

    <target name="replacing">
	    <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParser.java"/>
            <replacetoken>public class JavaParser implements JavaParserConstants</replacetoken>
            <replacevalue><![CDATA[/**
 * @author Generated By: JavaCC. JavaParser.java
 * @author Christoph Müller:<br>
 * - adapted to new NodeToken
 *
 * @version 1.0 ($Id$)
 */
@SuppressWarnings("all")
public class JavaParser implements JavaParserConstants]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParser.java"/>
            <replacetoken>static private final class LookaheadSuccess extends java.lang.Error</replacetoken>
            <replacevalue>static final class LookaheadSuccess extends java.lang.Error</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParser.java"/>
            <replacetoken>new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn)</replacetoken>
            <replacevalue>NodeToken.createToken(t)</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParser.java"/>
            <replacetoken>class JTBToolkit</replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
class JTBToolkit]]></replacevalue>
        </replace>

        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>public class JavaParserTokenManager implements JavaParserConstants</replacetoken>
            <replacevalue><![CDATA[/**
 * @author Generated By: JavaCC. JavaParserTokenManager.java
 * @author Christoph Müller:<br>
 * - adapted to new {@link JavaCharStream}<br>
 * - corrected {@link #MoreLexicalActions()} for offset calculation<br>
 * - added {@link #resetGTImagesAndOffset(Token)}
 *
 * @version 1.0 ($Id$)
 */
@SuppressWarnings("all")
public class JavaParserTokenManager implements JavaParserConstants]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>t.image = (im == null) ? input_stream.GetImage() : im;</replacetoken>
            <replacevalue><![CDATA[t.setImages(input_stream.getSourceFileImage(),
     (im == null ? input_stream.getParsedImage() : im));
   t.startOffset = input_stream.getStartOffset();
   t.endOffset = input_stream.getEndOffset();]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>input_stream.GetImage()</replacetoken>
            <replacevalue>input_stream.getParsedImage()</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>input_stream.BeginToken()</replacetoken>
            <replacevalue>input_stream.beginToken()</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>input_stream.GetSuffix(</replacetoken>
            <replacevalue>input_stream.getSuffix(</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>void TokenLexicalActions(Token matchedToken)</replacetoken>
            <replacevalue><![CDATA[
    private void resetGTImagesAndOffset(Token matchedToken) {
        // we have to reset the image -> was it \u003e or >
        // and we have to correct the offset too
        String sourceFileImage = matchedToken.getSourceFileImage();
        if (sourceFileImage.charAt(0) == '>') {
            matchedToken.setImages(jjstrLiteralImages[GT], jjstrLiteralImages[GT]);
            matchedToken.endOffset = matchedToken.startOffset + 1;
        } else if (sourceFileImage.startsWith("\\u003e")) {
            matchedToken.setImages("\\u003e", jjstrLiteralImages[GT]);
            matchedToken.endOffset = matchedToken.startOffset + 6;
        } else {
            throw new IllegalStateException("Expected one of '>' or '\\u003e'");
        }
    }

void TokenLexicalActions(Token matchedToken)]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken><![CDATA[         input_stream.backup(2);
         matchedToken.image = ">";
         break;]]></replacetoken>
            <replacevalue><![CDATA[         input_stream.backup(2);
         resetGTImagesAndOffset(matchedToken);
         break;]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken><![CDATA[         input_stream.backup(1);
         matchedToken.image = ">";
         break;]]></replacetoken>
            <replacevalue><![CDATA[         input_stream.backup(1);
         resetGTImagesAndOffset(matchedToken);
         break;]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserTokenManager.java"/>
            <replacetoken>StringBuffer</replacetoken>
            <replacevalue>StringBuilder</replacevalue>
        </replace>

        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="JavaParserConstants.java"/>
            <replacetoken>public interface JavaParserConstants</replacetoken>
            <replacevalue><![CDATA[/**
 * @author Generated By: JavaCC. JavaParserConstants.java
 *
 * @version 1.0 ($Id$)
 */
@SuppressWarnings("all")
public interface JavaParserConstants]]></replacevalue>
        </replace>

        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="ParseException.java"/>
            <replacetoken>public class ParseException extends Exception</replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
public class ParseException extends org.codecover.instrumentation.exceptions.ParseException]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="ParseException.java"/>
            <replacetoken>retval += add_escapes(tok.image);</replacetoken>
            <replacevalue>retval += add_escapes(tok.getParsedImage());</replacevalue>
        </replace>

        <replace dir="org/codecover/instrumentation/java15/parser/" encoding="UTF-8">
      	    <include name="TokenMgrError.java"/>
            <replacetoken>public class TokenMgrError extends Error</replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
public class TokenMgrError extends Error]]></replacevalue>
        </replace>

    	<!-- create visitors with Exception !-->
        <copy file="org/codecover/instrumentation/java15/visitor/Visitor.java" overwrite="yes"
              tofile="org/codecover/instrumentation/java15/visitor/VisitorWithException.java" />
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="VisitorWithException.java"/>
            <replacetoken>public interface Visitor</replacetoken>
            <replacevalue>public interface VisitorWithException</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="VisitorWithException.java"/>
            <replacetoken>* All void visitors must implement this interface.</replacetoken>
            <replacevalue><![CDATA[* All void visitors must implement this interface.
 * This is a modified {@link Visitor} that allows Exceptions.
 *
 * @author generated by JTB 1.3.2
 * @author Christoph Müller
 * 
 * @version 1.0 ($Id$)]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="VisitorWithException.java"/>
            <replacetoken> n);</replacetoken>
            <replacevalue> n) throws java.io.IOException;</replacevalue>
        </replace>

        <copy file="org/codecover/instrumentation/java15/visitor/DepthFirstVisitor.java" overwrite="yes"
              tofile="org/codecover/instrumentation/java15/visitor/DepthFirstVisitorWithException.java" />
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="DepthFirstVisitorWithException.java"/>
            <replacetoken>public class DepthFirstVisitor implements Visitor</replacetoken>
            <replacevalue>public class DepthFirstVisitorWithException implements VisitorWithException</replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="DepthFirstVisitorWithException.java"/>
            <replacetoken>* order.  Your visitors may extend this class.</replacetoken>
            <replacevalue><![CDATA[* order. Your visitors may extend this class.<br>
 * This class was adapted from {@link DepthFirstVisitor} but allows the throwing
 * of IOExceptions, that might be produced by {@link Writer#write(String)}.
 * 
 * @author generated by JTB 1.3.2
 * @author Christoph Müller
 * 
 * @version 1.0 ($Id$)]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/visitor/" encoding="UTF-8">
      	    <include name="DepthFirstVisitorWithException.java"/>
            <replacetoken> n) {</replacetoken>
            <replacevalue> n) throws java.io.IOException {</replacevalue>
        </replace>

        <replace dir="org/codecover/instrumentation/java15/" encoding="UTF-8">
      	    <include name="visitor/*.java"/>
      	    <include name="syntaxtree/*.java"/>
            <replacetoken>public class </replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
public class ]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/" encoding="UTF-8">
      	    <include name="visitor/*.java"/>
      	    <include name="syntaxtree/*.java"/>
            <replacetoken>public interface </replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
public interface ]]></replacevalue>
        </replace>

    	<!-- adapt Syntaxtree !-->
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="*.java"/>
      	    <exclude name="Node.java"/>
      	    <exclude name="NodeListInterface.java"/>
      	    <exclude name="NodeChoice.java"/>
            <replacetoken><![CDATA[public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu) {]]></replacetoken>
            <replacevalue><![CDATA[public void accept(org.codecover.instrumentation.java15.visitor.VisitorWithException v) throws java.io.IOException {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu) {]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="*.java"/>
      	    <exclude name="Node.java"/>
      	    <exclude name="NodeListInterface.java"/>
      	    <exclude name="NodeChoice.java"/>
            <replacetoken><![CDATA[public Node getParent()       { return parent; }]]></replacetoken>
            <replacevalue><![CDATA[public Node getParent()       { return parent; }
   /** for debugging purposes */
   @Override
   public String toString() {
      return org.codecover.instrumentation.java15.visitor.TreeSourceFileImageDumper.convertToString(this);
   }]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="Node.java"/>
      	    <include name="NodeListInterface.java"/>
            <replacetoken><![CDATA[public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu);]]></replacetoken>
            <replacevalue><![CDATA[public void accept(org.codecover.instrumentation.java15.visitor.VisitorWithException v) throws java.io.IOException;
   public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu);]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="NodeChoice.java"/>
            <replacetoken><![CDATA[public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu) {]]></replacetoken>
            <replacevalue><![CDATA[public void accept(org.codecover.instrumentation.java15.visitor.VisitorWithException v) throws java.io.IOException {
      choice.accept(v);
   }
   public <R,A> R accept(org.codecover.instrumentation.java15.visitor.GJVisitor<R,A> v, A argu) {]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="NodeSequence.java"/>
            <replacetoken><![CDATA[public class NodeSequence implements NodeListInterface {]]></replacetoken>
            <replacevalue><![CDATA[public class NodeSequence implements NodeListInterface {
   public static final NodeSequence EMPTY_INSTANCE = new NodeSequence(0);
]]></replacevalue>
        </replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="Statement.java"/>
      	    <include name="SwitchStatement.java"/>
      	    <include name="IfStatement.java"/>
      	    <include name="WhileStatement.java"/>
      	    <include name="DoStatement.java"/>
      	    <include name="ForStatement.java"/>
      	    <include name="TryStatement.java"/>
      	    <include name="ExplicitConstructorInvocation.java"/>
            <include name="FieldDeclaration.java"/>
            <replacetoken><![CDATA[implements Node {]]></replacetoken>
            <replacevalue><![CDATA[implements Node {
   public String statementID = null;
   public NodeSequence labelToken = NodeSequence.EMPTY_INSTANCE;]]></replacevalue>
    	</replace>
        <replace dir="org/codecover/instrumentation/java15/syntaxtree/" encoding="UTF-8">
      	    <include name="Modifiers.java"/>
            <replacetoken><![CDATA[implements Node {]]></replacetoken>
            <replacevalue><![CDATA[implements Node {
   public int startOffset = -1;]]></replacevalue>
    	</replace>

		<antcall target="add-epl-header" />
    	
		<fixcrlf srcdir="org/codecover/instrumentation/java15/parser" 
		         eol="unix"
    	         encoding="UTF-8"/>
		<fixcrlf srcdir="org/codecover/instrumentation/java15/syntaxtree" 
		         eol="unix"
    	         encoding="UTF-8"/>
		<fixcrlf srcdir="org/codecover/instrumentation/java15/visitor" 
		         eol="unix"
    	         encoding="UTF-8"/>
    </target>

	<target name="add-epl-header" description="Adds the EPL licence header to the generated files">
		<loadfile property="epl-header-text"
			      srcFile="../../../SourcefileCopyrightHeader" 
			      encoding="UTF-8" />

		<replaceregexp match="^"
		               replace="${epl-header-text}"
					   encoding="UTF-8">
			<fileset dir="org/codecover/instrumentation/java15/parser">
				<include name="*.java"/>
				<exclude name="NodeToken.java"/>
                <exclude name="JavaCharStream.java"/>
			</fileset>
		</replaceregexp>
		<replaceregexp match="^"
		               replace="${epl-header-text}"
					   encoding="UTF-8">
			<fileset dir="org/codecover/instrumentation/java15/syntaxtree">
				<include name="*.java"/>
				<exclude name="NodeToken.java"/>
			</fileset>
		</replaceregexp>
		<replaceregexp match="^"
		               replace="${epl-header-text}"
		               encoding="UTF-8">
			<fileset dir="org/codecover/instrumentation/java15/visitor">
				<include name="*.java"/>
			</fileset>
		</replaceregexp>
    </target>

    <target name="copy">
		 <copy overwrite="yes" 
		       todir="../../../../code/instrumentation-java/src/org/codecover/instrumentation/java15/parser">
		 	<fileset dir="org/codecover/instrumentation/java15/parser">
		 		<include name="JavaParser.java"/>
		 		<include name="JavaParserConstants.java"/>
		 		<include name="JavaParserTokenManager.java"/>
		 		<include name="ParseException.java"/>
		 		<include name="TokenMgrError.java"/>
		    </fileset>
		 </copy>
		 <copy overwrite="yes" 
		       todir="../../../../code/instrumentation-java/src/org/codecover/instrumentation/java15/visitor">
		 	<fileset dir="org/codecover/instrumentation/java15/visitor">
		 		<include name="*.java"/>
		 		<exclude name="TreeDumper.java"/>
		 		<exclude name="TreeFormatter.java"/>
		    </fileset>
		 </copy>
    	<!-- we have to delete the old syntaxtree - maybe, some classes are not needed anymore -->
		 <delete includeEmptyDirs="false">
		 	<fileset dir="../../../../code/instrumentation-java/src/org/codecover/instrumentation/java15/syntaxtree/">
		 		<include name="*.java"/>
		 		<exclude name="NodeToken.java"/>
		 		<exclude name="package-info.java"/>
		 	</fileset>
		 </delete>
		 <copy overwrite="yes" 
		      todir="../../../../code/instrumentation-java/src/org/codecover/instrumentation/java15/syntaxtree">
			<fileset dir="org/codecover/instrumentation/java15/syntaxtree">
				<include name="*.java"/>
				<exclude name="NodeToken.java"/>
				<exclude name="package-info.java"/>
		   </fileset>
		 </copy>
    </target>
</project>