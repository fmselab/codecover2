///////////////////////////////////////////////////////////////////////////////
//
// $Id: CobolParserTokenManager.java 1 2007-12-12 17:37:26Z t-scheller $
// 
///////////////////////////////////////////////////////////////////////////////

/* Generated By:JavaCC: Do not edit this line. CobolParserTokenManager.java */
package org.gbt2.instrumentation.cobol85.parser;
import org.gbt2.instrumentation.cobol85.syntaxtree.*;
import java.util.Vector;

public class CobolParserTokenManager implements CobolParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   switch (pos)
   {
      case 0:
         if ((active7 & 0x802000000L) != 0L)
            return 0;
         if ((active0 & 0xffffffffffffff08L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0xffffffffffffffffL) != 0L || (active5 & 0xffffffffffffffffL) != 0L || (active6 & 0xfffffff6ffffffffL) != 0L || (active7 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 0;
            return 43;
         }
         if ((active7 & 0x300000L) != 0L)
            return 44;
         if ((active7 & 0x80000L) != 0L)
            return 45;
         if ((active7 & 0x1c00L) != 0L)
         {
            jjmatchedKind = 462;
            jjmatchedPos = 0;
            return 46;
         }
         if ((active0 & 0x2L) != 0L)
            return 47;
         if ((active7 & 0xc00000L) != 0L)
            return 48;
         return -1;
      case 1:
         if ((active7 & 0x400000L) != 0L)
            return 22;
         if ((active0 & 0xf90100000000L) != 0L || (active1 & 0x3ffff000000L) != 0L || (active2 & 0xffb8088010000000L) != 0L || (active3 & 0x39603000000001fL) != 0L || (active4 & 0x4300000002000018L) != 0L || (active5 & 0x3000000000000000L) != 0L || (active6 & 0x30440241000180L) != 0L || (active7 & 0x2L) != 0L)
            return 43;
         if ((active7 & 0x1c00L) != 0L)
            return 46;
         if ((active2 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 0;
            }
            return 49;
         }
         if ((active0 & 0xffff06feffffff08L) != 0L || (active1 & 0xfffffc0000ffffffL) != 0L || (active2 & 0x41f77fefffffffL) != 0L || (active3 & 0xfc69fcffffffffe0L) != 0L || (active4 & 0xbcfffffffdffffe7L) != 0L || (active5 & 0xcfffffffffffffffL) != 0L || (active6 & 0xffcfbbf4befffe7fL) != 0L || (active7 & 0x1fdL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active7 & 0x100000L) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active0 & 0x7b004c00L) != 0L || (active1 & 0xffa8000000600000L) != 0L || (active2 & 0x800091fffL) != 0L || (active3 & 0x4020000000200L) != 0L || (active4 & 0x1000000000000060L) != 0L || (active5 & 0x2000020020000400L) != 0L || (active6 & 0x303220080000400L) != 0L)
            return 43;
         if ((active0 & 0xffffc6fe84ffb308L) != 0L || (active1 & 0x57fffffe9fffffL) != 0L || (active2 & 0xff51f7f7eff6e000L) != 0L || (active3 & 0xff69fcfffffffdefL) != 0L || (active4 & 0xacfffffffdffff87L) != 0L || (active5 & 0xcffffdffdffffbffL) != 0L || (active6 & 0xfcfcddf67ffffb7fL) != 0L || (active7 & 0x1ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 2;
            }
            return 43;
         }
         if ((active2 & 0x6000000000000L) != 0L)
            return 49;
         return -1;
      case 3:
         if ((active0 & 0x3cf04fec4dfbb08L) != 0L || (active1 & 0x437f7ffe018fe0L) != 0L || (active2 & 0xff51f7e78e76f000L) != 0L || (active3 & 0x7f49f07b700f550bL) != 0L || (active4 & 0x8cfffffdf9ffff46L) != 0L || (active5 & 0x410dcd17df003bdfL) != 0L || (active6 & 0x972849e47f1c7a7cL) != 0L || (active7 & 0x1efL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 3;
            }
            return 43;
         }
         if ((active0 & 0xfc30c20030200000L) != 0L || (active1 & 0x148080009e701fL) != 0L || (active2 & 0x1061800000L) != 0L || (active3 & 0x80200c8483f0a8e4L) != 0L || (active4 & 0x2000000204000081L) != 0L || (active5 & 0x8ef2300800ffc020L) != 0L || (active6 & 0x68d4b41200e38103L) != 0L || (active7 & 0x10L) != 0L)
            return 43;
         if ((active3 & 0xc000000L) != 0L || (active5 & 0xe000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 2;
            }
            return 49;
         }
         if ((active1 & 0xff00000000400000L) != 0L || (active2 & 0x4000000000fffL) != 0L || (active6 & 0x80000000L) != 0L)
            return 49;
         return -1;
      case 4:
         if ((active1 & 0xff00000000400000L) != 0L || (active2 & 0x4000000000fffL) != 0L || (active3 & 0xc000000L) != 0L || (active5 & 0xe000000000L) != 0L || (active6 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 4;
            }
            return 49;
         }
         if ((active0 & 0xd006020c02008L) != 0L || (active1 & 0x8000L) != 0L || (active2 & 0xc300200308266000L) != 0L || (active3 & 0x500080020230500L) != 0L || (active4 & 0x402880000f00000L) != 0L || (active5 & 0x801c0020c000000L) != 0L || (active6 & 0x428182018543a40L) != 0L || (active7 & 0xd0L) != 0L)
            return 43;
         if ((active2 & 0x1800000000000L) != 0L || (active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 3;
            }
            return 49;
         }
         if ((active0 & 0x83c2c49ec41f9b00L) != 0L || (active1 & 0x437ffffe014fffL) != 0L || (active2 & 0x3c5057e486509000L) != 0L || (active3 & 0x7a49f079528c50cbL) != 0L || (active4 & 0x88fd77fdf90fff46L) != 0L || (active5 & 0x410c2d15d3003bdfL) != 0L || (active6 & 0xdb0041c46788403cL) != 0L || (active7 & 0x12fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 4;
            }
            return 43;
         }
         if ((active0 & 0x7820000000000000L) != 0L || (active1 & 0x180000L) != 0L || (active2 & 0x40000000L) != 0L || (active3 & 0x400000L) != 0L || (active4 & 0x1L) != 0L || (active5 & 0xfe0000L) != 0L || (active6 & 0x10000L) != 0L)
            return 49;
         return -1;
      case 5:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xfe000000L) != 0L || (active5 & 0x3000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 4;
            }
            return 49;
         }
         if ((active0 & 0x8240c008449f9800L) != 0L || (active1 & 0x35df700014fffL) != 0L || (active2 & 0x3e50516404508000L) != 0L || (active3 & 0x7248e059428010cbL) != 0L || (active4 & 0x8a107fd180bff46L) != 0L || (active5 & 0x410d2d01d00003cfL) != 0L || (active6 & 0xcb00008045084020L) != 0L || (active7 & 0x119L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 5;
            }
            return 43;
         }
         if ((active0 & 0x180049680000300L) != 0L || (active1 & 0x40220800000000L) != 0L || (active2 & 0x68082001000L) != 0L || (active3 & 0x8011020100e4000L) != 0L || (active4 & 0x805c7000e1840000L) != 0L || (active5 & 0x140b000810L) != 0L || (active6 & 0x100049442280201cL) != 0L || (active7 & 0x26L) != 0L)
            return 43;
         if ((active0 & 0x7800000000000000L) != 0L || (active1 & 0x4000000000000000L) != 0L || (active2 & 0x8000000000000000L) != 0L)
            return 49;
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0xbf00000000580000L) != 0L || (active2 & 0x5800040000fffL) != 0L || (active3 & 0x20c400000L) != 0L || (active4 & 0x1L) != 0L || (active5 & 0xe000fe0000L) != 0L || (active6 & 0x80010000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 5;
            }
            return 49;
         }
         return -1;
      case 6:
         if ((active0 & 0x8240c008449f9000L) != 0L || (active1 & 0x141f70001496fL) != 0L || (active2 & 0x2450006004508000L) != 0L || (active3 & 0x1240005802000042L) != 0L || (active4 & 0x30245d40083e02L) != 0L || (active5 & 0x400d2d01d00003c2L) != 0L || (active6 & 0xcb00000004080038L) != 0L || (active7 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 6;
            }
            return 43;
         }
         if ((active0 & 0x800L) != 0L || (active1 & 0x21c0000000690L) != 0L || (active2 & 0x1a00510400000000L) != 0L || (active3 & 0x4008600140801089L) != 0L || (active4 & 0x88143a09803c144L) != 0L || (active5 & 0x10000000000000dL) != 0L || (active6 & 0x8041004000L) != 0L || (active7 & 0x109L) != 0L)
            return 43;
         if ((active0 & 0x22000000000000L) != 0L || (active1 & 0xbe000000fe180000L) != 0L || (active2 & 0x8005800040000ffeL) != 0L || (active3 & 0x20c400000L) != 0L || (active4 & 0x1L) != 0L || (active5 & 0xe000fe3000L) != 0L || (active6 & 0x80010000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 6;
            }
            return 49;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000L) != 0L || (active5 & 0x2000000L) != 0L)
            return 49;
         if ((active1 & 0x400000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x2000800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 5;
            }
            return 49;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xbc000000fe580000L) != 0L || (active2 & 0x8005800040000ffbL) != 0L || (active3 & 0x200080020c400000L) != 0L || (active4 & 0x8000000000001L) != 0L || (active5 & 0xe002fe2000L) != 0L || (active6 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 7;
            }
            return 49;
         }
         if ((active0 & 0x78000L) != 0L || (active1 & 0x400000010540L) != 0L || (active2 & 0x2440006004100000L) != 0L || (active3 & 0x1040005802000000L) != 0L || (active4 & 0x30001000000e02L) != 0L || (active5 & 0x40050d01c00001c2L) != 0L || (active6 & 0x8900000004000020L) != 0L)
            return 43;
         if ((active1 & 0x200000000L) != 0L || (active5 & 0x10000000L) != 0L || (active6 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 6;
            }
            return 49;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x200100000000000L) != 0L || (active2 & 0x4L) != 0L || (active3 & 0x400000000000L) != 0L || (active4 & 0x10030000L) != 0L || (active5 & 0x1008L) != 0L || (active6 & 0x80000000L) != 0L)
            return 49;
         if ((active0 & 0x8240c00844981000L) != 0L || (active1 & 0x101f50000482fL) != 0L || (active2 & 0x1010000000408000L) != 0L || (active3 & 0x200000000000042L) != 0L || (active4 & 0x244d40083000L) != 0L || (active5 & 0x8200000000200L) != 0L || (active6 & 0x4200000000000018L) != 0L || (active7 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 7;
            }
            return 43;
         }
         return -1;
      case 8:
         if ((active0 & 0x82000000041f0000L) != 0L || (active1 & 0x101840000482fL) != 0L || (active2 & 0x1010000000008000L) != 0L || (active3 & 0x200000000000002L) != 0L || (active5 & 0x200000000200L) != 0L || (active6 & 0x200000000000018L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 8;
            }
            return 43;
         }
         if ((active0 & 0x40c00840801000L) != 0L || (active1 & 0x7100000000L) != 0L || (active2 & 0x400000L) != 0L || (active3 & 0x40L) != 0L || (active4 & 0x244d40083000L) != 0L || (active5 & 0x8000000000000L) != 0L || (active6 & 0x4000000000000000L) != 0L || (active7 & 0x10L) != 0L)
            return 43;
         if ((active1 & 0x100000000000L) != 0L || (active2 & 0x880L) != 0L || (active3 & 0xc000000L) != 0L || (active5 & 0x180002000L) != 0L)
            return 49;
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xbc000002fe580000L) != 0L || (active2 & 0x800580004000077bL) != 0L || (active3 & 0x2000c00200400000L) != 0L || (active4 & 0x8000010030001L) != 0L || (active5 & 0xe012fe0008L) != 0L || (active6 & 0x90000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 8;
            }
            return 49;
         }
         return -1;
      case 9:
         if ((active0 & 0x8200000004180000L) != 0L || (active1 & 0x1040000402fL) != 0L || (active2 & 0x10000000008000L) != 0L || (active3 & 0x200000000000002L) != 0L || (active5 & 0x200000000000L) != 0L || (active6 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 9;
            }
            return 43;
         }
         if ((active0 & 0x800000070000L) != 0L || (active1 & 0x1008000000800L) != 0L || (active2 & 0x1000000000000000L) != 0L || (active4 & 0x800002000L) != 0L || (active5 & 0x200L) != 0L || (active6 & 0x200000000000008L) != 0L)
            return 43;
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xa400000202580000L) != 0L || (active2 & 0x800400004000062bL) != 0L || (active3 & 0x2000c00200400000L) != 0L || (active4 & 0x8000010020001L) != 0L || (active5 & 0x12a20008L) != 0L || (active6 & 0x90000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 9;
            }
            return 49;
         }
         if ((active1 & 0xe0000000L) != 0L || (active5 & 0xe0004c0000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 8;
            }
            return 49;
         }
         if ((active1 & 0x180000001c000000L) != 0L || (active2 & 0x1800000000150L) != 0L || (active3 & 0x8000000L) != 0L || (active4 & 0x10000L) != 0L || (active5 & 0x180100000L) != 0L)
            return 49;
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L || (active1 & 0x10000000000L) != 0L || (active2 & 0x8000L) != 0L)
            return 43;
         if ((active0 & 0x8200000000180000L) != 0L || (active1 & 0x40000402fL) != 0L || (active2 & 0x10000000000000L) != 0L || (active3 & 0x200000000000002L) != 0L || (active5 & 0x200000000000L) != 0L || (active6 & 0x10L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 10;
            return 43;
         }
         if ((active0 & 0x2000000060000L) != 0L || (active1 & 0x4000000e0400000L) != 0L || (active2 & 0x500000000002bL) != 0L || (active3 & 0x200000000L) != 0L || (active4 & 0x8000000000000L) != 0L || (active5 & 0xe000800000L) != 0L)
            return 49;
         if ((active1 & 0xa000000202180000L) != 0L || (active2 & 0x8000000040000600L) != 0L || (active3 & 0x2000c00000400000L) != 0L || (active4 & 0x10020001L) != 0L || (active5 & 0x126e0008L) != 0L || (active6 & 0x90000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 10;
            return 49;
         }
         return -1;
      case 11:
         if ((active0 & 0x180000L) != 0L || (active1 & 0x400000000L) != 0L || (active3 & 0x200000000000002L) != 0L || (active5 & 0x200000000000L) != 0L || (active6 & 0x10L) != 0L)
            return 43;
         if ((active0 & 0x60000L) != 0L || (active1 & 0x202080000L) != 0L || (active3 & 0x2000c00000000000L) != 0L || (active4 & 0x10020000L) != 0L || (active5 & 0x124c0008L) != 0L || (active6 & 0x90000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 11;
            }
            return 49;
         }
         if ((active1 & 0xa000000000100000L) != 0L || (active2 & 0x8000000040000600L) != 0L || (active3 & 0x400000L) != 0L || (active4 & 0x1L) != 0L || (active5 & 0x220000L) != 0L)
            return 49;
         if ((active0 & 0x8200000000000000L) != 0L || (active1 & 0x402fL) != 0L || (active2 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 11;
            }
            return 43;
         }
         return -1;
      case 12:
         if ((active0 & 0x60000L) != 0L || (active1 & 0x2000000L) != 0L || (active3 & 0x2000c00000000000L) != 0L || (active4 & 0x10020000L) != 0L || (active5 & 0x24c0000L) != 0L || (active6 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 12;
            }
            return 49;
         }
         if ((active0 & 0x8200000000000000L) != 0L || (active1 & 0x402fL) != 0L)
            return 43;
         if ((active2 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 482;
               jjmatchedPos = 12;
            }
            return 43;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x200080000L) != 0L || (active5 & 0x10000008L) != 0L || (active6 & 0x10000L) != 0L)
            return 49;
         return -1;
      case 13:
         if ((active2 & 0x10000000000000L) != 0L)
            return 43;
         if ((active1 & 0x200000fL) != 0L || (active3 & 0x2000400000000000L) != 0L || (active4 & 0x20000L) != 0L || (active5 & 0x4c0000L) != 0L)
            return 49;
         if ((active0 & 0x160000L) != 0L || (active3 & 0x800000000000L) != 0L || (active4 & 0x10000000L) != 0L || (active5 & 0x2000000L) != 0L || (active6 & 0x80000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 13;
            return 49;
         }
         return -1;
      case 14:
         if ((active0 & 0x160000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 14;
            return 49;
         }
         if ((active1 & 0xfL) != 0L || (active3 & 0x800000000000L) != 0L || (active4 & 0x10000000L) != 0L || (active5 & 0x2000000L) != 0L || (active6 & 0x80000L) != 0L)
            return 49;
         return -1;
      case 15:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 15;
            return 49;
         }
         if ((active0 & 0x60000L) != 0L)
            return 49;
         return -1;
      case 16:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 16;
            return 49;
         }
         return -1;
      case 17:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 482;
            jjmatchedPos = 17;
            return 49;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 1, 47);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L, 0x0L);
      case 34:
         {
         jjmatchedKind = 469;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000L);
      case 36:
         return jjStopAtPos(0, 475);
      case 39:
         {
         jjmatchedKind = 471;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400000L);
      case 40:
         return jjStopAtPos(0, 464);
      case 41:
         return jjStopAtPos(0, 465);
      case 42:
         {
         jjmatchedKind = 473;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L);
      case 43:
         return jjStopAtPos(0, 472);
      case 45:
         return jjStopAtPos(0, 463);
      case 46:
         return jjStartNfaWithStates_0(0, 467, 45);
      case 47:
         return jjStopAtPos(0, 474);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400L);
      case 55:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800L);
      case 56:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1000L);
      case 58:
         return jjStopAtPos(0, 466);
      case 60:
         {
         jjmatchedKind = 477;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1010000000L);
      case 61:
         return jjStopAtPos(0, 480);
      case 62:
         {
         jjmatchedKind = 479;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40000000L);
      case 64:
         return jjStopAtPos(0, 416);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3ffffff00L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000L, 0x6cL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1fc00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffffe0000000000L, 0x1ffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x8080000202000000L, 0x1L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fffffffe0000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x244005000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8L, 0xfffc000000000000L, 0x7ffffffL, 0x0L, 0x0L, 0x0L, 0xa0000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff8000000L, 0x0L, 0x0L, 0x0L, 0x408000000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fc000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c00000000000L, 0x0L, 0x0L, 0x0L, 0x1004010000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffe000000000000L, 0x1fL, 0x0L, 0x0L, 0x20000040000000L, 0x2L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe0L, 0x0L, 0x0L, 0x40000000000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x300L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xffffc00L, 0x0L, 0x0L, 0x2000800000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ff0000000L, 0x0L, 0x0L, 0x3082000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fe000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fff800000000000L, 0x0L, 0x0L, 0x10000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x1fffffL, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1fffffffff000000L, 0x0L, 0x0L, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x3fffffffffffL, 0x4300000400000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffffc00000000000L, 0x1L, 0x110L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400010000ffeL, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000081f8000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x101000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active6 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 419);
         break;
      case 34:
         if ((active7 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 468, 17);
         break;
      case 39:
         if ((active7 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 470, 22);
         break;
      case 42:
         if ((active7 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 483);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 54:
         if ((active7 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 458, 46);
         break;
      case 55:
         if ((active7 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 459, 46);
         break;
      case 56:
         if ((active7 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 460, 46);
         break;
      case 61:
         if ((active7 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 476);
         else if ((active7 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 478);
         break;
      case 62:
         if ((active7 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 484);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0x7e0000L, active2, 0x8000000L, active3, 0xe000002000000d00L, active4, 0x2000000001000003L, active5, 0x3c00000000000L, active6, 0x1002210000007000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0x60L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 43);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 156, 43);
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 281, 43);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 318, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L, active1, 0x3fffe000000L, active2, 0x414000000000L, active3, 0xc07000f200L, active4, 0x80fffffffc000004L, active5, 0x3c0000000007ffL, active6, 0x8149001e00000L, active7, 0x80L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 43);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 181, 43);
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 259, 43);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 312, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 260, 43);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 313, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3c0000000003800L, active6, 0x800000208018000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x7c0000000000L, active2, 0x18203e0000000L, active3, 0xff0000L, active4, 0x400000000000060L, active5, 0xc0000000000c000L, active6, 0x2081804004020000L, active7, 0x10L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x7006000ffc000L, active1, 0x10000000000000L, active2, 0x40000000000L, active3, 0L, active4, 0x80L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0x40000000000000L, active3, 0x8000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L, active1, 0xffc0000000000000L, active2, 0xff0000000000ffffL, active3, 0xfL, active4, 0L, active5, 0L, active6, 0x300000d000007eL, active7, 0x2L);
      case 79:
      case 111:
         if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xfff8008000000000L, active1, 0x80000000ffffL, active2, 0x8c00010000L, active3, 0x2078f000000L, active4, 0x800000000000700L, active5, 0x2000000003ff0000L, active6, 0x84440820000c0000L, active7, 0L);
      case 80:
      case 112:
         if ((active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 391;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0x60000000000000L, active4, 0L, active5, 0x1c000000L, active6, 0x400000000100L, active7, 0x4L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0x20000000L, active6, 0x300000000000000L, active7, 0L);
      case 82:
      case 114:
         if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000L, active1, 0L, active2, 0x301000040000L, active3, 0x300000000000000L, active4, 0xff800L, active5, 0xc000000000000000L, active6, 0x100000L, active7, 0x100L);
      case 83:
      case 115:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 196, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000000e00L, active7, 0x8L);
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L, active5, 0x1fc0000000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x1000000010000L, active2, 0x2000000000L, active3, 0x8007c18000000e0L, active4, 0x1000000000f00000L, active5, 0x7e000000000L, active6, 0x402000000L, active7, 0x1L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x300000L, active3, 0x1000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x7c00000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000000L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x380000000000L, active6, 0x4000000000000001L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c02000000000L, active1, 0x40000000000000L, active2, 0x400000100000L, active3, 0x1000L, active4, 0x8000000004000000L, active5, 0x40400007cc000800L, active6, 0x101200000200L, active7, 0x100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x1fe000000L, active2, 0x8000000000L, active3, 0x400L, active4, 0L, active5, 0x41e000000000L, active6, 0x400000000L, active7, 0L);
      case 67:
      case 99:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 425;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000300L, active1, 0x4000600800000L, active2, 0x400000L, active3, 0x2001000003000000L, active4, 0xf8000040L, active5, 0x3L, active6, 0x80000041000000L, active7, 0x20L);
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 43);
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000800L, active1, 0xff00000000000000L, active2, 0x700000000001fffL, active3, 0x4100000180000000L, active4, 0x100000000L, active5, 0L, active6, 0x400080000000L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 394, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000008L, active1, 0L, active2, 0x10100001200000L, active3, 0x1020000000000000L, active4, 0x200200000L, active5, 0x80000010000000L, active6, 0x800000008018000L, active7, 0x40L);
      case 70:
      case 102:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 242, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0x2000L, active4, 0xc00000000L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0x1800000000000L, active3, 0x8200004000000000L, active4, 0x400000000000001L, active5, 0x400cL, active6, 0x4000000000L, active7, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 43);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 43);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 147, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3800000000800000L, active3, 0x8000000000000L, active4, 0x900L, active5, 0x3000L, active6, 0x40000030100802L, active7, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000000000L, active7, 0x8L);
      case 76:
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 43);
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc0020000000000L, active1, 0x3800000000L, active2, 0xe8000000L, active3, 0xc1800000000L, active4, 0x3000000000L, active5, 0x1800000000010L, active6, 0x31400000000301cL, active7, 0L);
      case 77:
      case 109:
         if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 361, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0xff00000000000000L, active1, 0x1fL, active2, 0L, active3, 0x700010030000L, active4, 0x200000c000000000L, active5, 0xc00080000000000L, active6, 0x8000000000000000L, active7, 0x10L);
      case 78:
      case 110:
         if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 316, 43);
         else if ((active6 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 432, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x41000000000L, active1, 0x2000000000fe0L, active2, 0x16100000000L, active3, 0xfc4100L, active4, 0x10001000000L, active5, 0x300000000060L, active6, 0x7020082000000000L, active7, 0L);
      case 79:
      case 111:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6004000000000L, active1, 0L, active2, 0x4241400000000L, active3, 0L, active4, 0xcff000L, active5, 0x800000000L, active6, 0x100L, active7, 0L);
      case 80:
      case 112:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 43);
         else if ((active5 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 381, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x41f8000L, active1, 0x1004000001000L, active2, 0xc040000000000000L, active3, 0L, active4, 0x7e0000000000L, active5, 0x2040000000080L, active6, 0x1L, active7, 0x4L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x300L, active6, 0L, active7, 0x80L);
      case 82:
      case 114:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x16000L, active2, 0x200040000L, active3, 0x220000000L, active4, 0x800000100004L, active5, 0x30c001000ff0000L, active6, 0x2ec4000L, active7, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000L, active1, 0x101d8000000000L, active2, 0L, active3, 0x400088e3L, active4, 0x3000000000602L, active5, 0x10000000000000L, active6, 0x40004000020L, active7, 0x2L);
      case 84:
      case 116:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 233, 43);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 330, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x8200c02000L, active1, 0x200001e0000L, active2, 0x6006000L, active3, 0x840002000000004L, active4, 0x1c000000000000L, active5, 0L, active6, 0x8008000020040L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0x20000L, active3, 0L, active4, 0x800000000000080L, active5, 0x8000000003000000L, active6, 0x400000000000000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x600000000000L, active2, 0x20000008000L, active3, 0x400000008L, active4, 0x20000000000000L, active5, 0L, active6, 0x10000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0xc000000L, active4, 0xc0000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         if ((active6 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 433, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000L, active4, 0L, active5, 0x20000000000000L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 43);
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 201, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000000000L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xff00000000400000L, active2, 0x4000000000fffL, active3, 0xc000000L, active4, 0L, active5, 0xe000000000L, active6, 0x80000000L, active7, 0L);
      case 65:
      case 97:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x1020001000L, active1, 0x2060000000000L, active2, 0x108100020000L, active3, 0x2000040000c0008L, active4, 0x15000000000L, active5, 0x80L, active6, 0x400000000000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40000000000L, active3, 0x100000000000L, active4, 0L, active5, 0x80000000000L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 43);
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 426;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2044000000008L, active1, 0x8000000000L, active2, 0x2000000000L, active3, 0L, active4, 0x7000L, active5, 0x20001c000000L, active6, 0x4008000000000000L, active7, 0L);
      case 68:
      case 100:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 282, 43);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 325, 43);
         else if ((active6 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 434, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0x4000000000001000L, active4, 0x1000000L, active5, 0L, active6, 0x1000000000040000L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 43);
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 43);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 226, 43);
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 317, 43);
         else if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 335, 43);
         else if ((active5 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 369, 43);
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 383, 43);
         else if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 384, 43);
         else if ((active6 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 431, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000040c02300L, active1, 0x4800180000L, active2, 0x300014046402000L, active3, 0x500e00200600400L, active4, 0x23002d18000001L, active5, 0x800000000000010L, active6, 0x120000000000000L, active7, 0x12L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0x4L, active5, 0x3000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20004000L, active4, 0x138000L, active5, 0L, active6, 0x200L, active7, 0L);
      case 72:
      case 104:
         if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 401, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x2001f8000L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000L, active1, 0x603200000000L, active2, 0x400020000009000L, active3, 0x40002000030000L, active4, 0x40000000000600L, active5, 0x4000001000000000L, active6, 0x14000000040L, active7, 0x80L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 445;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000002800000L, active4, 0L, active5, 0L, active6, 0x80000L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 43);
         else if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 289, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x1000400000000L, active2, 0x40000080100000L, active3, 0x80000000000L, active4, 0xe0000000000L, active5, 0x1c00000000000L, active6, 0x41000000L, active7, 0x4L);
      case 77:
      case 109:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0xc00000000000cL, active6, 0x8000000000000000L, active7, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 43);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 245, 43);
         else if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 334, 43);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 374, 43);
         else if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 375, 43);
         else if ((active6 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 392, 43);
         else if ((active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 399;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 438, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x8000L, active2, 0x10000000000000L, active3, 0L, active4, 0x800000000000900L, active5, 0x1c0000000L, active6, 0xc00000000010800L, active7, 0x140L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 43);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 194, 43);
         else if ((active6 & 0x200000L) != 0L)
         {
            jjmatchedKind = 405;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400000000L, active1, 0L, active2, 0x40000L, active3, 0x10000000L, active4, 0x7080e0000000L, active5, 0x100000000000000L, active6, 0x10c0001cL, active7, 0x20L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 355, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0xf800000000000000L, active1, 0x18000000001fL, active2, 0L, active3, 0x800000000000001L, active4, 0L, active5, 0x40000000000L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 420;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc00004000800L, active1, 0x14000L, active2, 0x204000L, active3, 0x1000000000000000L, active4, 0x8080000000000000L, active5, 0x203000800L, active6, 0x100008000000L, active7, 0x1L);
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 43);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 43);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 207, 43);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 263, 43);
         else if ((active6 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 429, 43);
         else if ((active6 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 439, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000000000L, active1, 0L, active2, 0x208000000L, active3, 0x40000000L, active4, 0x2L, active5, 0L, active6, 0x422000000L, active7, 0L);
      case 84:
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 43);
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 203, 43);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 205, 43);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 231, 43);
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 372, 43);
         else if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 373, 43);
         else if ((active6 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 385, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x100000007c0L, active2, 0x3800000400000000L, active3, 0x80018000000c2L, active4, 0xc80040L, active5, 0x10400fe0041L, active6, 0x82004100020L, active7, 0x8L);
      case 85:
      case 117:
         if ((active5 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 377, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x1fe000000L, active2, 0xc000200000000000L, active3, 0x1000100000000L, active4, 0x1c800000200000L, active5, 0x302L, active6, 0x3000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200008000000000L, active7, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 43);
         else if ((active6 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 436, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x7820000000000000L, active1, 0x180000L, active2, 0x1800040000000L, active3, 0x200400000L, active4, 0x1L, active5, 0xfe0000L, active6, 0x10000L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40c000001f8000L, active1, 0x100000400000040L, active2, 0x40000000000L, active3, 0x40800002L, active4, 0x62000000000L, active5, 0L, active6, 0x8200000001000000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600000000000000L, active2, 0x404008000000000L, active3, 0x800000000000L, active4, 0x8000000000000000L, active5, 0x3000010L, active6, 0x1cL, active7, 0L);
      case 68:
      case 100:
         if ((active6 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 442, 43);
         else if ((active7 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 454, 43);
         else if ((active7 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 455, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800200000000000L, active2, 0L, active3, 0L, active4, 0x800000000000000L, active5, 0x1c0000000L, active6, 0L, active7, 0x20L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 43);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 43);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 43);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 276, 43);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 277, 43);
         else if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 366, 43);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 393, 43);
         else if ((active6 & 0x1000L) != 0L)
         {
            jjmatchedKind = 396;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 404, 43);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 411, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000800L, active1, 0x2000008000014880L, active2, 0x80000000L, active3, 0x2000100000000001L, active4, 0x887000L, active5, 0x8000b4cL, active6, 0x800008080802000L, active7, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000002000000L, active4, 0x100000000L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 395, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x1fe000000L, active2, 0L, active3, 0xc0000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active6 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 421;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 435, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000L, active6, 0x80000000000L, active7, 0L);
      case 73:
      case 105:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4001030000000120L, active2, 0x3840400400000000L, active3, 0x40000018000010c0L, active4, 0x80004018000000L, active5, 0xc000010000001L, active6, 0x4084000L, active7, 0xcL);
      case 75:
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 43);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 43);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 145, 43);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 43);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 43);
         else if ((active6 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 390, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40180000000000L, active2, 0L, active3, 0x100000008L, active4, 0L, active5, 0x4000000000000000L, active6, 0x1000000000000000L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x8002003200000000L, active2, 0L, active3, 0L, active4, 0x10000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 303, 43);
         else if ((active6 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 412, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x840001000L, active1, 0x4000000000L, active2, 0x20002001000L, active3, 0x200000000000000L, active4, 0x40000000000000L, active5, 0x1000000000L, active6, 0x10000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100008204000000L, active1, 0x400000L, active2, 0x1L, active3, 0x40000000000000L, active4, 0x1000004L, active5, 0x80000000000L, active6, 0x2000000L, active7, 0L);
      case 80:
      case 112:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 173, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L, active2, 0x400002L, active3, 0L, active4, 0x40000L, active5, 0L, active6, 0x4000000000000000L, active7, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xe000000000L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 43);
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 43);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 43);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 248, 43);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 250, 43);
         else if ((active6 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 437, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x1400800000L, active1, 0x600L, active2, 0x1400400803cL, active3, 0x1600010000000L, active4, 0x3d700ce0038000L, active5, 0x50000000082L, active6, 0x100000000000020L, active7, 0x2L);
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 43);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 43);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 43);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 235, 43);
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 402, 43);
         else if ((active6 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 406, 43);
         else if ((active6 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 428, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x400000000000L, active2, 0x3c0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x110L);
      case 84:
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 43);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 43);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 43);
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 305, 43);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 314, 43);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 353, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0x8010102000000000L, active3, 0x8004000024000L, active4, 0x1000000f00L, active5, 0x3000L, active6, 0x404420000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8200000000000000L, active1, 0x1fL, active2, 0x100400L, active3, 0x800000000000000L, active4, 0x40L, active5, 0x100000400000000L, active6, 0x40000000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200c000000L, active4, 0x8000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0x2L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 142, 43);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 43);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 299, 43);
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0xfe000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0x3000L, active6, 0L, active7, 0L);
      case 49:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 49);
         break;
      case 50:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 49);
         break;
      case 51:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 49);
         break;
      case 52:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200180200000000L, active2, 0x3c00004000100000L, active3, 0xc000000L, active4, 0x8000038000L, active5, 0x101d0000080L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x78000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000001000L, active1, 0x1000000080000L, active2, 0x40000040000000L, active3, 0x400001L, active4, 0x60000080001L, active5, 0x60000L, active6, 0x10000L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 153, 43);
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 310, 43);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 331, 43);
         else if ((active7 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 450, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x100004000000000L, active2, 0L, active3, 0x2000000000000000L, active4, 0xc0003000L, active5, 0L, active6, 0x40000000L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 43);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 43);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 43);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 43);
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 229, 43);
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 430, 43);
         else if ((active6 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 444, 43);
         else if ((active7 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 453, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0x20010000000007eL, active3, 0x8000100080000L, active4, 0x800010c00004100L, active5, 0x40002000000L, active6, 0x8000000000L, active7, 0L);
      case 70:
      case 102:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 49);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0x1L, active3, 0xc0L, active4, 0L, active5, 0x80000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 43);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 356, 43);
         else if ((active6 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 424, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000020L, active2, 0L, active3, 0x40800000L, active4, 0L, active5, 0x100000000000000L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 206, 43);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 319, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1002403000000040L, active2, 0x10012000000000L, active3, 0x200604002000008L, active4, 0x1100000e00L, active5, 0x4001000000000002L, active6, 0x20L, active7, 0x100L);
      case 75:
      case 107:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 43);
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x18L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 43);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 43);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0x1000000200000002L, active4, 0L, active5, 0x80000000000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 43);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 280, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x700000L, active6, 0L, active7, 0x8L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 43);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 43);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 43);
         else if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000800980000L, active1, 0x18000010180L, active2, 0x400404000400L, active3, 0x4040000000001000L, active4, 0x18004000000000L, active5, 0xc00000000034cL, active6, 0x4084000L, active7, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000600L, active2, 0x4000000008000L, active3, 0L, active4, 0x2L, active5, 0x1L, active6, 0x4000000000000000L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1800000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 43);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 43);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 236, 43);
         else if ((active6 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 409, 43);
         else if ((active6 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 418, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000800L, active2, 0x800L, active3, 0L, active4, 0x44L, active5, 0x200000800000L, active6, 0x8300000001000000L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 43);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 43);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 240, 43);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 279, 43);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 347, 43);
         else if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 354, 43);
         else if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 397, 43);
         else if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 407, 43);
         else if ((active6 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 413, 43);
         else if ((active6 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 422, 43);
         else if ((active6 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 427, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000800L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0x20002000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 43);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 251, 43);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 274, 43);
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 324, 43);
         else if ((active7 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 449, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x8040000000000000L, active1, 0x1fL, active2, 0x400180L, active3, 0x800000000000L, active4, 0x80600000000000L, active5, 0L, active6, 0L, active7, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0xe000000000L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x1800000000000L, active3, 0L, active4, 0x1000018000000L, active5, 0L, active6, 0x800000000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000000L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 43);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x1L, active3, 0x2000800000000000L, active4, 0x8000000000000L, active5, 0x2000000L, active6, 0L, active7, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000800000L, active1, 0x200101040000000fL, active2, 0x18000040000c4L, active3, 0x40000200000000L, active4, 0L, active5, 0xc000000000000L, active6, 0L, active7, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 43);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 43);
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2010000L, active2, 0x8L, active3, 0x400000000000L, active4, 0L, active5, 0x10000000140L, active6, 0x4000000L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 49);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 185, 43);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 195, 43);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 243, 43);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 270, 43);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 315, 43);
         else if ((active7 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 456, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 43);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 43);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 43);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 222, 43);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 262, 43);
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 43);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 297, 43);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 304, 43);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 311, 43);
         else if ((active6 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 408, 43);
         else if ((active6 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 414, 43);
         else if ((active7 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 451, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000078000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000010000000L, active5, 0xe000b00000L, active6, 0x8800000080000000L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 43);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 174, 43);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 204, 43);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 254, 43);
         else if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 398, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L, active7, 0L);
      case 72:
      case 104:
         if ((active5 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 376, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x240000844001000L, active1, 0x4104000000L, active2, 0x40000000400800L, active3, 0x40L, active4, 0x240040000000L, active5, 0x80000081000L, active6, 0x4000000000000000L, active7, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8a00000208000400L, active2, 0x1000000000000000L, active3, 0x180e000002L, active4, 0L, active5, 0x10000000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 258, 43);
         else if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0x30000L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 320, 43);
         else if ((active6 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 423, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000040L, active2, 0x4000000008000L, active3, 0L, active4, 0xd00000800L, active5, 0x4001000000000000L, active6, 0x200000000000020L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000080000L, active2, 0x8000002040000000L, active3, 0x1000000000400000L, active4, 0x201L, active5, 0x200000462000L, active6, 0x100000000010000L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 43);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 264, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0x102L, active3, 0L, active4, 0x2L, active5, 0x1c0000000L, active6, 0x10L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 43);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 224, 43);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 43);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 296, 43);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 302, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xe0000000L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x40000000000L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 43);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 192, 43);
         else if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 6;
         }
         else if ((active7 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 448, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000L, active1, 0x3000000800L, active2, 0x2400004000100010L, active3, 0L, active4, 0x80000L, active5, 0x28aL, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000180000L, active1, 0x120L, active2, 0L, active3, 0L, active4, 0x3000L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x4000000000L, active4, 0x1000000400L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 199, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100200000000L, active2, 0L, active3, 0x400000000000L, active4, 0x10030000L, active5, 0x10000008L, active6, 0x80000L, active7, 0L);
      case 65:
      case 97:
         if ((active6 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 447, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0x200000000000002L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 363, 43);
         else if ((active6 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 415, 49);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0x800000080000L, active4, 0x8000c00000000L, active5, 0x2000000L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 49);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 257, 43);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 308, 43);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 309, 43);
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0x180400000L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 43);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 148, 43);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 43);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 186, 43);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 189, 43);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 217, 43);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 227, 43);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 230, 43);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 266, 43);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 292, 43);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 326, 43);
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 327, 43);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 328, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000000000L, active1, 0x800003000000000L, active2, 0x8L, active3, 0x40L, active4, 0x4100080000L, active5, 0L, active6, 0x10L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 267, 43);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 368, 43);
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 382, 43);
         else if ((active6 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 389, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000008008100800L, active2, 0x1010000000000100L, active3, 0L, active4, 0L, active5, 0x200L, active6, 0x200000000000008L, active7, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 49);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 154, 43);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 246, 43);
         else if ((active5 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 370, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x1800000000000L, active3, 0L, active4, 0L, active5, 0x80000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4180000L, active1, 0x80000L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000L, active7, 0x10L);
      case 78:
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 43);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 165, 43);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 265, 43);
         else if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 332, 49);
         return jjMoveStringLiteralDfa8_0(active0, 0x42000840001000L, active1, 0x4100000000L, active2, 0x40000000L, active3, 0L, active4, 0x240040000000L, active5, 0x200000020000L, active6, 0x4000000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2004000L, active2, 0x400000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active6 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 440, 43);
         else if ((active6 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 443, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0xe0L, active3, 0L, active4, 0x3000L, active5, 0x140000L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 43);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 43);
         else if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 362, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 49);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 182, 43);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 360, 43);
         else if ((active6 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 410, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000870000L, active1, 0x800101040400000fL, active2, 0x4000000000e00L, active3, 0L, active4, 0L, active5, 0x8000000800000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xe0000000L, active2, 0x8000000000000010L, active3, 0xc400000L, active4, 0x1L, active5, 0xe000002000L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 252, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 43);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 228, 43);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 321, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x180000000L, active6, 0L, active7, 0L);
      case 49:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000004000000L, active1, 0x20L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0x200L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xe0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000000000040L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0x10L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 43);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 198, 43);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 275, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 43);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 49);
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 371, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0x180000L, active1, 0x1000004400000L, active2, 0x8000L, active3, 0x2000400208000000L, active4, 0x800002000L, active5, 0xe0004c0000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 43);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 43);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 43);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 43);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 43);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 43);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 286, 43);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 298, 43);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 301, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8002000000070000L, active1, 0x800001040000000fL, active2, 0x28L, active3, 0L, active4, 0x10000L, active5, 0x200000000000L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L, active6, 0x8L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 150, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800a004800L, active2, 0x100L, active3, 0x400000L, active4, 0x1L, active5, 0x10000000L, active6, 0x200000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0x800000080000L, active4, 0x8000000000000L, active5, 0x2000000L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         if ((active7 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 452, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200080000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 43);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 294, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L, active2, 0x4000000000610L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 288, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0x200000L, active6, 0x80000L, active7, 0L);
      case 84:
      case 116:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 49);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 333, 49);
         else if ((active6 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 446, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000100000L, active2, 0x8000000040000000L, active3, 0x200000000000002L, active4, 0L, active5, 0x20000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2400000000000000L, active2, 0x1800000000000L, active3, 0L, active4, 0L, active5, 0x800000L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xe0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0xe0004c0000L, active6, 0L);
      case 49:
         if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 351, 49);
         break;
      case 50:
         if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 352, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10000000000200L, active3, 0L, active4, 0L, active5, 0x10200000L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x60000L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 272, 49);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x400000000000L, active4, 0x8000000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 91, 49);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 92, 49);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 123, 49);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 124, 49);
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 188, 43);
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 340, 49);
         else if ((active6 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 387, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 43);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 103, 43);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 136, 49);
         else if ((active6 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 441, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 134, 49);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L, active2, 0x400L, active3, 0x200000000000002L, active4, 0L, active5, 0x8L, active6, 0x10000L);
      case 76:
      case 108:
         if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 329, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 90, 49);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 132, 49);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x1020000000fL, active2, 0x4000000000000L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000L, active1, 0L, active2, 0x40000002L, active3, 0L, active4, 0L, active5, 0x820000L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 43);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 43);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 219, 49);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 269, 43);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 291, 43);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x202000004000000L, active1, 0x400000002100020L, active2, 0x20L, active3, 0x400000L, active4, 0x20001L, active5, 0L, active6, 0x80000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L, active2, 0x8L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 49:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 93, 49);
         else if ((active5 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 357, 49);
         break;
      case 50:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 49);
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 358, 49);
         break;
      case 51:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 49);
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 359, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 43);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 122, 49);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 128, 49);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 131, 49);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 133, 49);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 307, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x402100000L, active2, 0L, active3, 0x400000L, active4, 0x1L, active5, 0x200000000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000180000L, active1, 0x200004020L, active2, 0L, active3, 0x2000400000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 86, 49);
         break;
      case 76:
      case 108:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 178, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000080000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000L);
      case 77:
      case 109:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(10, 129, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000008L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 43);
         else if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 343, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0xfL, active2, 0x400L, active3, 0x80000L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x200000000000002L, active4, 0L, active5, 0x20000L, active6, 0x80000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 49, 49);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 176, 49);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 225, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4c0000L, active6, 0L);
      case 84:
      case 116:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 143, 43);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0xfL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 365, 43);
         else if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 388, 43);
         break;
      case 69:
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 125, 49);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 341, 49);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000L, active6, 0x10000L);
      case 71:
      case 103:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 138, 49);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0x4c0008L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 158, 49);
         else if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 337, 49);
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 49);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 193, 43);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 249, 43);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x202004000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 214, 49);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 256, 49);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L);
      case 83:
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 98, 43);
         break;
      case 84:
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 137, 49);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 191, 49);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000080000L, active4, 0x10020000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0x80000L);
      case 68:
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 49);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 400, 49);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000080000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 78, 43);
         break;
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xfL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 57, 43);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(12, 69, 43);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 348, 49);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(12, 97, 49);
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(12, 323, 49);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4c0000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xfL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 238, 49);
         break;
      case 69:
      case 101:
         if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 338, 49);
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 339, 49);
         else if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 342, 49);
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L);
      case 76:
      case 108:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 253, 49);
         break;
      case 78:
      case 110:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 180, 43);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(13, 211);
         break;
      case 83:
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 89, 49);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 273, 49);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, active4, active5, active6, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(14, 64, 49);
         break;
      case 50:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 65, 49);
         break;
      case 51:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(14, 66, 49);
         break;
      case 52:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(14, 67, 49);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active6 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 403, 49);
         return jjMoveStringLiteralDfa15_0(active0, 0x60000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 284, 49);
         break;
      case 82:
      case 114:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 239, 49);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 345, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(15, 17, 49);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(15, 18, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(18, 20, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 482)
                        kind = 482;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 45:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  break;
               case 47:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddTwoStates(4, 3);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddTwoStates(4, 3);
                  }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 45)
                     jjCheckNAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 25);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 462)
                        kind = 462;
                     jjCheckNAdd(39);
                  }
                  break;
               case 44:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 34)
                  {
                     if (kind > 481)
                        kind = 481;
                  }
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 482)
                        kind = 482;
                     jjCheckNAddTwoStates(27, 28);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 48:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                  {
                     if (kind > 481)
                        kind = 481;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 462)
                        kind = 462;
                     jjCheckNAddStates(13, 17);
                  }
                  else if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(18, 20);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 44)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddTwoStates(4, 3);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 0:
                  if (curChar != 62)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 10)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(4, 3);
                  break;
               case 4:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(4, 3);
                  break;
               case 5:
                  if (curChar != 44)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) != 0L && kind > 461)
                     kind = 461;
                  break;
               case 13:
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L && kind > 461)
                     kind = 461;
                  break;
               case 15:
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 18:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 34 && kind > 481)
                     kind = 481;
                  break;
               case 20:
               case 22:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 21:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 39 && kind > 481)
                     kind = 481;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 34 && kind > 457)
                     kind = 457;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 39 && kind > 457)
                     kind = 457;
                  break;
               case 36:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(18, 20);
                  break;
               case 37:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 462)
                     kind = 462;
                  jjCheckNAddStates(13, 17);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 462)
                     kind = 462;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar == 45)
                     jjCheckNAddStates(4, 6);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 46:
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 44:
               case 16:
                  jjCheckNAddStates(7, 9);
                  break;
               case 49:
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 48:
               case 21:
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 482)
                        kind = 482;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 1:
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 29:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 44:
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 48:
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 42, 25, 41, 40, 25, 41, 16, 18, 19, 21, 23, 24, 39, 40, 42, 
   25, 41, 37, 4, 3, 30, 33, 31, 32, 34, 35, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\100", null, null, 
"\41\41", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\66\66", 
"\67\67", "\70\70", null, null, "\55", "\50", "\51", "\72", "\56", "\42\42", "\42", 
"\47\47", "\47", "\53", "\52", "\57", "\44", "\74\75", "\74", "\76\75", "\76", "\75", 
null, null, "\52\52", "\74\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[43];
private final int[] jjstateSet = new int[86];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public CobolParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CobolParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   jjmatchedKind = 4;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else 
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[1];
int[] jjemptyColNo = new int[1];
boolean[] jjbeenHere = new boolean[1];
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 5 :
         break;
      case 6 :
         break;
      default :
         break;
   }
}
}
