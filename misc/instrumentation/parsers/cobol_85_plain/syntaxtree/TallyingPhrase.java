//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.cobol85.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;TALLYING&gt;
 * f1 -> ( Identifier() &lt;FOR&gt; ( &lt;CHARACTERS&gt; ( BeforeAfterPhrase() )* | ( &lt;ALL&gt; | &lt;LEADING&gt; ) ( ( Identifier() | Literal() ) ( BeforeAfterPhrase() )* )+ )+ )+
 * f2 -> [ ReplacingPhrase() ]
 * </PRE>
 */
public class TallyingPhrase implements Node {
   private Node parent;
   public NodeToken f0;
   public NodeList f1;
   public NodeOptional f2;

   public TallyingPhrase(NodeToken n0, NodeList n1, NodeOptional n2) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
   }

   public TallyingPhrase(NodeList n0, NodeOptional n1) {
      f0 = new NodeToken("tallying");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = n1;
      if ( f2 != null ) f2.setParent(this);
   }

   public void accept(org.codecover.instrumentation.cobol85.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.cobol85.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.cobol85.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.cobol85.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

