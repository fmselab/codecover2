//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.cobol85.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;EXEC&gt;
 * f1 -> &lt;CICS&gt;
 * f2 -> ( &lt;RETURN&gt; | &lt;HANDLE&gt; &lt;ABEND&gt; &lt;LABEL&gt; "(" Identifier() ")" | &lt;ASSIGN&gt; ( &lt;ABCODE&gt; | &lt;APPLID&gt; ) "(" Identifier() ")" | &lt;LINK&gt; &lt;PROGRAM&gt; "(" Literal() ")" | &lt;SYNCPOINT&gt; | &lt;COMMAREA&gt; "(" Identifier() ")" | &lt;LENGTH&gt; "(" ( Literal() | CobolWord() ) ")" | &lt;ASKTIME&gt; | &lt;ABEND&gt; &lt;ABCODE&gt; "(" ( Literal() | CobolWord() ) ")" | &lt;START&gt; &lt;TRANSID&gt; "(" ( Literal() | CobolWord() ) ")" &lt;REQID&gt; "(" ( Literal() | CobolWord() ) ")" &lt;FROM&gt; "(" ( Literal() | CobolWord() ) ")" &lt;LENGTH&gt; "(" ( Literal() | CobolWord() ) ")" )*
 * f3 -> &lt;END_EXEC&gt;
 * </PRE>
 */
public class ExecCICSStatement implements Node {
   private Node parent;
   public NodeToken f0;
   public NodeToken f1;
   public NodeListOptional f2;
   public NodeToken f3;

   public ExecCICSStatement(NodeToken n0, NodeToken n1, NodeListOptional n2, NodeToken n3) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
   }

   public ExecCICSStatement(NodeListOptional n0) {
      f0 = new NodeToken("exec");
      if ( f0 != null ) f0.setParent(this);
      f1 = new NodeToken("cics");
      if ( f1 != null ) f1.setParent(this);
      f2 = n0;
      if ( f2 != null ) f2.setParent(this);
      f3 = new NodeToken("end-exec");
      if ( f3 != null ) f3.setParent(this);
   }

   public void accept(org.codecover.instrumentation.cobol85.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.cobol85.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.cobol85.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.cobol85.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

