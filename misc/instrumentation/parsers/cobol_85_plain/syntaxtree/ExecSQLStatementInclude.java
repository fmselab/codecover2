//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.cobol85.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;INCLUDE&gt;
 * f1 -> SQLIdentifier()
 * f2 -> [ &lt;END_EXEC&gt; ( SQLSelectFrom() | SQLSelectWhere() ) ]
 * f3 -> [ SQLSelectInnerJoin() ]
 * f4 -> [ SQLSelectWhere() ]
 * f5 -> [ SQLSelectGroupBy() ]
 * f6 -> [ SQLSelectHaving() ]
 * f7 -> [ SQLSelectOrderBy() ]
 * f8 -> [ SQLSelectForUpdate() ]
 * f9 -> [ &lt;FOR&gt; &lt;FETCH&gt; &lt;ONLY&gt; ]
 * f10 -> [ &lt;WITH&gt; SQLIdentifier() ]
 * </PRE>
 */
public class ExecSQLStatementInclude implements Node {
   private Node parent;
   public NodeToken f0;
   public SQLIdentifier f1;
   public NodeOptional f2;
   public NodeOptional f3;
   public NodeOptional f4;
   public NodeOptional f5;
   public NodeOptional f6;
   public NodeOptional f7;
   public NodeOptional f8;
   public NodeOptional f9;
   public NodeOptional f10;

   public ExecSQLStatementInclude(NodeToken n0, SQLIdentifier n1, NodeOptional n2, NodeOptional n3, NodeOptional n4, NodeOptional n5, NodeOptional n6, NodeOptional n7, NodeOptional n8, NodeOptional n9, NodeOptional n10) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
      f4 = n4;
      if ( f4 != null ) f4.setParent(this);
      f5 = n5;
      if ( f5 != null ) f5.setParent(this);
      f6 = n6;
      if ( f6 != null ) f6.setParent(this);
      f7 = n7;
      if ( f7 != null ) f7.setParent(this);
      f8 = n8;
      if ( f8 != null ) f8.setParent(this);
      f9 = n9;
      if ( f9 != null ) f9.setParent(this);
      f10 = n10;
      if ( f10 != null ) f10.setParent(this);
   }

   public ExecSQLStatementInclude(SQLIdentifier n0, NodeOptional n1, NodeOptional n2, NodeOptional n3, NodeOptional n4, NodeOptional n5, NodeOptional n6, NodeOptional n7, NodeOptional n8, NodeOptional n9) {
      f0 = new NodeToken("include");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = n1;
      if ( f2 != null ) f2.setParent(this);
      f3 = n2;
      if ( f3 != null ) f3.setParent(this);
      f4 = n3;
      if ( f4 != null ) f4.setParent(this);
      f5 = n4;
      if ( f5 != null ) f5.setParent(this);
      f6 = n5;
      if ( f6 != null ) f6.setParent(this);
      f7 = n6;
      if ( f7 != null ) f7.setParent(this);
      f8 = n7;
      if ( f8 != null ) f8.setParent(this);
      f9 = n8;
      if ( f9 != null ) f9.setParent(this);
      f10 = n9;
      if ( f10 != null ) f10.setParent(this);
   }

   public void accept(org.codecover.instrumentation.cobol85.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.cobol85.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.cobol85.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.cobol85.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

