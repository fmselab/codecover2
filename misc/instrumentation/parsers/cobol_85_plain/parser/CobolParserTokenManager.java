/* Generated By:JavaCC: Do not edit this line. CobolParserTokenManager.java */
package org.codecover.instrumentation.cobol85.parser;
import org.codecover.instrumentation.cobol85.NodeCounter;
import org.codecover.instrumentation.cobol85.syntaxtree.*;
import java.util.Vector;

/**
*
* @author Generated By JavaCC: CobolParserTokenManager.java
* @author Christoph MÃ¼ller / Stefan Franke:<br>
* added position handling in: {@link #jjFillToken()}.
*
* @version 1.0 ($Id: CobolParserTokenManager.java 1 2007-12-12 17:37:26Z t-scheller $)
*/
@SuppressWarnings("all")
public class CobolParserTokenManager implements CobolParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   switch (pos)
   {
      case 0:
         if ((active7 & 0x800000L) != 0L)
            return 9;
         if ((active0 & 0xfffffe0000000000L) != 0L || (active1 & 0x3ffffL) != 0L || (active6 & 0x800002020000000L) != 0L || (active7 & 0x18L) != 0L)
         {
            jjmatchedKind = 488;
            return 5;
         }
         if ((active7 & 0x1c000L) != 0L)
         {
            jjmatchedKind = 466;
            return 112;
         }
         if ((active0 & 0x1ffffffff88L) != 0L || (active1 & 0xfff0000000000000L) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0xffffffffffffffffL) != 0L || (active5 & 0xffffffffffffffffL) != 0L || (active6 & 0xf7fdbb4f8fffffffL) != 0L || (active7 & 0x1fe7L) != 0L)
         {
            jjmatchedKind = 488;
            return 113;
         }
         if ((active7 & 0x18000000L) != 0L)
            return 114;
         if ((active7 & 0x6000000L) != 0L)
            return 115;
         if ((active1 & 0xffffffffc0000L) != 0L || (active6 & 0x2440050000000L) != 0L)
            return 113;
         if ((active7 & 0x80000000L) != 0L)
            return 116;
         return -1;
      case 1:
         if ((active0 & 0xfff8000000000000L) != 0L || (active1 & 0x1ffffL) != 0L || (active7 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 1;
            }
            return 4;
         }
         if ((active7 & 0x2000000L) != 0L)
            return 48;
         if ((active7 & 0x8000000L) != 0L)
            return 53;
         if ((active0 & 0x706ff7fffff88L) != 0L || (active1 & 0xfffff00003fa0000L) != 0L || (active2 & 0x20fbbff7fffffffL) != 0L || (active3 & 0xe34fe7ffffffff00L) != 0L || (active4 & 0xe7ffffffefffff3fL) != 0L || (active5 & 0x7ffffffffffffffdL) != 0L || (active6 & 0xfcfbbf4beffff3feL) != 0L || (active7 & 0x1fd7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 1;
            }
            return 113;
         }
         if ((active2 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 0;
            }
            return 117;
         }
         if ((active0 & 0xf90080000000L) != 0L || (active1 & 0xffffc000000L) != 0L || (active2 & 0xfdc0440080000000L) != 0L || (active3 & 0x1cb01800000000ffL) != 0L || (active4 & 0x18000000100000c0L) != 0L || (active5 & 0x8000000000000002L) != 0L || (active6 & 0x304402410000c01L) != 0L || (active7 & 0x20L) != 0L)
            return 113;
         if ((active7 & 0x1c000L) != 0L)
            return 112;
         return -1;
      case 2:
         if ((active2 & 0x30000000000000L) != 0L)
            return 117;
         if ((active0 & 0x3d802600L) != 0L || (active1 & 0xfea0000001800000L) != 0L || (active2 & 0x4000247fffL) != 0L || (active3 & 0x20100000001000L) != 0L || (active4 & 0x8000000000000300L) != 0L || (active5 & 0x100100002000L) != 0L || (active6 & 0x3032200800002001L) != 0L)
            return 113;
         if ((active0 & 0xffffc6ff427fd988L) != 0L || (active1 & 0x15ffffffa7bffffL) != 0L || (active2 & 0xfa8fbfbf7fdb8000L) != 0L || (active3 & 0xfb4fe7ffffffef7fL) != 0L || (active4 & 0x67ffffffeffffc3fL) != 0L || (active5 & 0x7fffeffeffffdffdL) != 0L || (active6 & 0xcfcddf67ffffdbfeL) != 0L || (active7 & 0x1fffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 2;
            }
            return 113;
         }
         return -1;
      case 3:
         if ((active1 & 0xfc00000001000000L) != 0L || (active2 & 0x20000000003fffL) != 0L || (active6 & 0x800000000L) != 0L)
            return 117;
         if ((active0 & 0xf030c20018100000L) != 0L || (active1 & 0x5202000278c07fL) != 0L || (active2 & 0x830c000000L) != 0L || (active3 & 0x10064241f854720L) != 0L || (active4 & 0x102000040cL) != 0L || (active5 & 0x7791804007fe0101L) != 0L || (active6 & 0x8d4b41200edc081cL) != 0L || (active7 & 0x106L) != 0L)
            return 113;
         if ((active0 & 0xfcf04ff626fdd88L) != 0L || (active1 & 0x10dfdfff8033f80L) != 0L || (active2 & 0xfa8fbf3c73dbc000L) != 0L || (active3 & 0xfa4f83db807aa85fL) != 0L || (active4 & 0x67ffffefcffffa33L) != 0L || (active5 & 0x86e68bef801defcL) != 0L || (active6 & 0x72849e47f123d3e2L) != 0L || (active7 & 0x1ef9L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 3;
            }
            return 113;
         }
         if ((active3 & 0x60000000L) != 0L || (active5 & 0x70000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 2;
            }
            return 117;
         }
         return -1;
      case 4:
         if ((active1 & 0xfc00000001000000L) != 0L || (active2 & 0x20000000003fffL) != 0L || (active3 & 0x60000000L) != 0L || (active5 & 0x70000000000L) != 0L || (active6 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 4;
            }
            return 117;
         }
         if ((active0 & 0xec2c493620fcd80L) != 0L || (active1 & 0x10dfffff802bffeL) != 0L || (active2 & 0xe282bf2433424000L) != 0L || (active3 & 0xd24f83ca94628659L) != 0L || (active4 & 0x47ebbfefc87ffa33L) != 0L || (active5 & 0x86168ae9801defcL) != 0L || (active6 & 0xb0041c46788201e2L) != 0L || (active7 & 0x12f5L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 4;
            }
            return 113;
         }
         if ((active0 & 0xe020000000000000L) != 0L || (active1 & 0x600001L) != 0L || (active2 & 0x200000000L) != 0L || (active3 & 0x2000000L) != 0L || (active4 & 0x8L) != 0L || (active5 & 0x7f00000L) != 0L || (active6 & 0x80000L) != 0L)
            return 117;
         if ((active0 & 0x10d006c10601008L) != 0L || (active1 & 0x10000L) != 0L || (active2 & 0x1801001840998000L) != 0L || (active3 & 0x2800400101182806L) != 0L || (active4 & 0x2014400007800000L) != 0L || (active5 & 0x400e001060000000L) != 0L || (active6 & 0x428182018521d200L) != 0L || (active7 & 0xd08L) != 0L)
            return 113;
         if ((active2 & 0xc000000000000L) != 0L || (active3 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 3;
            }
            return 117;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0xfc00000001600000L) != 0L || (active2 & 0x2c000200003ffeL) != 0L || (active3 & 0x1062000000L) != 0L || (active4 & 0x8L) != 0L || (active5 & 0x70007f00000L) != 0L || (active6 & 0x800080000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 5;
            }
            return 117;
         }
         if ((active0 & 0x840c008224fcc00L) != 0L || (active1 & 0xd77dc0002bffeL) != 0L || (active2 & 0xf2828b2023420000L) != 0L || (active3 & 0x924702ca14008659L) != 0L || (active4 & 0x45083fe8c05ffa33L) != 0L || (active5 & 0x869680e80001e78L) != 0L || (active6 & 0xb000080450820102L) != 0L || (active7 & 0x119cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 5;
            }
            return 113;
         }
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x3f8000000L) != 0L || (active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 4;
            }
            return 117;
         }
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x4L) != 0L)
            return 117;
         if ((active0 & 0x680049340000180L) != 0L || (active1 & 0x100882000000000L) != 0L || (active2 & 0x340410004000L) != 0L || (active3 & 0x4008810080720000L) != 0L || (active4 & 0x2e380070c200000L) != 0L || (active5 & 0xa058004084L) != 0L || (active6 & 0x49442280100e0L) != 0L || (active7 & 0x261L) != 0L)
            return 113;
         return -1;
      case 6:
         if ((active0 & 0x840c008224fc800L) != 0L || (active1 & 0x507dc0002a5beL) != 0L || (active2 & 0x2280030023420000L) != 0L || (active3 & 0x920002c010000211L) != 0L || (active4 & 0x18122ea0041f010L) != 0L || (active5 & 0x69680e80001e10L) != 0L || (active6 & 0xb0000000408001c2L) != 0L || (active7 & 0x10cL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 6;
            }
            return 113;
         }
         if ((active1 & 0x1000000L) != 0L || (active2 & 0x4L) != 0L || (active3 & 0x4000000000000L) != 0L || (active4 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 5;
            }
            return 117;
         }
         if ((active1 & 0x400000000000000L) != 0L || (active3 & 0x400000L) != 0L || (active4 & 0x40000000000000L) != 0L || (active5 & 0x10000000L) != 0L)
            return 117;
         if ((active0 & 0x400L) != 0L || (active1 & 0x8700000001a40L) != 0L || (active2 & 0xd002882000000000L) != 0L || (active3 & 0x43000a04008448L) != 0L || (active4 & 0x440a1d04c01e0a22L) != 0L || (active5 & 0x800000000000068L) != 0L || (active6 & 0x80410020000L) != 0L || (active7 & 0x1090L) != 0L)
            return 113;
         if ((active0 & 0x22000000000000L) != 0L || (active1 & 0xf8000003f8600000L) != 0L || (active2 & 0x2c000200003ffaL) != 0L || (active3 & 0x1062000004L) != 0L || (active4 & 0x8L) != 0L || (active5 & 0x70007f18000L) != 0L || (active6 & 0x800080000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 6;
            }
            return 117;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x800400000000000L) != 0L || (active2 & 0x10L) != 0L || (active3 & 0x2000000000000L) != 0L || (active4 & 0x80180000L) != 0L || (active5 & 0x8040L) != 0L || (active6 & 0x800000000L) != 0L)
            return 117;
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xf0000003f9600000L) != 0L || (active2 & 0x2c000200003feeL) != 0L || (active3 & 0x4001062400004L) != 0L || (active4 & 0x40000000000009L) != 0L || (active5 & 0x70017f10000L) != 0L || (active6 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 7;
            }
            return 117;
         }
         if ((active0 & 0x3c000L) != 0L || (active1 & 0x1000000021500L) != 0L || (active2 & 0x2200030020400000L) != 0L || (active3 & 0x820002c010000001L) != 0L || (active4 & 0x180008000007010L) != 0L || (active5 & 0x28680e00000e10L) != 0L || (active6 & 0x9000000040000102L) != 0L || (active7 & 0x8L) != 0L)
            return 113;
         if ((active0 & 0x840c008224c0800L) != 0L || (active1 & 0x407d40000a0beL) != 0L || (active2 & 0x8080000003020000L) != 0L || (active3 & 0x1000000000000210L) != 0L || (active4 & 0x1226a00418000L) != 0L || (active5 & 0x41000000001000L) != 0L || (active6 & 0x20000000000000c0L) != 0L || (active7 & 0x104L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 7;
            }
            return 113;
         }
         if ((active1 & 0x800000000L) != 0L || (active5 & 0x80000000L) != 0L || (active6 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 6;
            }
            return 117;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0xf000000bf9600000L) != 0L || (active2 & 0x2c000200001deeL) != 0L || (active3 & 0x6001002400004L) != 0L || (active4 & 0x40000080180009L) != 0L || (active5 & 0x70097f00040L) != 0L || (active6 & 0x880000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 8;
            }
            return 117;
         }
         if ((active1 & 0x400000000000L) != 0L || (active2 & 0x2200L) != 0L || (active3 & 0x60000000L) != 0L || (active5 & 0xc00010000L) != 0L)
            return 117;
         if ((active0 & 0x8000000020f8000L) != 0L || (active1 & 0x406100000a0beL) != 0L || (active2 & 0x8080000000020000L) != 0L || (active3 & 0x1000000000000010L) != 0L || (active5 & 0x1000000001000L) != 0L || (active6 & 0x20000000000000c0L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 8;
            }
            return 113;
         }
         if ((active0 & 0x40c00820400800L) != 0L || (active1 & 0x1c400000000L) != 0L || (active2 & 0x3000000L) != 0L || (active3 & 0x200L) != 0L || (active4 & 0x1226a00418000L) != 0L || (active5 & 0x40000000000000L) != 0L || (active7 & 0x104L) != 0L)
            return 113;
         return -1;
      case 9:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x9000000809600000L) != 0L || (active2 & 0x200002000018aeL) != 0L || (active3 & 0x6001002400004L) != 0L || (active4 & 0x40000080100009L) != 0L || (active5 & 0x95100040L) != 0L || (active6 & 0x880000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 9;
            }
            return 117;
         }
         if ((active0 & 0x8000000020c0000L) != 0L || (active1 & 0x410000080beL) != 0L || (active2 & 0x80000000020000L) != 0L || (active3 & 0x1000000000000010L) != 0L || (active5 & 0x1000000000000L) != 0L || (active6 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 9;
            }
            return 113;
         }
         if ((active1 & 0x380000000L) != 0L || (active5 & 0x70002600000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 8;
            }
            return 117;
         }
         if ((active1 & 0x6000000070000000L) != 0L || (active2 & 0xc000000000540L) != 0L || (active3 & 0x40000000L) != 0L || (active4 & 0x80000L) != 0L || (active5 & 0xc00800000L) != 0L)
            return 117;
         if ((active0 & 0x800000038000L) != 0L || (active1 & 0x4020000002000L) != 0L || (active2 & 0x8000000000000000L) != 0L || (active4 & 0x4000010000L) != 0L || (active5 & 0x1000L) != 0L || (active6 & 0x2000000000000040L) != 0L)
            return 113;
         return -1;
      case 10:
         if ((active1 & 0x8000000808600000L) != 0L || (active2 & 0x200001802L) != 0L || (active3 & 0x6000002400004L) != 0L || (active4 & 0x80100009L) != 0L || (active5 & 0x93700040L) != 0L || (active6 & 0x880000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 10;
            return 117;
         }
         if ((active0 & 0x8000000000c0000L) != 0L || (active1 & 0x10000080beL) != 0L || (active2 & 0x80000000000000L) != 0L || (active3 & 0x1000000000000010L) != 0L || (active5 & 0x1000000000000L) != 0L || (active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 10;
            return 113;
         }
         if ((active0 & 0x2000000030000L) != 0L || (active1 & 0x1000000381000000L) != 0L || (active2 & 0x280000000000acL) != 0L || (active3 & 0x1000000000L) != 0L || (active4 & 0x40000000000000L) != 0L || (active5 & 0x70004000000L) != 0L)
            return 117;
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x40000000000L) != 0L || (active2 & 0x20000L) != 0L)
            return 113;
         return -1;
      case 11:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x80beL) != 0L || (active2 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 11;
            }
            return 113;
         }
         if ((active0 & 0x30000L) != 0L || (active1 & 0x808200000L) != 0L || (active3 & 0x6000000400000L) != 0L || (active4 & 0x80100001L) != 0L || (active5 & 0x92600040L) != 0L || (active6 & 0x880000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 11;
            }
            return 117;
         }
         if ((active1 & 0x8000000000400000L) != 0L || (active2 & 0x200001802L) != 0L || (active3 & 0x2000004L) != 0L || (active4 & 0x8L) != 0L || (active5 & 0x1100000L) != 0L)
            return 117;
         if ((active0 & 0xc0000L) != 0L || (active1 & 0x1000000000L) != 0L || (active3 & 0x1000000000000010L) != 0L || (active5 & 0x1000000000000L) != 0L || (active6 & 0x80L) != 0L)
            return 113;
         return -1;
      case 12:
         if ((active0 & 0x80000L) != 0L || (active1 & 0x800200000L) != 0L || (active5 & 0x80000040L) != 0L || (active6 & 0x80000L) != 0L)
            return 117;
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x80beL) != 0L)
            return 113;
         if ((active0 & 0x30000L) != 0L || (active1 & 0x8000000L) != 0L || (active3 & 0x6000000400000L) != 0L || (active4 & 0x80100001L) != 0L || (active5 & 0x12600000L) != 0L || (active6 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 12;
            }
            return 117;
         }
         if ((active2 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 488;
               jjmatchedPos = 12;
            }
            return 113;
         }
         return -1;
      case 13:
         if ((active1 & 0x800003cL) != 0L || (active3 & 0x2000000400000L) != 0L || (active4 & 0x100001L) != 0L || (active5 & 0x2600000L) != 0L)
            return 117;
         if ((active0 & 0xb0000L) != 0L || (active3 & 0x4000000000000L) != 0L || (active4 & 0x80000000L) != 0L || (active5 & 0x10000000L) != 0L || (active6 & 0x800000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 13;
            return 117;
         }
         if ((active2 & 0x80000000000000L) != 0L)
            return 113;
         return -1;
      case 14:
         if ((active0 & 0xb0000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 14;
            return 117;
         }
         if ((active1 & 0x3cL) != 0L || (active3 & 0x4000000000000L) != 0L || (active4 & 0x80000000L) != 0L || (active5 & 0x10000000L) != 0L || (active6 & 0x800000L) != 0L)
            return 117;
         return -1;
      case 15:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 15;
            return 117;
         }
         if ((active0 & 0x30000L) != 0L)
            return 117;
         return -1;
      case 16:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 16;
            return 117;
         }
         return -1;
      case 17:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 488;
            jjmatchedPos = 17;
            return 117;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000L, 0x0L);
      case 34:
         jjmatchedKind = 474;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
      case 36:
         return jjStopAtPos(0, 480);
      case 39:
         jjmatchedKind = 476;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000L);
      case 40:
         return jjStopAtPos(0, 468);
      case 41:
         return jjStopAtPos(0, 469);
      case 42:
         jjmatchedKind = 478;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000L);
      case 43:
         return jjStopAtPos(0, 477);
      case 44:
         return jjStopAtPos(0, 472);
      case 45:
         return jjStopAtPos(0, 467);
      case 46:
         return jjStartNfaWithStates_0(0, 471, 9);
      case 47:
         return jjStartNfaWithStates_0(0, 479, 116);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000L);
      case 55:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000L);
      case 56:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10000L);
      case 58:
         return jjStopAtPos(0, 470);
      case 60:
         jjmatchedKind = 482;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80200000000L);
      case 61:
         return jjStopAtPos(0, 485);
      case 62:
         jjmatchedKind = 484;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L);
      case 64:
         return jjStopAtPos(0, 420);
      case 95:
         return jjStopAtPos(0, 486);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1ffffff80L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000000L, 0x6c0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1fe00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffffe0000000000L, 0x3ffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x800002020000000L, 0x18L);
      case 68:
      case 100:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffffff80000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2440050000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8L, 0xfff0000000000000L, 0x3fffffffL, 0x0L, 0x0L, 0x0L, 0xa00000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffc0000000L, 0x0L, 0x0L, 0x0L, 0x4080000000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fe0000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe000000000000L, 0x0L, 0x0L, 0x0L, 0x40100000000000L, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfff0000000000000L, 0xffL, 0x0L, 0x0L, 0x200000400000000L, 0x20L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x700L, 0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1800L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fffe000L, 0x0L, 0x0L, 0x8000000000000L, 0x2L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xff80000000L, 0x0L, 0x0L, 0x30820000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ff0000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfffc000000000000L, 0x0L, 0x0L, 0x100000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xffffffL, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x7000000L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xfffffffff8000000L, 0x0L, 0x0L, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffffffffffffL, 0x3000004000000000L, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfffe000000000000L, 0xfL, 0x1100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000100007ff0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x38000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000081fc0000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1010000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xe000000L, 0x0L);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active6 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 423);
         break;
      case 34:
         if ((active7 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 473, 48);
         break;
      case 39:
         if ((active7 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 475, 53);
         break;
      case 42:
         if ((active7 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 490);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x30000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 54:
         if ((active7 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 462, 112);
         break;
      case 55:
         if ((active7 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 463, 112);
         break;
      case 56:
         if ((active7 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 464, 112);
         break;
      case 61:
         if ((active7 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 481);
         else if ((active7 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 483);
         break;
      case 62:
         if ((active7 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 491);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0x1f80000L, active2, 0x40000000L, active3, 0x10000006800L, active4, 0x800001fL, active5, 0x1e000000000001L, active6, 0x22100000038000L, active7, 0x1L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0x600L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x180L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 113);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 159, 113);
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 284, 113);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 321, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0xe00L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000L, active1, 0xffff8000000L, active2, 0x20a0000000000L, active3, 0x60380079000L, active4, 0x7ffffffe0000020L, active5, 0x1e0000000003ffcL, active6, 0x8149001e000000L, active7, 0x800L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 113);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 184, 113);
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 262, 113);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 315, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 263, 113);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 316, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1e0000000001c000L, active6, 0x80000020800c0000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x1f00000000000L, active2, 0xc101f00000000L, active3, 0x7f80000L, active4, 0x2000000000000300L, active5, 0x6000000000060000L, active6, 0x818040040100000L, active7, 0x102L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x70060007fe000L, active1, 0x40000000000000L, active2, 0x200000000000L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x200000000000000L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000L, active1, 0xff00000000000000L, active2, 0xf80000000003ffffL, active3, 0x7fL, active4, 0L, active5, 0L, active6, 0x300000d000003f0L, active7, 0x20L);
      case 79:
      case 111:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xfff8008000000000L, active1, 0x200000001ffffL, active2, 0x46000040000L, active3, 0x103c78000000L, active4, 0x4000000000003800L, active5, 0x1ff80000L, active6, 0x4440820000e00001L, active7, 0x8L);
      case 80:
      case 112:
         if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0x300000000000000L, active4, 0L, active5, 0xe0000000L, active6, 0x4000000000800L, active7, 0x40L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L, active5, 0x100000000L, active6, 0x3000000000000000L, active7, 0L);
      case 82:
      case 114:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000L, active1, 0L, active2, 0x1808000100000L, active3, 0x1800000000000000L, active4, 0x7fc000L, active5, 0L, active6, 0x1000006L, active7, 0x1000L);
      case 83:
      case 115:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 199, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000007000L, active7, 0x80L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0xfe00000000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x4000000020000L, active2, 0x10000000000L, active3, 0x4003e0c000000700L, active4, 0x8000000007800000L, active5, 0x3f0000000000L, active6, 0x4020000000L, active7, 0x10L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0x8000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3f000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000000L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1c00000000000L, active6, 0x8L, active7, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c02000000000L, active1, 0x100000000000000L, active2, 0x2000000400000L, active3, 0x8000L, active4, 0x20000000L, active5, 0x200003e60004004L, active6, 0x1012000001002L, active7, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x7f8000000L, active2, 0x40000000000L, active3, 0x2000L, active4, 0L, active5, 0x20f0000000000L, active6, 0x4000000000L, active7, 0L);
      case 67:
      case 99:
         if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 429;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000180L, active1, 0x10001802000000L, active2, 0x3000000L, active3, 0x8000018000000L, active4, 0x7c0000201L, active5, 0x18L, active6, 0x800000410000000L, active7, 0x200L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 113);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000400L, active1, 0xfc00000000000000L, active2, 0x3800000000007fffL, active3, 0x800000c00000000L, active4, 0x800000002L, active5, 0L, active6, 0x4000800000000L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 397, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x18000008L, active1, 0L, active2, 0x80800008800000L, active3, 0x8100000000000000L, active4, 0x1001000000L, active5, 0x400000080000000L, active6, 0x80000000800c0000L, active7, 0x400L);
      case 70:
      case 102:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 245, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0x6000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0L, active2, 0xc000000000000L, active3, 0x1000020000000000L, active4, 0x200000000000000cL, active5, 0x20060L, active6, 0x40000000000L, active7, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 113);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 119, 113);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xc000000004000000L, active3, 0x40000000000001L, active4, 0x4800L, active5, 0x18000L, active6, 0x400000301004010L, active7, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000L, active7, 0x80L);
      case 76:
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 113);
         else if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc0020000000000L, active1, 0xe000000000L, active2, 0x740000000L, active3, 0x60c000000000L, active4, 0x18000000000L, active5, 0xc000000000080L, active6, 0x31400000000180e0L, active7, 0L);
      case 77:
      case 109:
         if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 364, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0xff00000000000000L, active1, 0x7fL, active2, 0L, active3, 0x3800080180000L, active4, 0x60000000000L, active5, 0x6000400000000001L, active6, 0L, active7, 0x108L);
      case 78:
      case 110:
         if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 319, 113);
         else if ((active6 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 436, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x41000000000L, active1, 0x8000000003f80L, active2, 0xb0800000000L, active3, 0x7e20800L, active4, 0x80008000000L, active5, 0x1800000000300L, active6, 0x200820000000000L, active7, 0x7L);
      case 79:
      case 111:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6004000000000L, active1, 0L, active2, 0x2120a000000000L, active3, 0L, active4, 0x67f8000L, active5, 0x4000000000L, active6, 0x800L, active7, 0L);
      case 80:
      case 112:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 146, 113);
         else if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 384, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x20fc000L, active1, 0x4010000000000L, active2, 0x200000000000000L, active3, 0x6L, active4, 0x3f00000000000L, active5, 0x10200000000400L, active6, 0x8L, active7, 0x40L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1800L, active6, 0L, active7, 0x800L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2c000L, active2, 0x1000100000L, active3, 0x1100000000L, active4, 0x4000000800020L, active5, 0x1860008007f80000L, active6, 0x2ee20000L, active7, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40100000L, active1, 0x40760000000000L, active2, 0L, active3, 0x200044718L, active4, 0x18000000003010L, active5, 0x80000000000000L, active6, 0x400040000100L, active7, 0x20L);
      case 84:
      case 116:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 236, 113);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 333, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x8100601000L, active1, 0x80000780000L, active2, 0x30018000L, active3, 0x4200010000000020L, active4, 0xe0000000000000L, active5, 0L, active6, 0x80080000100200L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0x80000L, active3, 0L, active4, 0x4000000000000400L, active5, 0x18000000L, active6, 0x4000000000000004L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x1800000000000L, active2, 0x100000020000L, active3, 0x2000000040L, active4, 0x100000000000000L, active5, 0L, active6, 0x100000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0x60000000L, active4, 0x600000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         if ((active6 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 437, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0x100000000000000L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 113);
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 204, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xfc00000001000000L, active2, 0x20000000003fffL, active3, 0x60000000L, active4, 0L, active5, 0x70000000000L, active6, 0x800000000L, active7, 0L);
      case 65:
      case 97:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010000800L, active1, 0x8180000000000L, active2, 0x840800080000L, active3, 0x1000020000600040L, active4, 0xa8000000000L, active5, 0x400L, active6, 0x4000000000000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0x200000000000L, active3, 0x800000000000L, active4, 0L, active5, 0x400000000000L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 113);
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 430;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2044000000008L, active1, 0x20000000000L, active2, 0x10000000000L, active3, 0L, active4, 0x38000L, active5, 0x10000e0000000L, active6, 0x80000000000000L, active7, 0x4L);
      case 68:
      case 100:
         if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 285, 113);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 328, 113);
         else if ((active6 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 438, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x8000L, active4, 0x8000002L, active5, 0L, active6, 0x200000L, active7, 0x1L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 113);
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 226, 113);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 229, 113);
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 320, 113);
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 338, 113);
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 372, 113);
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 386, 113);
         else if ((active6 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 387, 113);
         else if ((active6 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 435, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000020601180L, active1, 0x12000600000L, active2, 0x18000a0231008000L, active3, 0x2807001003002000L, active4, 0x1180168c0000008L, active5, 0x4000000000000080L, active6, 0x1200000000000000L, active7, 0x120L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0x20L, active5, 0x18000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100020000L, active4, 0x9c0000L, active5, 0L, active6, 0x1000L, active7, 0L);
      case 72:
      case 104:
         if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 404, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000fc000L, active1, 0L, active2, 0xc000000000000L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc40000000L, active1, 0x180c800000000L, active2, 0x2000100000024000L, active3, 0x200010000180000L, active4, 0x200000000003000L, active5, 0x8000000000L, active6, 0x140000000202L, active7, 0x800L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x400000L) != 0L)
         {
            jjmatchedKind = 406;
            jjmatchedPos = 3;
         }
         else if ((active7 & 0x2L) != 0L)
         {
            jjmatchedKind = 449;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x14000000L, active4, 0x1L, active5, 0L, active6, 0x800000L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 113);
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 292, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x4001000000000L, active2, 0x200000402400000L, active3, 0x400000000000L, active4, 0x700000000000L, active5, 0xe000000000000L, active6, 0x410000000L, active7, 0x40L);
      case 77:
      case 109:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0xf00000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0x60000000000060L, active6, 0L, active7, 0x8L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 113);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 248, 113);
         else if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 337, 113);
         else if ((active5 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 377, 113);
         else if ((active5 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 378, 113);
         else if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 395, 113);
         else if ((active6 & 0x40000L) != 0L)
         {
            jjmatchedKind = 402;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 442, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x10000L, active2, 0x80000000000000L, active3, 0L, active4, 0x4000000000004800L, active5, 0xe00000000L, active6, 0xc000000000084000L, active7, 0x1400L);
      case 79:
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 113);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 197, 113);
         else if ((active6 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 409;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200000000L, active1, 0L, active2, 0x100000L, active3, 0x80000000L, active4, 0x3840700000000L, active5, 0x800000000000000L, active6, 0x10c0000e0L, active7, 0x200L);
      case 80:
      case 112:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 358, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000000000000L, active1, 0x60000000007fL, active2, 0L, active3, 0x4000000000000008L, active4, 0L, active5, 0x200000000000L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 421;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 424;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc00002000400L, active1, 0x28000L, active2, 0x810000L, active3, 0x8000000000000000L, active4, 0x400000000000000L, active5, 0x1018004004L, active6, 0x1000080000000L, active7, 0x10L);
      case 83:
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 113);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 113);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 113);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 266, 113);
         else if ((active6 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 433, 113);
         else if ((active6 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 443, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000000000L, active1, 0L, active2, 0x1040000000L, active3, 0x200000000L, active4, 0x10L, active5, 0L, active6, 0x4220000000L, active7, 0L);
      case 84:
      case 116:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 113);
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 113);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 208, 113);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 234, 113);
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 375, 113);
         else if ((active5 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 376, 113);
         else if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 388, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x40000001f00L, active2, 0xc000002000000000L, active3, 0x4000c000000611L, active4, 0x6400200L, active5, 0x82007f00208L, active6, 0x820041000100L, active7, 0x80L);
      case 85:
      case 117:
         if ((active5 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 380, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x7f8000000L, active2, 0x1000000000000L, active3, 0x8000800000006L, active4, 0xe4000001000000L, active5, 0x1810L, active6, 0x18000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000080000000000L, active7, 0L);
      case 89:
      case 121:
         if ((active6 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 440, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0xe020000000000000L, active1, 0x600001L, active2, 0xc000200000000L, active3, 0x1002000000L, active4, 0x8L, active5, 0x7f00000L, active6, 0x80000L, active7, 0L);
      case 65:
      case 97:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40c000000fc000L, active1, 0x400001000000100L, active2, 0x200000000000L, active3, 0x204000010L, active4, 0x310000000000L, active5, 0L, active6, 0x2000000010000000L, active7, 0x8L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000000000000L, active2, 0x2020040000000000L, active3, 0x4000000000000L, active4, 0L, active5, 0x18000084L, active6, 0xe0L, active7, 0L);
      case 68:
      case 100:
         if ((active6 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 446, 113);
         else if ((active7 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 458, 113);
         else if ((active7 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 459, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000800000000000L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0xe00000000L, active6, 0L, active7, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 113);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 113);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 113);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 279, 113);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 280, 113);
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 369, 113);
         else if ((active6 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 396, 113);
         else if ((active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 399;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 408, 113);
         else if ((active6 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 415, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000400L, active1, 0x800002000002a200L, active2, 0x400000000L, active3, 0x800000000008L, active4, 0x4438001L, active5, 0x40005a60L, active6, 0x8000080808010000L, active7, 0x10L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000010000000L, active4, 0x800000000L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 398, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x7f8000000L, active2, 0L, active3, 0x600000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active6 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 425;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 439, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0x800000000000L, active7, 0L);
      case 73:
      case 105:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 203, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x40c0000000480L, active2, 0xc202002000000001L, active3, 0xc000008601L, active4, 0x4000200c0000002L, active5, 0x60000080000008L, active6, 0x40820000L, active7, 0xc0L);
      case 75:
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 113);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 113);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 147, 113);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 113);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 205, 113);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 393, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100600000000000L, active2, 0L, active3, 0x800000040L, active4, 0L, active5, 0L, active6, 0x2L, active7, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x800c800000000L, active2, 0x2L, active3, 0L, active4, 0x80000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 306, 113);
         else if ((active6 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 416, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x820000800L, active1, 0x10000000000L, active2, 0x100010004000L, active3, 0x1000000000000000L, active4, 0x200000000000000L, active5, 0x8000000000L, active6, 0x100000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008102000000L, active1, 0x1000000L, active2, 0x4L, active3, 0x200000000000000L, active4, 0x8000020L, active5, 0x400000000000L, active6, 0x20000000L, active7, 0L);
      case 80:
      case 112:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 176, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0x1000008L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L, active7, 0x4L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x70000000000L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 113);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 113);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 113);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 251, 113);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 113);
         else if ((active6 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 441, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x1200400000L, active1, 0x1800L, active2, 0xa00200200f0L, active3, 0xb000080000000L, active4, 0x1eb8067001c0000L, active5, 0x280000000410L, active6, 0x1000000000000100L, active7, 0x20L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 113);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 113);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 216, 113);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 238, 113);
         else if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 405, 113);
         else if ((active6 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 410, 113);
         else if ((active6 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 432, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0x1000000000000L, active2, 0xf00L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1100L);
      case 84:
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 113);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 113);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 113);
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 308, 113);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 317, 113);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 356, 113);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000L, active2, 0x80810000000000L, active3, 0x40020000120004L, active4, 0x8000007800L, active5, 0x18000L, active6, 0x4044200000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x7eL, active2, 0x2401000L, active3, 0x4000000000000000L, active4, 0x200L, active5, 0x800002000000000L, active6, 0x400000000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10060000000L, active4, 0x40000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0x10L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 144, 113);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 113);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 302, 113);
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x3f8000000L, active2, 0L, active3, 0x4L, active4, 0L, active5, 0x18000L, active6, 0L, active7, 0L);
      case 49:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 117);
         break;
      case 50:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 117);
         break;
      case 51:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 117);
         break;
      case 52:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 117);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800600800000000L, active2, 0xe000020000400000L, active3, 0x60000001L, active4, 0x400001c0000L, active5, 0x80e80000400L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x3c000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000800L, active1, 0x4000000200000L, active2, 0x200000200000000L, active3, 0x2000008L, active4, 0x300000400008L, active5, 0x300000L, active6, 0x80000L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 113);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 313, 113);
         else if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 334, 113);
         else if ((active7 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 454, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x400010000000000L, active2, 0L, active3, 0L, active4, 0x600018001L, active5, 0L, active6, 0x400000000L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 113);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 113);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 113);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 113);
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 232, 113);
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 434, 113);
         else if ((active7 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 448, 113);
         else if ((active7 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 457, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10008000000001f8L, active3, 0x40000800400000L, active4, 0x4000086000020800L, active5, 0x200010000000L, active6, 0x80000000000L, active7, 0L);
      case 70:
      case 102:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 117);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0x4L, active3, 0x600L, active4, 0L, active5, 0x400000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 113);
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 359, 113);
         else if ((active6 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 428, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000080L, active2, 0L, active3, 0x204000000L, active4, 0L, active5, 0x800000000000000L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 113);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 322, 113);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400900c000000100L, active2, 0x80090000000000L, active3, 0x1003020010000040L, active4, 0x8800007000L, active5, 0x8000000000010L, active6, 0x102L, active7, 0x1000L);
      case 75:
      case 107:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 113);
         else if ((active6 & 0x20L) != 0L)
         {
            jjmatchedKind = 389;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0xc0L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 113);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 113);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 173, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0x8000001000000010L, active4, 0L, active5, 0x400000000000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 113);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 283, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3800000L, active6, 0L, active7, 0x80L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 113);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 113);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 113);
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000008004c0000L, active1, 0x60000020600L, active2, 0x2002020001000L, active3, 0x200000000008000L, active4, 0xc0020000000002L, active5, 0x60000000001a60L, active6, 0x40820000L, active7, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000001800L, active2, 0x20000000020000L, active3, 0L, active4, 0x10L, active5, 0x8L, active6, 0L, active7, 0x4L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 113);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 113);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 239, 113);
         else if ((active6 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 413, 113);
         else if ((active6 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 422, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000002000L, active2, 0x2000L, active3, 0L, active4, 0x220L, active5, 0x1000004000000L, active6, 0x3000000010000000L, active7, 0x8L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 113);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 212, 113);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 243, 113);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 282, 113);
         else if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 350, 113);
         else if ((active5 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 357, 113);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 400, 113);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 411, 113);
         else if ((active6 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 417, 113);
         else if ((active6 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 426, 113);
         else if ((active6 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 431, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000400L, active1, 0x8000L, active2, 0x2000000L, active3, 0L, active4, 0x100010000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 113);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 113);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 254, 113);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 113);
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 327, 113);
         else if ((active7 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 453, 113);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x7eL, active2, 0x1000600L, active3, 0x4000000000000L, active4, 0x403000000000000L, active5, 0L, active6, 0L, active7, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x802L, active3, 0L, active4, 0L, active5, 0x70000000000L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc000000000000L, active3, 0L, active4, 0x80000c0000000L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000000L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 113);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 223, 113);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L, active2, 0x4L, active3, 0x4000000000000L, active4, 0x40000000000001L, active5, 0x10000000L, active6, 0L, active7, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x800404100000003eL, active2, 0xc000020000310L, active3, 0x200001000000000L, active4, 0L, active5, 0x60000000000000L, active6, 0L, active7, 0x100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 113);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 113);
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8020000L, active2, 0x20L, active3, 0x2000000000000L, active4, 0L, active5, 0x80000000a00L, active6, 0x40000000L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 117);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 113);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 113);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 246, 113);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 273, 113);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 318, 113);
         else if ((active7 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 460, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 113);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 113);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 113);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 225, 113);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 265, 113);
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 296, 113);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 300, 113);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 307, 113);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 314, 113);
         else if ((active6 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 412, 113);
         else if ((active6 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 418, 113);
         else if ((active7 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 455, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000003c000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x180000080000000L, active5, 0x70005800000L, active6, 0x8000000800000000L, active7, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x40L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 113);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 113);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 207, 113);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 257, 113);
         else if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 401, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000L, active7, 0L);
      case 72:
      case 104:
         if ((active5 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 379, 113);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x840000822000800L, active1, 0x10410000000L, active2, 0x200000003002000L, active3, 0x200L, active4, 0x1200200000000L, active5, 0x400000408000L, active6, 0L, active7, 0x4L);
      case 76:
      case 108:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 298, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2800000820001000L, active2, 0x8000000000000002L, active3, 0xc070000010L, active4, 0L, active5, 0x80000000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 261, 113);
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0x180000L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 323, 113);
         else if ((active6 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 427, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000100L, active2, 0x20000000020000L, active3, 0L, active4, 0x6800004000L, active5, 0x8000000000000L, active6, 0x2000000000000102L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000200000L, active2, 0x10200000000L, active3, 0x8000000002000004L, active4, 0x1008L, active5, 0x1000002310000L, active6, 0x1000000000080000L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 175, 113);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 267, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x408L, active3, 0L, active4, 0x10L, active5, 0xe00000000L, active6, 0x80L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 113);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 227, 113);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 290, 113);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 299, 113);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 305, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x380000000L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0x200000000000L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 113);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 195, 113);
         else if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 6;
         }
         else if ((active7 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 452, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000L, active1, 0xc000002000L, active2, 0x2000020000400040L, active3, 0x1L, active4, 0x400000L, active5, 0x1450L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000c0000L, active1, 0x480L, active2, 0L, active3, 0L, active4, 0x18000L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0x20000000000L, active4, 0x8000002000L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 202, 113);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400800000000L, active2, 0L, active3, 0x2000000000000L, active4, 0x80180000L, active5, 0x80000040L, active6, 0x800000L, active7, 0L);
      case 65:
      case 97:
         if ((active7 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 451, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x1000000000000010L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 366, 113);
         else if ((active6 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 419, 117);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x4000000400000L, active4, 0x40006000000000L, active5, 0x10000000L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 117);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 260, 113);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 311, 113);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 312, 113);
         else if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0xc02000000L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 113);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 150, 113);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 169, 113);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 189, 113);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 192, 113);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 220, 113);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 230, 113);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 233, 113);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 269, 113);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 295, 113);
         else if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 329, 113);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 330, 113);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 331, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000000000L, active1, 0x200000c000000000L, active2, 0x20L, active3, 0x200L, active4, 0x20800400000L, active5, 0L, active6, 0x80L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 270, 113);
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 371, 113);
         else if ((active6 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 385, 113);
         else if ((active6 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 392, 113);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000020020402000L, active2, 0x8080000000000400L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0x2000000000000040L, active7, 0L);
      case 76:
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 117);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 157, 113);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 249, 113);
         else if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 373, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc000000000000L, active3, 0L, active4, 0L, active5, 0x400000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x20c0000L, active1, 0x200000L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L, active7, 0x100L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 113);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 168, 113);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 268, 113);
         else if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 335, 117);
         return jjMoveStringLiteralDfa8_0(active0, 0x42000820000800L, active1, 0x10400000000L, active2, 0x200000000L, active3, 0L, active4, 0x1200200000000L, active5, 0x1000000100000L, active6, 0L, active7, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8008000L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active6 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 444, 113);
         else if ((active6 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 447, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0x380L, active3, 0L, active4, 0x18000L, active5, 0xa00000L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 113);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 113);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 365, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 117);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 113);
         else if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 363, 113);
         else if ((active6 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 414, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0x438000L, active1, 0x404101000003eL, active2, 0x20000000003802L, active3, 0L, active4, 0L, active5, 0x40000004000000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x380000000L, active2, 0x40L, active3, 0x62000004L, active4, 0x8L, active5, 0x70000010000L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 255, 113);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 113);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 231, 113);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 324, 113);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xc00000000L, active6, 0L, active7, 0L);
      case 49:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 117);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000002000000L, active1, 0x80L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x380000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000000000100L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0x80L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 113);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 201, 113);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 278, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 113);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 141, 117);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 153, 113);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 374, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000L, active1, 0x4000011000000L, active2, 0x20000L, active3, 0x2001040000000L, active4, 0x4000010001L, active5, 0x70002600000L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 113);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 113);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 113);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 113);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 113);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 113);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 289, 113);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 301, 113);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 304, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000038000L, active1, 0x4100000003eL, active2, 0xa2L, active3, 0L, active4, 0x80000L, active5, 0x1000000000000L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40L, active6, 0x40L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 152, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2002800a000L, active2, 0x400L, active3, 0x2000000L, active4, 0x8L, active5, 0x80000000L, active6, 0x2000000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0x4000000400000L, active4, 0x40000000000000L, active5, 0x10000000L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         if ((active7 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 456, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800200000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 113);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 297, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L, active2, 0x20000000001840L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 291, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0x1000000L, active6, 0x800000L, active7, 0L);
      case 84:
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 117);
         else if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 336, 117);
         else if ((active7 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 450, 113);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000400000L, active2, 0x200000000L, active3, 0x1000000000000014L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x9000000000000000L, active2, 0xc000000000000L, active3, 0L, active4, 0L, active5, 0x4000000L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6, old7); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x380000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x70002600000L, active6, 0L);
      case 49:
         if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 354, 117);
         break;
      case 50:
         if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 355, 117);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x80000000000800L, active3, 0L, active4, 0L, active5, 0x81000000L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x30000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 275, 117);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0x2000000000000L, active4, 0x40000000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 117);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 117);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 125, 117);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 126, 117);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 191, 113);
         else if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 343, 117);
         else if ((active6 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 390, 113);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 77, 113);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 105, 113);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 138, 117);
         else if ((active6 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 445, 113);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 136, 117);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L, active2, 0x1000L, active3, 0x1000000000000010L, active4, 0L, active5, 0x40L, active6, 0x80000L);
      case 76:
      case 108:
         if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 332, 113);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 92, 117);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 134, 117);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4080000003eL, active2, 0x20000000000000L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0x80L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0x4L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000L, active1, 0L, active2, 0x200000008L, active3, 0L, active4, 0L, active5, 0x4100000L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 113);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 222, 117);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 272, 113);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 294, 113);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x802000002000000L, active1, 0x1000000008400080L, active2, 0x80L, active3, 0x2000000L, active4, 0x100008L, active5, 0L, active6, 0x800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000L, active2, 0x20L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x30000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 49:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 117);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 360, 117);
         break;
      case 50:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 96, 117);
         else if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 361, 117);
         break;
      case 51:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 97, 117);
         else if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 362, 117);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 113);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 124, 117);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 130, 117);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 133, 117);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 135, 117);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 310, 117);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1008400000L, active2, 0L, active3, 0x2000000L, active4, 0x8L, active5, 0x1000000000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000c0000L, active1, 0x800008080L, active2, 0L, active3, 0x2000000000000L, active4, 0x1L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 88, 117);
         break;
      case 76:
      case 108:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 181, 117);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000L);
      case 77:
      case 109:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 131, 117);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000040L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 106, 113);
         else if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 346, 117);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3eL, active2, 0x1000L, active3, 0x400000L, active4, 0x80000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x1000000000000010L, active4, 0L, active5, 0x100000L, active6, 0x800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 49, 117);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 179, 117);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 228, 117);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2600000L, active6, 0L);
      case 84:
      case 116:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 145, 113);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x3eL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 368, 113);
         else if ((active6 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 391, 113);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 117);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 344, 117);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000L, active6, 0x80000L);
      case 71:
      case 103:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 140, 117);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0x2600040L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 161, 117);
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 340, 117);
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 86, 117);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 196, 113);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 252, 113);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x808008000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 217, 117);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 259, 117);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 100, 113);
         break;
      case 84:
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 139, 117);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 194, 117);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000400000L, active4, 0x80100000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 129, 117);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L, active6, 0x800000L);
      case 68:
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 85, 117);
         else if ((active6 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 403, 117);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000400000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 79, 113);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x3cL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 59, 113);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 71, 113);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 351, 117);
         break;
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 99, 117);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 326, 117);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2600000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x3cL, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 241, 117);
         break;
      case 69:
      case 101:
         if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 341, 117);
         else if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 342, 117);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 345, 117);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x800000L);
      case 76:
      case 108:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(13, 256, 117);
         break;
      case 78:
      case 110:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 183, 113);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 214, 117);
         break;
      case 83:
      case 115:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 91, 117);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 276, 117);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, active4, active5, active6, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(14, 66, 117);
         break;
      case 50:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(14, 67, 117);
         break;
      case 51:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(14, 68, 117);
         break;
      case 52:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(14, 69, 117);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 407, 117);
         return jjMoveStringLiteralDfa15_0(active0, 0x30000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(14, 287, 117);
         break;
      case 82:
      case 114:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 242, 117);
         else if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 348, 117);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, active4, active5, active6, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 16, 117);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(15, 17, 117);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(18, 19, 117);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 112;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 116:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 4:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 9:
                  if ((0x800000100001200L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(8);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 13)
                     jjAddStates(4, 5);
                  break;
               case 115:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 34)
                  {
                     if (kind > 487)
                        kind = 487;
                  }
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 117:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 114:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                  {
                     if (kind > 487)
                        kind = 487;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 466)
                        kind = 466;
                     jjCheckNAddStates(12, 20);
                  }
                  else if ((0x800000100001200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(21, 24);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 46)
                     jjCheckNAddStates(25, 27);
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 13)
                     jjAddStates(28, 29);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 113:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  else if (curChar == 47)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(34, 36);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  else if (curChar == 45)
                     jjCheckNAddStates(41, 43);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 60);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 56);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 466)
                        kind = 466;
                     jjCheckNAdd(105);
                  }
                  break;
               case 5:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 0:
                  if ((0x800000100001200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffbfffffffdbffL & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 3:
                  if (curChar == 46 && kind > 4)
                     kind = 4;
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAddStates(25, 27);
                  break;
               case 8:
                  if ((0x800000100001200L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 10:
               case 21:
                  if (curChar == 32)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddStates(46, 48);
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 13:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(0, 3);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 20:
                  if (curChar == 32)
                     jjCheckNAddStates(49, 54);
                  break;
               case 22:
               case 23:
               case 25:
               case 28:
               case 32:
                  if (curChar == 32)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(0, 3);
                  break;
               case 38:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 13)
                     jjAddStates(4, 5);
                  break;
               case 40:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  break;
               case 41:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 42:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3fe000000000000L & l) != 0L && kind > 465)
                     kind = 465;
                  break;
               case 44:
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L && kind > 465)
                     kind = 465;
                  break;
               case 46:
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 47:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 49:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 34 && kind > 487)
                     kind = 487;
                  break;
               case 51:
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 54:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 39 && kind > 487)
                     kind = 487;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 488)
                     kind = 488;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 488)
                     kind = 488;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if (curChar != 47)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
                  if ((0x3ff800000000000L & l) == 0L)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if ((0x3ff800000000000L & l) == 0L)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 65:
                  if (curChar == 34)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 34 && kind > 461)
                     kind = 461;
                  break;
               case 68:
                  if (curChar == 39)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 39 && kind > 461)
                     kind = 461;
                  break;
               case 71:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(21, 24);
                  break;
               case 72:
               case 83:
                  if (curChar == 32)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if (curChar == 42)
                     jjCheckNAddStates(55, 57);
                  break;
               case 74:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 75:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(21, 24);
                  break;
               case 76:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 82:
                  if (curChar == 32)
                     jjCheckNAddStates(58, 63);
                  break;
               case 84:
               case 85:
               case 87:
               case 90:
               case 94:
                  if (curChar == 32)
                     jjCheckNAdd(83);
                  break;
               case 86:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar != 10)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(21, 24);
                  break;
               case 100:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 13)
                     jjAddStates(28, 29);
                  break;
               case 102:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 103:
                  if (curChar == 10)
                     jjCheckNAddStates(21, 24);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 466)
                     kind = 466;
                  jjCheckNAddStates(12, 20);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 466)
                     kind = 466;
                  jjCheckNAdd(105);
                  break;
               case 106:
                  if (curChar == 45)
                     jjCheckNAddStates(41, 43);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 56);
                  break;
               case 109:
                  if (curChar == 45)
                     jjCheckNAddStates(34, 36);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 116:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 4:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 115:
               case 47:
                  jjCheckNAddStates(6, 8);
                  break;
               case 117:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 114:
               case 52:
                  jjCheckNAddStates(9, 11);
                  break;
               case 6:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(64, 65);
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 113:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 112:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 95)
                     jjCheckNAddStates(34, 36);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 95)
                     jjCheckNAddStates(41, 43);
                  break;
               case 5:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                  {
                     if (kind > 489)
                        kind = 489;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 488)
                        kind = 488;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 12:
                  jjAddStates(46, 48);
                  break;
               case 14:
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 488)
                     kind = 488;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 488)
                     kind = 488;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 488)
                     kind = 488;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x7fffffe17fffffeL & l) == 0L)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
                  if ((0x7fffffe17fffffeL & l) == 0L)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if ((0x7fffffe17fffffeL & l) == 0L)
                     break;
                  if (kind > 489)
                     kind = 489;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 74:
                  jjAddStates(55, 57);
                  break;
               case 76:
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 106:
                  if (curChar == 95)
                     jjCheckNAddStates(41, 43);
                  break;
               case 109:
                  if (curChar == 95)
                     jjCheckNAddStates(34, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 115:
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 114:
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(46, 48);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 57);
                  break;
               case 76:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 14, 11, 20, 40, 41, 47, 49, 50, 52, 54, 55, 105, 106, 108, 56, 
   109, 111, 60, 110, 107, 72, 76, 73, 82, 8, 9, 39, 102, 103, 106, 108, 
   56, 107, 109, 60, 110, 109, 111, 60, 110, 106, 56, 107, 2, 3, 12, 13, 
   38, 21, 22, 24, 27, 31, 36, 74, 75, 100, 83, 84, 86, 89, 93, 98, 
   65, 68, 66, 67, 69, 70, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\100", null, null, "\41\41", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\66\66", "\67\67", "\70\70", null, null, "\55", "\50", "\51", "\72", 
"\56", "\54", "\42\42", "\42", "\47\47", "\47", "\53", "\52", "\57", "\44", "\74\75", 
"\74", "\76\75", "\76", "\75", "\137", null, null, null, "\52\52", "\74\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[112];
private final int[] jjstateSet = new int[224];
protected char curChar;
public CobolParserTokenManager(CharStream stream){
   input_stream = stream;
}
public CobolParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 112; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.startOffset = input_stream.getBeginPosition() - 1;
   t.endOffset = input_stream.getEndPosition();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
