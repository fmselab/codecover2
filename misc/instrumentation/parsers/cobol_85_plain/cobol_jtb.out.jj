//
// Generated by JTB 1.3.2
//

options {
   IGNORE_CASE = true;
   LOOKAHEAD = 20;
}

PARSER_BEGIN(CobolParser)
package org.codecover.instrumentation.cobol85.parser;

import org.codecover.instrumentation.cobol85.NodeCounter;
import org.codecover.instrumentation.cobol85.syntaxtree.*;
import java.util.Vector;


public class CobolParser 
{
   private static NodeCounter nodeCounter = NodeCounter.getInstance();
   private static boolean countCondition = true;
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(CobolParser)

SPECIAL_TOKEN :
{
   <EOL: "\n" | "\r" | "\r\n">
   | <SPACECHAR: (" " | "\t" | "\f" | ";")+>
   | <EJECT: "eject">
   | <COPY: "copy" (~["\n", "\r", "."])* ".">
}

SPECIAL_TOKEN :
{
   <COMMENT: <EOL> ((" " | "  " | "   " | "    " | "     " | "      " | "       " | (~["\n", "\r"]) (~["\n", "\r"]) (~["\n", "\r"]) (~["\n", "\r"]) (~["\n", "\r"]) (~["\n", "\r"]))? "*" (~["\n", "\r"])* <EOL>)+>
}

TOKEN :
{
   <DOT: <DOTCHAR> (<COMMENT> | <SPACECHAR> | <EOL>)>
}

TOKEN :
{
   <ACCEPT: "accept">
   | <ACCESS: "access">
   | <ADD: "add">
   | <ADDRESS: "address">
   | <ADVANCING: "advancing">
   | <AFTER: "after">
   | <ALL: "all">
   | <ALPHABET: "alphabet">
   | <ALPHABETIC: "alphabetic">
   | <ALPHABETIC_LOWER: "alphabetic-lower">
   | <ALPHABETIC_UPPER: "alphabetic-upper">
   | <ALPHANUMERIC: "alphanumeric">
   | <ALPHANUMERIC_EDITED: "alphanumeric-edited">
   | <ALSO: "also">
   | <ALTER: "alter">
   | <ALTERNATE: "alternate">
   | <AND: "and">
   | <ANY: "any">
   | <APPROXIMATE: "approximate">
   | <ARE: "are">
   | <AREA: "area">
   | <AREAS: "areas">
   | <ASCENDING: "ascending">
   | <ASSIGN: "assign">
   | <AT: "at">
   | <AUTHOR: "author">
   | <BEFORE: "before">
   | <BEGIN: "begin">
   | <BEGINNING: "beginning">
   | <BINARY: "binary">
   | <BLANK: "blank">
   | <BLOCK: "block">
   | <BOTTOM: "bottom">
   | <BY: "by">
   | <CALL: "call">
   | <CANCEL: "cancel">
   | <CD: "cd">
   | <CF: "cf">
   | <CH: "ch">
   | <CHARACTER: "character">
   | <CHARACTERS: "characters">
   | <CLASS: "class">
   | <CLOCK_UNITS: "clock-units">
   | <CLOSE: "close">
   | <COBOL: "cobol">
   | <CODE: "code">
   | <CODE_SET: "code-set">
   | <COLLATING: "collating">
   | <COLUMN: "column">
   | <COMMA: "comma">
   | <COMMIT: "commit">
   | <COMMON: "common">
   | <COMMUNICATION: "communication">
   | <COMP: "comp">
   | <COMP_1: "comp-1">
   | <COMP_2: "comp-2">
   | <COMP_3: "comp-3">
   | <COMP_4: "comp-4">
   | <COMPUTATIONAL: "computational">
   | <COMPUTATIONAL_1: "computational-1">
   | <COMPUTATIONAL_2: "computational-2">
   | <COMPUTATIONAL_3: "computational-3">
   | <COMPUTATIONAL_4: "computational-4">
   | <COMPUTE: "compute">
   | <CONFIGURATION: "configuration">
   | <CONTAINS: "contains">
   | <CONTENT: "content">
   | <CONTINUE: "continue">
   | <CONTROL: "control">
   | <CONTROLS: "controls">
   | <CONVERTING: "converting">
   | <CORR: "corr">
   | <CORRESPONDING: "corresponding">
   | <COUNT: "count">
   | <CURRENCY: "currency">
   | <D: "d">
   | <DATA: "data">
   | <DATE: "date">
   | <DATE_COMPILED: "date-compiled">
   | <DATE_WRITTEN: "date-written">
   | <DAY: "day">
   | <DAY_OF_WEEK: "day-of-week">
   | <DBCS: "dbcs">
   | <DE: "de">
   | <DEBUG_CONTENTS: "debug-contents">
   | <DEBUG_ITEM: "debug-item">
   | <DEBUG_LINE: "debug-line">
   | <DEBUG_NAME: "debug-name">
   | <DEBUG_SUB_1: "debug-sub-1">
   | <DEBUG_SUB_2: "debug-sub-2">
   | <DEBUG_SUB_3: "debug-sub-3">
   | <DEBUGGING: "debugging">
   | <DECIMAL_POINT: "decimal-point">
   | <DECLARATIVES: "declaratives">
   | <DELETE: "delete">
   | <DELIMITED: "delimited">
   | <DELIMITER: "delimiter">
   | <DEPENDING: "depending">
   | <DESCENDING: "descending">
   | <DESTINATION: "destination">
   | <DETAIL: "detail">
   | <DISABLE: "disable">
   | <DISPLAY: "display">
   | <DISPLAY_1: "display-1">
   | <DIVIDE: "divide">
   | <DIVISION: "division">
   | <DOWN: "down">
   | <DUPLICATES: "duplicates">
   | <DYNAMIC: "dynamic">
   | <EGCS: "egcs">
   | <EGI: "egi">
   | <ELSE: "else">
   | <EMI: "emi">
   | <ENABLE: "enable">
   | <END: "end">
   | <END_ADD: "end-add">
   | <END_CALL: "end-call">
   | <END_COMPUTE: "end-compute">
   | <END_DELETE: "end-delete">
   | <END_DIVIDE: "end-divide">
   | <END_EVALUATE: "end-evaluate">
   | <END_IF: "end-if">
   | <END_MULTIPLY: "end-multiply">
   | <END_OF_PAGE: "end-of-page">
   | <END_PERFORM: "end-perform">
   | <END_READ: "end-read">
   | <END_RECEIVE: "end-receive">
   | <END_RETURN: "end-return">
   | <END_REWRITE: "end-rewrite">
   | <END_SEARCH: "end-search">
   | <END_START: "end-start">
   | <END_STRING: "end-string">
   | <END_SUBTRACT: "end-subtract">
   | <END_UNSTRING: "end-unstring">
   | <END_WRITE: "end-write">
   | <ENDING: "endinf">
   | <ENTER: "enter">
   | <ENTRY: "entry">
   | <ENVIRONMENT: "environment">
   | <EOP: "eop">
   | <EQUAL: "equal">
   | <ERROR: "error">
   | <ESI: "esi">
   | <EVALUATE: "evaluate">
   | <EVERY: "every">
   | <EXCEPTION: "exception">
   | <EXCLUSIVE: "exclusive">
   | <EXIT: "exit">
   | <EXEC: "exec">
   | <EXTEND: "extend">
   | <EXTERNAL: "external">
   | <FALSE: "false">
   | <FD: "fd">
   | <FILE: "file">
   | <FILE_CONTROL: "file-control">
   | <FILLER: "filler">
   | <FINAL: "final">
   | <FIRST: "first">
   | <FOOTING: "footing">
   | <FOR: "for">
   | <FROM: "from">
   | <FUNCTION: "function">
   | <GENERATE: "generate">
   | <GOBACK: "goback">
   | <GENERIC: "generic">
   | <GIVING: "giving">
   | <GLOBAL: "global">
   | <GO: "go">
   | <GREATER: "greater">
   | <GROUP: "group">
   | <HEADING: "heading">
   | <HIGH_VALUE: "high-value">
   | <HIGH_VALUES: "high-values">
   | <I_O: "i-o">
   | <I_O_CONTROL: "i-o-control">
   | <ID: "id">
   | <IDENTIFICATION: "identification">
   | <IF: "if">
   | <IMPLICIT: "implicit">
   | <IN: "in">
   | <INDEX: "index">
   | <INDEXED: "indexed">
   | <INDICATE: "indicate">
   | <INITIAL: "initial">
   | <INITIALIZE: "initialize">
   | <INITIATE: "initiate">
   | <INPUT: "input">
   | <INPUT_OUTPUT: "input-output">
   | <INSPECT: "inspect">
   | <INSTALLATION: "installation">
   | <INTO: "into">
   | <INVALID: "invalid">
   | <IS: "is">
   | <JUST: "just">
   | <JUSTIFIED: "justified">
   | <JUSTIFY: "justify">
   | <KANJI: "kanji">
   | <KEY: "key">
   | <LABEL: "label">
   | <LAST: "last">
   | <LEADING: "leading">
   | <LEFT: "left">
   | <LENGTH: "length">
   | <LESS: "less">
   | <LIMIT: "limit">
   | <LIMITS: "limits">
   | <LINAGE: "linage">
   | <LINAGE_COUNTER: "linage_counter">
   | <LINE: "line">
   | <LINES: "lines">
   | <LINE_COUNTER: "line-counter">
   | <LINKAGE: "linkage">
   | <LOCK: "lock">
   | <LOCKFILE: "lockfile">
   | <LOW_VALUE: "low-value">
   | <LOW_VALUES: "low-values">
   | <MEMORY: "memory">
   | <MERGE: "merge">
   | <MESSAGE: "message">
   | <MODE: "mode">
   | <MODULES: "modules">
   | <MORE_LABELS: "more-labels">
   | <MOVE: "move">
   | <MULTIPLE: "multiple">
   | <MULTIPLY: "multiply">
   | <NATIVE: "native">
   | <NEGATIVE: "negative">
   | <NEXT: "next">
   | <NO: "no">
   | <NOT: "not">
   | <NULL: "null">
   | <NULLS: "nulls">
   | <NUMBER: "number">
   | <NUMERIC: "numeric">
   | <NUMERIC_EDITED: "numeric-edited">
   | <OBJECT_COMPUTER: "object-computer">
   | <OCCURS: "occurs">
   | <OF: "of">
   | <OFF: "off">
   | <OMITTED: "omitted">
   | <ON: "on">
   | <OPEN: "open">
   | <OPTIONAL: "optional">
   | <OR: "or">
   | <ORDER: "order">
   | <ORGANIZATION: "organization">
   | <OTHER: "other">
   | <OUTPUT: "output">
   | <OVERFLOW: "overflow">
   | <PACKED_DECIMAL: "packed-decimal">
   | <PADDING: "padding">
   | <PAGE: "page">
   | <PAGE_COUNTER: "page-counter">
   | <PASSWORD: "password">
   | <PERFORM: "perform">
   | <PF: "pf">
   | <PH: "ph">
   | <PIC: "pic">
   | <PICTURE: "picture">
   | <PLUS: "plus">
   | <POINTER: "pointer">
   | <POSITION: "position">
   | <POSITIVE: "positive">
   | <PRINTING: "printing">
   | <PROCEDURE: "procedure">
   | <PROCEDURES: "procedures">
   | <PROCEED: "proceed">
   | <PROGRAM: "program">
   | <PROGRAM_ID: "program-id">
   | <PROGRAM_STATUS: "program-status">
   | <PROMPT: "prompt">
   | <PROTECTED: "protected">
   | <PURGE: "purge">
   | <QUEUE: "queue">
   | <QUOTE: "quote">
   | <QUOTES: "quotes">
   | <RANDOM: "random">
   | <RD: "rd">
   | <READ: "read">
   | <RECEIVE: "receive">
   | <RECEIVE_CONTROL: "receive-control">
   | <RECORD: "record">
   | <RECORDING: "recording">
   | <RECORDS: "records">
   | <REDEFINES: "redefines">
   | <REEL: "reel">
   | <REFERENCE: "reference">
   | <REFERENCES: "references">
   | <RELATIVE: "relative">
   | <RELEASE: "release">
   | <REMAINDER: "remainder">
   | <REMOVAL: "removal">
   | <RENAMES: "renames">
   | <REPLACE: "replace">
   | <REPLACING: "replacing">
   | <REPLY: "reply">
   | <REPORT: "report">
   | <REPORTING: "reporting">
   | <REPORTS: "reports">
   | <RERUN: "rerun">
   | <RESERVE: "reserve">
   | <RESET: "reset">
   | <RETURN: "return">
   | <RETURN_CODE: "return-code">
   | <RETURNED: "returned">
   | <REVERSED: "reversed">
   | <REWIND: "rewind">
   | <REWRITE: "rewrite">
   | <RF: "rf">
   | <RH: "rh">
   | <RIGHT: "right">
   | <ROUNDED: "rounded">
   | <RUN: "run">
   | <SAME: "same">
   | <SD: "sd">
   | <SEARCH: "search">
   | <SECTION: "section">
   | <SECURITY: "security">
   | <SEGMENT: "segment">
   | <SEGMENT_LIMIT: "segment-limit">
   | <SELECT: "select">
   | <SEND: "send">
   | <SENTENCE: "sentence">
   | <SEPARATE: "separate">
   | <SEQUENCE: "sequence">
   | <SEQUENTIAL: "sequential">
   | <SET: "set">
   | <SHARED: "shared">
   | <SHIFT_IN: "shift-in">
   | <SHIFT_OUT: "shift-out">
   | <SIGN: "sign">
   | <SIZE: "size">
   | <SORT: "sort">
   | <SORT_CONTROL: "sort-control">
   | <SORT_CORE_SIZE: "sort-core-size">
   | <SORT_FILE_SIZE: "sort-file-size">
   | <SORT_MERGE: "sort-merge">
   | <SORT_MESSAGE: "sort-message">
   | <SORT_MODE_SIZE: "sort-mode-size">
   | <SORT_RETURN: "sort-return">
   | <SOURCE: "source">
   | <SOURCE_COMPUTER: "source-computer">
   | <SPACE: "space">
   | <SPACES: "spaces">
   | <SPECIAL_NAMES: "special-names">
   | <SQL: "sql">
   | <STANDARD: "standard">
   | <STANDARD_1: "standard-1">
   | <STANDARD_2: "standard-2">
   | <START: "start">
   | <STATUS: "status">
   | <STOP: "stop">
   | <STRING: "string">
   | <SUB_QUEUE_1: "sub-queue-1">
   | <SUB_QUEUE_2: "sub-queue-2">
   | <SUB_QUEUE_3: "sub-queue-3">
   | <SUBTRACT: "subtract">
   | <SUM: "sum">
   | <SUPPRESS: "suppress">
   | <SYMBOLIC: "symbolic">
   | <SYNC: "sync">
   | <SYNCHRONIZED: "synchronized">
   | <TABLE: "table">
   | <TALLY: "tally">
   | <TALLYING: "tallying">
   | <TAPE: "tape">
   | <TERMINAL: "terminal">
   | <TERMINATE: "terminate">
   | <TEST: "test">
   | <TEXT: "text">
   | <THAN: "than">
   | <THEN: "then">
   | <THROUGH: "through">
   | <THRU: "thru">
   | <TIME: "time">
   | <TIMES: "times">
   | <TO: "to">
   | <TOP: "top">
   | <TRAILING: "trailing">
   | <TRUE: "true">
   | <TYPE: "type">
   | <UNIT: "unit">
   | <UNLOCK: "unlock">
   | <UNLOCKFILE: "unlockfile">
   | <UNLOCKRECORD: "unlockrecord">
   | <UNSTRING: "unstring">
   | <UNTIL: "until">
   | <UP: "up">
   | <UPON: "upon">
   | <USAGE: "usage">
   | <USE: "use">
   | <USING: "using">
   | <VALUE: "value">
   | <VALUES: "values">
   | <VARYING: "varying">
   | <WHEN: "when">
   | <WHEN_COMPILED: "when-compiled">
   | <WITH: "with">
   | <WORDS: "words">
   | <WORK: "work">
   | <WORKING_STORAGE: "working-storage">
   | <WRITE: "write">
   | <ZERO: "zero">
   | <ZEROS: "zeros">
   | <ZEROES: "zeroes">
}

TOKEN :
{
   <DECLARE: "declare">
   | <CURSOR: "cursor">
   | <DISTINCT: "distinct">
   | <WHERE: "where">
   | <UNION: "union">
   | <EXISTS: "exists">
   | <INCLUDE: "include">
   | <END_EXEC: "end-exec">
   | <ATCHAR: "@">
   | <CHAR: "char">
   | <SUBSTR: "substr">
   | <DOUBLEEXCLAMATIONMARK: "!!">
   | <YEAR: "year">
   | <MONTH: "month">
   | <DIGITS: "digits">
   | <BETWEEN: "between">
   | <HAVING: "having">
   | <ASC: "asc">
   | <DESC: "desc">
   | <MONTHS: "months">
   | <YEARS: "years">
   | <DAYS: "days">
   | <UPDATE: "update">
   | <LIKE: "like">
   | <MIN: "min">
   | <MAX: "max">
   | <HOLD: "hold">
   | <FETCH: "fetch">
   | <ONLY: "only">
   | <INNER: "inner">
   | <JOIN: "join">
   | <CICS: "cics">
   | <SQLERROR: "sqlerror">
   | <SQLWARNING: "sqlwarning">
   | <FOUND: "found">
   | <WHENEVER: "whenever">
   | <HANDLE: "handle">
   | <LINK: "link">
   | <SYNCPOINT: "syncpoint">
   | <COMMAREA: "commarea">
   | <CURRENT: "current">
   | <INSERT: "insert">
   | <APPLID: "applid">
   | <ASKTIME: "asktime">
   | <TIMESTAMP: "timestamp">
   | <ABCODE: "abcode">
   | <ABEND: "abend">
   | <REQID: "reqid">
   | <TRANSID: "transid">
}

TOKEN :
{
   <HEXNUMBER: ("X\"" (["0"-"9", "a"-"f"])+ "\"" | "X'" (["0"-"9", "a"-"f"])+ "'")>
   | <LEVEL_66: "66">
   | <LEVEL_77: "77">
   | <LEVEL_88: "88">
   | <LEVEL_NUMBER: (("0" ["1"-"9"]) | (["1"-"4"] ["0"-"9"]))>
   | <INTEGER: (["0"-"9"])+>
   | <MINUSCHAR: "-">
   | <LPARENCHAR: "(">
   | <RPARENCHAR: ")">
   | <COLONCHAR: ":">
   | <DOTCHAR: ".">
   | <COMMACHAR: ",">
   | <DOUBLEDQUOTECHAR: "\"\"">
   | <QUOTECHAR: "\"">
   | <DOUBLEDAPOSTROPHE: "''">
   | <APOSTROPHE: "'">
   | <PLUSCHAR: "+">
   | <ASTERISKCHAR: "*">
   | <SLASHCHAR: "/">
   | <DOLLARCHAR: "$">
   | <LESSTHANOREQUAL: "<=">
   | <LESSTHANCHAR: "<">
   | <MORETHANOREQUAL: ">=">
   | <MORETHANCHAR: ">">
   | <EQUALCHAR: "=">
   | <UNDERSCORE: "_">
   | <QUOTEDSTRING: (<QUOTECHAR> (~["\""] | <DOUBLEDQUOTECHAR>)* <QUOTECHAR> | <APOSTROPHE> (~["'"] | <DOUBLEDAPOSTROPHE>)* <APOSTROPHE>)>
   | <COBOL_WORD: ((["0"-"9"])+ (<MINUSCHAR> | <UNDERSCORE>)*)* (["0"-"9"])* ["a"-"z"] (["a"-"z", "0"-"9"])* ((<MINUSCHAR> | <UNDERSCORE>)+ (["a"-"z", "0"-"9"])+)*>
   | <COBOL_WORD_WITH_SLASH: ((["0"-"9"])+ (<MINUSCHAR> | <UNDERSCORE>)*)* (["0"-"9"])* ["a"-"z", "/", "\\"] (["a"-"z", "0"-"9", "/", "\\"])* ((<MINUSCHAR> | <UNDERSCORE>)+ (["a"-"z", "0"-"9", "/", "\\"])+)*>
}

CobolWord CobolWord() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<COBOL_WORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CobolWord(n0); }
}

IntegerConstant IntegerConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<LEVEL_66> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LEVEL_77> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LEVEL_88> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LEVEL_NUMBER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<INTEGER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new IntegerConstant(n0); }
}

NumericConstant NumericConstant() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   IntegerConstant n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   IntegerConstant n14;

   
}
{
   (
      (
         n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   n6=IntegerConstant()
   (
      { n8 = new NodeSequence(2); }
      (
         (
            n11=<DOTCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9 = new NodeChoice(n10, 0); }
         |
            n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n9 = new NodeChoice(n12, 1); }
         )
         
      )
      { n8.addNode(n9); }
      n14=IntegerConstant()
      { n8.addNode(n14); }
      { n7.addNode(n8); }
   )?
   
   { return new NumericConstant(n0,n6,n7); }
}

LevelNumber LevelNumber() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<LEVEL_NUMBER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LevelNumber(n0); }
}

FigurativeConstant FigurativeConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      n2=<ZERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<ZEROS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ZEROES> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<SPACE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<SPACES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HIGH_VALUE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<HIGH_VALUES> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LOW_VALUE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<LOW_VALUES> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<QUOTE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<QUOTES> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<NULL> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NULLS> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   )
   
   { return new FigurativeConstant(n0); }
}

NonNumericConstant NonNumericConstant() :
{
   NodeChoice n0;
   NodeList n1 = new NodeList();
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      (
         (
            n3=<QUOTEDSTRING> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1.addNode(n2); }
         )+
         { n1.nodes.trimToSize(); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n5=<HEXNUMBER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n0 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new NonNumericConstant(n0); }
}

Literal Literal() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NonNumericConstant n4;
   NumericConstant n5;
   FigurativeConstant n6;

   
}
{
   (
      n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=NonNumericConstant()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=NumericConstant()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=FigurativeConstant()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new Literal(n0,n3); }
}

Condition Condition() :
{
   CombinableCondition n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   CombinableCondition n9;
   AbbreviationRest n10;

   
}
{
   n0=CombinableCondition()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<AND> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      (
         (
            n9=CombinableCondition()
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=AbbreviationRest()
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Condition(n0,n1); }
}

CombinableCondition CombinableCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   SimpleCondition n3;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=SimpleCondition()
   
   { return new CombinableCondition(n0,n3); }
}

SimpleCondition SimpleCondition() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   RelationCondition n7;
   ClassCondition n8;
   ConditionNameCondition n9;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=Condition()
         { n1.addNode(n4); }
         n6=<RPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n7=RelationCondition()
         { n0 = new NodeChoice(n7, 1); }
      |
         n8=ClassCondition()
         { n0 = new NodeChoice(n8, 2); }
      |
         n9=ConditionNameCondition()
         { n0 = new NodeChoice(n9, 3); }
      )
      
   )
   
   { return new SimpleCondition(n0); }
}

ClassCondition ClassCondition() :
{
   Identifier n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   ClassName n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   if ( countCondition )
      nodeCounter.incrementBasicBooleanCounter();
}
{
   n0=Identifier()
   (
      n3=<IS> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      n6=<NOT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      (
         n9=<NUMERIC> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<ALPHABETIC> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<ALPHABETIC_LOWER> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      |
         n15=<ALPHABETIC_UPPER> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n7 = new NodeChoice(n14, 3); }
      |
         n16=ClassName()
         { n7 = new NodeChoice(n16, 4); }
      |
         n18=<DBCS> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n7 = new NodeChoice(n17, 5); }
      |
         n20=<KANJI> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n7 = new NodeChoice(n19, 6); }
      )
      
   )
   
   { return new ClassCondition(n0,n1,n4,n7); }
}

ConditionNameCondition ConditionNameCondition() :
{
   ConditionNameReference n0;

   if ( countCondition )
      nodeCounter.incrementBasicBooleanCounter();
}
{
   n0=ConditionNameReference()
   
   { return new ConditionNameCondition(n0); }
}

RelationCondition RelationCondition() :
{
   ArithmeticExpression n0;
   NodeChoice n1;
   NodeSequence n2;
   RelationalOperator n3;
   NodeChoice n4;
   ArithmeticExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ArithmeticExpression n9;
   NodeList n10 = new NodeList();
   NodeSequence n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   AbbreviationRest n17;
   NodeToken n18;
   Token n19;
   SignCondition n20;

   if ( countCondition )
      nodeCounter.incrementBasicBooleanCounter();
}
{
   n0=ArithmeticExpression()
   (
      (
         { n2 = new NodeSequence(2); }
         n3=RelationalOperator()
         { n2.addNode(n3); }
         (
            (
               n5=ArithmeticExpression()
               { n4 = new NodeChoice(n5, 0); }
            |
               { n6 = new NodeSequence(4); }
               n8=<LPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6.addNode(n7); }
               n9=ArithmeticExpression()
               { n6.addNode(n9); }
               (
                  { n11 = new NodeSequence(2); }
                  (
                     (
                        n14=<AND> { n13 = JTBToolkit.makeNodeToken(n14); }
                        { n12 = new NodeChoice(n13, 0); }
                     |
                        n16=<OR> { n15 = JTBToolkit.makeNodeToken(n16); }
                        { n12 = new NodeChoice(n15, 1); }
                     )
                     
                  )
                  { n11.addNode(n12); }
                  n17=AbbreviationRest()
                  { n11.addNode(n17); }
                  { n10.addNode(n11); }
               )+
               { n10.nodes.trimToSize(); }
               { n6.addNode(n10); }
               n19=<RPARENCHAR> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n6.addNode(n18); }
               { n4 = new NodeChoice(n6, 1); }
            )
            
         )
         { n2.addNode(n4); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n20=SignCondition()
         { n1 = new NodeChoice(n20, 1); }
      )
      
   )
   
   { return new RelationCondition(n0,n1); }
}

SignCondition SignCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<POSITIVE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<NEGATIVE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<ZERO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      )
      
   )
   
   { return new SignCondition(n0,n3,n6); }
}

RelationalOperator RelationalOperator() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43 = new NodeOptional();
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeOptional n51 = new NodeOptional();
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         { n4 = new NodeSequence(2); }
         (
            n7=<NOT> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5.addNode(n6); }
         )?
         { n4.addNode(n5); }
         (
            (
               { n9 = new NodeSequence(2); }
               n11=<GREATER> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9.addNode(n10); }
               (
                  n14=<THAN> { n13 = JTBToolkit.makeNodeToken(n14); }
                  { n12.addNode(n13); }
               )?
               { n9.addNode(n12); }
               { n8 = new NodeChoice(n9, 0); }
            |
               n16=<MORETHANCHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n8 = new NodeChoice(n15, 1); }
            |
               { n17 = new NodeSequence(2); }
               n19=<LESS> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n17.addNode(n18); }
               (
                  n22=<THAN> { n21 = JTBToolkit.makeNodeToken(n22); }
                  { n20.addNode(n21); }
               )?
               { n17.addNode(n20); }
               { n8 = new NodeChoice(n17, 2); }
            |
               n24=<LESSTHANCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n8 = new NodeChoice(n23, 3); }
            |
               { n25 = new NodeSequence(2); }
               n27=<EQUAL> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n25.addNode(n26); }
               (
                  n30=<TO> { n29 = JTBToolkit.makeNodeToken(n30); }
                  { n28.addNode(n29); }
               )?
               { n25.addNode(n28); }
               { n8 = new NodeChoice(n25, 4); }
            |
               n32=<EQUALCHAR> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n8 = new NodeChoice(n31, 5); }
            )
            
         )
         { n4.addNode(n8); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n33 = new NodeSequence(5); }
         n35=<GREATER> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         (
            n38=<THAN> { n37 = JTBToolkit.makeNodeToken(n38); }
            { n36.addNode(n37); }
         )?
         { n33.addNode(n36); }
         n40=<OR> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n33.addNode(n39); }
         n42=<EQUAL> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n33.addNode(n41); }
         (
            n45=<TO> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n33.addNode(n43); }
         { n3 = new NodeChoice(n33, 1); }
      |
         n47=<MORETHANOREQUAL> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n3 = new NodeChoice(n46, 2); }
      |
         { n48 = new NodeSequence(5); }
         n50=<LESS> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
         (
            n53=<THAN> { n52 = JTBToolkit.makeNodeToken(n53); }
            { n51.addNode(n52); }
         )?
         { n48.addNode(n51); }
         n55=<OR> { n54 = JTBToolkit.makeNodeToken(n55); }
         { n48.addNode(n54); }
         n57=<EQUAL> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n48.addNode(n56); }
         (
            n60=<TO> { n59 = JTBToolkit.makeNodeToken(n60); }
            { n58.addNode(n59); }
         )?
         { n48.addNode(n58); }
         { n3 = new NodeChoice(n48, 3); }
      |
         n62=<LESSTHANOREQUAL> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n3 = new NodeChoice(n61, 4); }
      )
      
   )
   
   { return new RelationalOperator(n0,n3); }
}

AbbreviationRest AbbreviationRest() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeOptional n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   RelationalOperator n6;
   AbbreviationLeaf n7;

   
}
{
   (
      { n2 = new NodeOptional(); }
      { n5 = new NodeOptional(); }
      { n1 = new NodeSequence(3); }
      (
         n4=<NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      (
         n6=RelationalOperator()
         { n5.addNode(n6); }
      )?
      { n1.addNode(n5); }
      n7=AbbreviationLeaf()
      { n1.addNode(n7); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new AbbreviationRest(n0); }
}

AbbreviationLeaf AbbreviationLeaf() :
{
   NodeChoice n0;
   ArithmeticExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ArithmeticExpression n5;
   AbbreviationRest n6;
   NodeToken n7;
   Token n8;

   if ( countCondition )
      nodeCounter.incrementBasicBooleanCounter();
}
{
   (
      (
         n1=ArithmeticExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(4); }
         n4=<LPARENCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=ArithmeticExpression()
         { n2.addNode(n5); }
         n6=AbbreviationRest()
         { n2.addNode(n6); }
         n8=<RPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2.addNode(n7); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new AbbreviationLeaf(n0); }
}

ProcedureName ProcedureName() :
{
   NodeChoice n0;
   NodeSequence n1;
   ParagraphName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SectionName n10;
   SectionName n11;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=ParagraphName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=SectionName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n11=SectionName()
         { n0 = new NodeChoice(n11, 1); }
      )
      
   )
   
   { return new ProcedureName(n0); }
}

Identifier Identifier() :
{
   NodeChoice n0;
   NodeSequence n1;
   QualifiedDataName n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Subscript n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   LeftmostCharacterPosition n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17;
   Length n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeChoice n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   FileName n31;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n2=QualifiedDataName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(3); }
            n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=Subscript()
            { n4.addNode(n7); }
            n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n4.addNode(n8); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n1.addNode(n3); }
         (
            { n17 = new NodeOptional(); }
            { n11 = new NodeSequence(5); }
            n13=<LPARENCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            n14=LeftmostCharacterPosition()
            { n11.addNode(n14); }
            n16=<COLONCHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n11.addNode(n15); }
            (
               n18=Length()
               { n17.addNode(n18); }
            )?
            { n11.addNode(n17); }
            n20=<RPARENCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n11.addNode(n19); }
            { n10.addNode(n11); }
         )?
         { n1.addNode(n10); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n21 = new NodeSequence(2); }
         n23=<LINAGE_COUNTER> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         (
            { n25 = new NodeSequence(2); }
            (
               (
                  n28=<IN> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26 = new NodeChoice(n27, 0); }
               |
                  n30=<OF> { n29 = JTBToolkit.makeNodeToken(n30); }
                  { n26 = new NodeChoice(n29, 1); }
               )
               
            )
            { n25.addNode(n26); }
            n31=FileName()
            { n25.addNode(n31); }
            { n24.addNode(n25); }
         )?
         { n21.addNode(n24); }
         { n0 = new NodeChoice(n21, 1); }
      )
      
   )
   
   { return new Identifier(n0); }
}

QualifiedDataName QualifiedDataName() :
{
   NodeChoice n0;
   NodeSequence n1;
   DataName n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   DataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   FileName n18;
   SpecialRegister n19;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n2=DataName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=DataName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n1.addNode(n3); }
         (
            { n12 = new NodeSequence(2); }
            (
               (
                  n15=<IN> { n14 = JTBToolkit.makeNodeToken(n15); }
                  { n13 = new NodeChoice(n14, 0); }
               |
                  n17=<OF> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n13 = new NodeChoice(n16, 1); }
               )
               
            )
            { n12.addNode(n13); }
            n18=FileName()
            { n12.addNode(n18); }
            { n11.addNode(n12); }
         )?
         { n1.addNode(n11); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n19=SpecialRegister()
         { n0 = new NodeChoice(n19, 1); }
      )
      
   )
   
   { return new QualifiedDataName(n0); }
}

Length Length() :
{
   ArithmeticExpression n0;

   
}
{
   n0=ArithmeticExpression()
   
   { return new Length(n0); }
}

LeftmostCharacterPosition LeftmostCharacterPosition() :
{
   ArithmeticExpression n0;

   
}
{
   n0=ArithmeticExpression()
   
   { return new LeftmostCharacterPosition(n0); }
}

ConditionNameReference ConditionNameReference() :
{
   ConditionName n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   DataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   FileName n18;
   NodeListOptional n19 = new NodeListOptional();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   Subscript n23;
   NodeToken n24;
   Token n25;
   NodeListOptional n26 = new NodeListOptional();
   NodeSequence n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   MnemonicName n33;

   
}
{
   n0=ConditionName()
   (
      (
         { n2 = new NodeSequence(3); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=DataName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n2.addNode(n3); }
         (
            { n12 = new NodeSequence(2); }
            (
               (
                  n15=<IN> { n14 = JTBToolkit.makeNodeToken(n15); }
                  { n13 = new NodeChoice(n14, 0); }
               |
                  n17=<OF> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n13 = new NodeChoice(n16, 1); }
               )
               
            )
            { n12.addNode(n13); }
            n18=FileName()
            { n12.addNode(n18); }
            { n11.addNode(n12); }
         )?
         { n2.addNode(n11); }
         (
            { n20 = new NodeSequence(3); }
            n22=<LPARENCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
            n23=Subscript()
            { n20.addNode(n23); }
            n25=<RPARENCHAR> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n20.addNode(n24); }
            { n19.addNode(n20); }
         )*
         { n19.nodes.trimToSize(); }
         { n2.addNode(n19); }
         { n1 = new NodeChoice(n2, 0); }
      |
         (
            { n27 = new NodeSequence(2); }
            (
               (
                  n30=<IN> { n29 = JTBToolkit.makeNodeToken(n30); }
                  { n28 = new NodeChoice(n29, 0); }
               |
                  n32=<OF> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n28 = new NodeChoice(n31, 1); }
               )
               
            )
            { n27.addNode(n28); }
            n33=MnemonicName()
            { n27.addNode(n33); }
            { n26.addNode(n27); }
         )*
         { n26.nodes.trimToSize(); }
         { n1 = new NodeChoice(n26, 1); }
      )
      
   )
   
   { return new ConditionNameReference(n0,n1); }
}

Subscript Subscript() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeChoice n2;
   IntegerConstant n3;
   NodeSequence n4;
   QualifiedDataName n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   IntegerConstant n13;
   NodeSequence n14;
   IndexName n15;
   NodeOptional n16;
   NodeSequence n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   IntegerConstant n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      { n6 = new NodeOptional(); }
      { n16 = new NodeOptional(); }
      { n24 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         (
            n3=IntegerConstant()
            { n2 = new NodeChoice(n3, 0); }
         |
            { n4 = new NodeSequence(2); }
            n5=QualifiedDataName()
            { n4.addNode(n5); }
            (
               { n7 = new NodeSequence(2); }
               (
                  (
                     n10=<PLUSCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
                     { n8 = new NodeChoice(n9, 0); }
                  |
                     n12=<MINUSCHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
                     { n8 = new NodeChoice(n11, 1); }
                  )
                  
               )
               { n7.addNode(n8); }
               n13=IntegerConstant()
               { n7.addNode(n13); }
               { n6.addNode(n7); }
            )?
            { n4.addNode(n6); }
            { n2 = new NodeChoice(n4, 1); }
         |
            { n14 = new NodeSequence(2); }
            n15=IndexName()
            { n14.addNode(n15); }
            (
               { n17 = new NodeSequence(2); }
               (
                  (
                     n20=<PLUSCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
                     { n18 = new NodeChoice(n19, 0); }
                  |
                     n22=<MINUSCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
                     { n18 = new NodeChoice(n21, 1); }
                  )
                  
               )
               { n17.addNode(n18); }
               n23=IntegerConstant()
               { n17.addNode(n23); }
               { n16.addNode(n17); }
            )?
            { n14.addNode(n16); }
            { n2 = new NodeChoice(n14, 2); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n26=<COMMACHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n1.addNode(n24); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Subscript(n0); }
}

Mode Mode() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new Mode(n0); }
}

AlphabetName AlphabetName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new AlphabetName(n0); }
}

ClassName ClassName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ClassName(n0); }
}

ConditionName ConditionName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ConditionName(n0); }
}

DataName DataName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new DataName(n0); }
}

FileName FileName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new FileName(n0); }
}

IndexName IndexName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new IndexName(n0); }
}

MnemonicName MnemonicName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new MnemonicName(n0); }
}

RecordName RecordName() :
{
   QualifiedDataName n0;

   
}
{
   n0=QualifiedDataName()
   
   { return new RecordName(n0); }
}

RoutineName RoutineName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new RoutineName(n0); }
}

SymbolicCharacter SymbolicCharacter() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new SymbolicCharacter(n0); }
}

LibraryName LibraryName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new LibraryName(n0); }
}

ProgramName ProgramName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ProgramName(n0); }
}

SectionName SectionName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new SectionName(n0); }
}

ParagraphName ParagraphName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ParagraphName(n0); }
}

SystemName SystemName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new SystemName(n0); }
}

ComputerName ComputerName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new ComputerName(n0); }
}

LanguageName LanguageName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new LanguageName(n0); }
}

EnvironmentName EnvironmentName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new EnvironmentName(n0); }
}

AssignmentName AssignmentName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new AssignmentName(n0); }
}

BasisName BasisName() :
{
   ProgramName n0;

   
}
{
   n0=ProgramName()
   
   { return new BasisName(n0); }
}

SpecialRegister SpecialRegister() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   DataName n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<ADDRESS> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<OF> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=DataName()
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8=<DEBUG_ITEM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n9 = new NodeSequence(3); }
         n11=<LENGTH> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13=<OF> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         n14=Identifier()
         { n9.addNode(n14); }
         { n0 = new NodeChoice(n9, 2); }
      |
         n16=<RETURN_CODE> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 3); }
      |
         n18=<SHIFT_OUT> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 4); }
      |
         n20=<SHIFT_IN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 5); }
      |
         n22=<SORT_CONTROL> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 6); }
      |
         n24=<SORT_CORE_SIZE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 7); }
      |
         n26=<SORT_FILE_SIZE> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 8); }
      |
         n28=<SORT_MESSAGE> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 9); }
      |
         n30=<SORT_MODE_SIZE> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n0 = new NodeChoice(n29, 10); }
      |
         n32=<SORT_RETURN> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n0 = new NodeChoice(n31, 11); }
      |
         n34=<TALLY> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n0 = new NodeChoice(n33, 12); }
      |
         n36=<WHEN_COMPILED> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n0 = new NodeChoice(n35, 13); }
      )
      
   )
   
   { return new SpecialRegister(n0); }
}

ArithmeticExpression ArithmeticExpression() :
{
   TimesDiv n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   TimesDiv n8;

   
}
{
   n0=TimesDiv()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<PLUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<MINUSCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=TimesDiv()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArithmeticExpression(n0,n1); }
}

TimesDiv TimesDiv() :
{
   Power n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Power n8;

   
}
{
   n0=Power()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<ASTERISKCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASHCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=Power()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TimesDiv(n0,n1); }
}

Power Power() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Basis n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Basis n11;

   
}
{
   (
      (
         (
            n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1 = new NodeChoice(n2, 0); }
         |
            n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n1 = new NodeChoice(n4, 1); }
         )
         
      )
      { n0.addNode(n1); }
   )?
   n6=Basis()
   (
      { n8 = new NodeSequence(2); }
      n10="**" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=Basis()
      { n8.addNode(n11); }
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   
   { return new Power(n0,n6,n7); }
}

Basis Basis() :
{
   NodeChoice n0;
   Identifier n1;
   Literal n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ArithmeticExpression n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      (
         n1=Identifier()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Literal()
         { n0 = new NodeChoice(n2, 1); }
      |
         { n3 = new NodeSequence(3); }
         n5=<LPARENCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=ArithmeticExpression()
         { n3.addNode(n6); }
         n8=<RPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new Basis(n0); }
}

CommentLine CommentLine() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeChoice n2;
   NodeList n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      { n3 = new NodeList(); }
      { n1 = new NodeSequence(2); }
      (
         (
            (
               n5=<COBOL_WORD_WITH_SLASH> { n4 = JTBToolkit.makeNodeToken(n5); }
               { n3.addNode(n4); }
            )+
            { n3.nodes.trimToSize(); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n7=<QUOTEDSTRING> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n2 = new NodeChoice(n6, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n1.addNode(n8); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new CommentLine(n0); }
}

CompilationUnit CompilationUnit() :
{
   ProgramUnit n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NestedProgramUnit n3;
   EndProgramStatement n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   EndProgramStatement n7;
   NodeListOptional n8;
   CompilationUnit n9;
   NodeToken n10;
   Token n11;

   
}
{
   n0=ProgramUnit()
   (
      { n2 = new NodeSequence(2); }
      n3=NestedProgramUnit()
      { n2.addNode(n3); }
      n4=EndProgramStatement()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      { n8 = new NodeListOptional(); }
      { n6 = new NodeSequence(2); }
      n7=EndProgramStatement()
      { n6.addNode(n7); }
      (
         n9=CompilationUnit()
         { n8.addNode(n9); }
      )*
      { n8.nodes.trimToSize(); }
      { n6.addNode(n8); }
      { n5.addNode(n6); }
   )?
   n11=<EOF> { 
      n11.beginColumn++; n11.endColumn++;
      n10 = JTBToolkit.makeNodeToken(n11);
   }
   
   { return new CompilationUnit(n0,n1,n5,n10); }
}

ProgramUnit ProgramUnit() :
{
   IdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;

   
}
{
   n0=IdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   
   {
      nodeCounter.newProgramUnit();
   }
   
   
   { return new ProgramUnit(n0,n1,n3,n5); }
}

NestedProgramUnit NestedProgramUnit() :
{
   NestedIdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;

   
}
{
   n0=NestedIdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   
   { return new NestedProgramUnit(n0,n1,n3,n5); }
}

EndProgramStatement EndProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<END> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new EndProgramStatement(n0,n2,n4,n5); }
}

IdentificationDivision IdentificationDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   ProgramIdParagraph n6;
   NodeListOptional n7 = new NodeListOptional();
   IdentificationDivisionParagraph n8;

   
}
{
   n1=<IDENTIFICATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=ProgramIdParagraph()
   (
      n8=IdentificationDivisionParagraph()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   
   { return new IdentificationDivision(n0,n2,n4,n6,n7); }
}

NestedIdentificationDivision NestedIdentificationDivision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NestedProgramIdParagraph n9;
   NodeListOptional n10 = new NodeListOptional();
   IdentificationDivisionParagraph n11;

   
}
{
   (
      (
         n2=<IDENTIFICATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<DIVISION> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=NestedProgramIdParagraph()
   (
      n11=IdentificationDivisionParagraph()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
   { return new NestedIdentificationDivision(n0,n5,n7,n9,n10); }
}

IdentificationDivisionParagraph IdentificationDivisionParagraph() :
{
   NodeChoice n0;
   AuthorParagraph n1;
   InstallationParagraph n2;
   DateWrittenParagraph n3;
   DateCompiledParagraph n4;
   SecurityParagraph n5;

   
}
{
   (
      n1=AuthorParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=InstallationParagraph()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DateWrittenParagraph()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DateCompiledParagraph()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SecurityParagraph()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new IdentificationDivisionParagraph(n0); }
}

ProgramIdParagraph ProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n12 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<INITIAL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      (
         n14=<PROGRAM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n16=<DOT> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new ProgramIdParagraph(n0,n2,n4,n5,n15); }
}

NestedProgramIdParagraph NestedProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   InitialOrCommon n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n11 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n10=InitialOrCommon()
      { n6.addNode(n10); }
      (
         n13=<PROGRAM> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
      )?
      { n6.addNode(n11); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new NestedProgramIdParagraph(n0,n2,n4,n5,n14); }
}

InitialOrCommon InitialOrCommon() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<INITIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<COMMON> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<COMMON> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<INITIAL> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   
   { return new InitialOrCommon(n0); }
}

AuthorParagraph AuthorParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<AUTHOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new AuthorParagraph(n0,n2,n4); }
}

InstallationParagraph InstallationParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<INSTALLATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new InstallationParagraph(n0,n2,n4); }
}

DateWrittenParagraph DateWrittenParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<DATE_WRITTEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new DateWrittenParagraph(n0,n2,n4); }
}

DateCompiledParagraph DateCompiledParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<DATE_COMPILED> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new DateCompiledParagraph(n0,n2,n4); }
}

SecurityParagraph SecurityParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<SECURITY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new SecurityParagraph(n0,n2,n4); }
}

EnvironmentDivision EnvironmentDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   EnvironmentSection n7;

   
}
{
   n1=<ENVIRONMENT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=EnvironmentSection()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new EnvironmentDivision(n0,n2,n4,n6); }
}

EnvironmentSection EnvironmentSection() :
{
   NodeChoice n0;
   ConfigurationSection n1;
   InputOutputSection n2;

   
}
{
   (
      n1=ConfigurationSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=InputOutputSection()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EnvironmentSection(n0); }
}

ConfigurationSection ConfigurationSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   ConfigurationSectionParagraph n7;

   
}
{
   n1=<CONFIGURATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ConfigurationSectionParagraph()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new ConfigurationSection(n0,n2,n4,n6); }
}

ConfigurationSectionParagraph ConfigurationSectionParagraph() :
{
   NodeChoice n0;
   SourceComputerParagraph n1;
   ObjectComputerParagraph n2;
   SpecialNamesParagraph n3;

   
}
{
   (
      n1=SourceComputerParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ObjectComputerParagraph()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SpecialNamesParagraph()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ConfigurationSectionParagraph(n0); }
}

SourceComputerParagraph SourceComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<SOURCE_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      { n7 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<WITH> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<DEBUGGING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      n13=<MODE> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new SourceComputerParagraph(n0,n2,n4,n5,n14); }
}

ObjectComputerParagraph ObjectComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeListOptional n5 = new NodeListOptional();
   ObjectComputerClause n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<OBJECT_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      n6=ObjectComputerClause()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ObjectComputerParagraph(n0,n2,n4,n5,n7); }
}

ObjectComputerClause ObjectComputerClause() :
{
   NodeChoice n0;
   MemorySizeClause n1;
   CollatingSequenceClause n2;
   SegmentLimitClause n3;
   CharacterSetClause n4;

   
}
{
   (
      n1=MemorySizeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CollatingSequenceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SegmentLimitClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=CharacterSetClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new ObjectComputerClause(n0); }
}

MemorySizeClause MemorySizeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   IntegerConstant n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<MEMORY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIZE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=IntegerConstant()
   (
      (
         n9=<WORDS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<CHARACTERS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<MODULES> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      )
      { n6.addNode(n7); }
   )?
   
   { return new MemorySizeClause(n0,n2,n5,n6); }
}

CollatingSequenceClause CollatingSequenceClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   AlphabetName n11;

   
}
{
   (
      n2=<PROGRAM> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<COLLATING> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<SEQUENCE> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=AlphabetName()
   
   { return new CollatingSequenceClause(n0,n3,n6,n8,n11); }
}

SegmentLimitClause SegmentLimitClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   IntegerConstant n7;

   
}
{
   n1=<SEGMENT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LIMIT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=IntegerConstant()
   
   { return new SegmentLimitClause(n0,n2,n4,n7); }
}

CharacterSetClause CharacterSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<CHARACTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SET> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new CharacterSetClause(n0,n2,n4); }
}

SpecialNamesParagraph SpecialNamesParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   SpecialNameClause n6;
   NodeListOptional n7;
   SpecialNameClause n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<SPECIAL_NAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeListOptional(); }
      { n5 = new NodeSequence(3); }
      n6=SpecialNameClause()
      { n5.addNode(n6); }
      (
         n8=SpecialNameClause()
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n5.addNode(n7); }
      n10=<DOT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )?
   
   { return new SpecialNamesParagraph(n0,n2,n4); }
}

SpecialNameClause SpecialNameClause() :
{
   NodeChoice n0;
   AlphabetClause n1;
   ClassClause n2;
   CurrencySignClause n3;
   DecimalPointClause n4;
   SymbolicCharactersClause n5;
   EnvironmentNameIsMnemonicNameClause n6;

   
}
{
   (
      n1=AlphabetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CurrencySignClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DecimalPointClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SymbolicCharactersClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=EnvironmentNameIsMnemonicNameClause()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new SpecialNameClause(n0); }
}

AlphabetClause AlphabetClause() :
{
   NodeToken n0;
   Token n1;
   AlphabetName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   CobolWord n13;
   NodeList n14 = new NodeList();
   NodeSequence n15;
   Literal n16;
   NodeOptional n17;
   NodeChoice n18;
   NodeSequence n19;
   NodeChoice n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Literal n25;
   NodeList n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   Literal n30;

   
}
{
   n1=<ALPHABET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AlphabetName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<STANDARD_1> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<STANDARD_2> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<NATIVE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      |
         n13=CobolWord()
         { n6 = new NodeChoice(n13, 3); }
      |
         (
            { n17 = new NodeOptional(); }
            { n15 = new NodeSequence(2); }
            n16=Literal()
            { n15.addNode(n16); }
            (
               { n26 = new NodeList(); }
               (
                  (
                     { n19 = new NodeSequence(2); }
                     (
                        (
                           n22=<THROUGH> { n21 = JTBToolkit.makeNodeToken(n22); }
                           { n20 = new NodeChoice(n21, 0); }
                        |
                           n24=<THRU> { n23 = JTBToolkit.makeNodeToken(n24); }
                           { n20 = new NodeChoice(n23, 1); }
                        )
                        
                     )
                     { n19.addNode(n20); }
                     n25=Literal()
                     { n19.addNode(n25); }
                     { n18 = new NodeChoice(n19, 0); }
                  |
                     (
                        { n27 = new NodeSequence(2); }
                        n29=<ALSO> { n28 = JTBToolkit.makeNodeToken(n29); }
                        { n27.addNode(n28); }
                        n30=Literal()
                        { n27.addNode(n30); }
                        { n26.addNode(n27); }
                     )+
                     { n26.nodes.trimToSize(); }
                     { n18 = new NodeChoice(n26, 1); }
                  )
                  
               )
               { n17.addNode(n18); }
            )?
            { n15.addNode(n17); }
            { n14.addNode(n15); }
         )+
         { n14.nodes.trimToSize(); }
         { n6 = new NodeChoice(n14, 4); }
      )
      
   )
   
   { return new AlphabetClause(n0,n2,n3,n6); }
}

ClassClause ClassClause() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   Literal n8;
   NodeOptional n9;
   NodeSequence n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Literal n16;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n9 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      n8=Literal()
      { n7.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         (
            (
               n13=<THROUGH> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n15=<THRU> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n11 = new NodeChoice(n14, 1); }
            )
            
         )
         { n10.addNode(n11); }
         n16=Literal()
         { n10.addNode(n16); }
         { n9.addNode(n10); }
      )?
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )+
   { n6.nodes.trimToSize(); }
   
   { return new ClassClause(n0,n2,n3,n6); }
}

CurrencySignClause CurrencySignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Literal n8;

   
}
{
   n1=<CURRENCY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIGN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Literal()
   
   { return new CurrencySignClause(n0,n2,n5,n8); }
}

DecimalPointClause DecimalPointClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<DECIMAL_POINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new DecimalPointClause(n0,n2,n5); }
}

SymbolicCharactersClause SymbolicCharactersClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeSequence n6;
   NodeList n7;
   SymbolicCharacter n8;
   NodeOptional n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeList n15;
   IntegerConstant n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   AlphabetName n21;

   
}
{
   n1=<SYMBOLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTERS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n7 = new NodeList(); }
      { n9 = new NodeOptional(); }
      { n15 = new NodeList(); }
      { n6 = new NodeSequence(3); }
      (
         n8=SymbolicCharacter()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n6.addNode(n7); }
      (
         (
            (
               n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<IS> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            )
            
         )
         { n9.addNode(n10); }
      )?
      { n6.addNode(n9); }
      (
         n16=IntegerConstant()
         { n15.addNode(n16); }
      )+
      { n15.nodes.trimToSize(); }
      { n6.addNode(n15); }
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   (
      { n18 = new NodeSequence(2); }
      n20=<IN> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=AlphabetName()
      { n18.addNode(n21); }
      { n17.addNode(n18); }
   )?
   
   { return new SymbolicCharactersClause(n0,n2,n5,n17); }
}

EnvironmentNameIsMnemonicNameClause EnvironmentNameIsMnemonicNameClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   EnvironmentName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   MnemonicName n6;
   NodeOptional n7 = new NodeOptional();
   SpecialNamesParagraphStatusPhrase n8;
   SpecialNamesParagraphStatusPhrase n9;

   
}
{
   (
      (
         { n1 = new NodeSequence(4); }
         n2=EnvironmentName()
         { n1.addNode(n2); }
         (
            n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         n6=MnemonicName()
         { n1.addNode(n6); }
         (
            n8=SpecialNamesParagraphStatusPhrase()
            { n7.addNode(n8); }
         )?
         { n1.addNode(n7); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n9=SpecialNamesParagraphStatusPhrase()
         { n0 = new NodeChoice(n9, 1); }
      )
      
   )
   
   { return new EnvironmentNameIsMnemonicNameClause(n0); }
}

SpecialNamesParagraphStatusPhrase SpecialNamesParagraphStatusPhrase() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   Condition n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   Condition n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   Condition n31;
   NodeOptional n32 = new NodeOptional();
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   Condition n42;

   
}
{
   (
      (
         { n1 = new NodeSequence(5); }
         n3=<ON> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<STATUS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         (
            n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n1.addNode(n7); }
         n10=Condition()
         { n1.addNode(n10); }
         (
            { n15 = new NodeOptional(); }
            { n18 = new NodeOptional(); }
            { n12 = new NodeSequence(4); }
            n14=<OFF> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
            (
               n17=<STATUS> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
            )?
            { n12.addNode(n15); }
            (
               n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
            )?
            { n12.addNode(n18); }
            n21=Condition()
            { n12.addNode(n21); }
            { n11.addNode(n12); }
         )?
         { n1.addNode(n11); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n22 = new NodeSequence(5); }
         n24=<OFF> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            n27=<STATUS> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n22.addNode(n25); }
         (
            n30=<IS> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n22.addNode(n28); }
         n31=Condition()
         { n22.addNode(n31); }
         (
            { n36 = new NodeOptional(); }
            { n39 = new NodeOptional(); }
            { n33 = new NodeSequence(4); }
            n35=<ON> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
            (
               n38=<STATUS> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n36.addNode(n37); }
            )?
            { n33.addNode(n36); }
            (
               n41=<IS> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39.addNode(n40); }
            )?
            { n33.addNode(n39); }
            n42=Condition()
            { n33.addNode(n42); }
            { n32.addNode(n33); }
         )?
         { n22.addNode(n32); }
         { n0 = new NodeChoice(n22, 1); }
      )
      
   )
   
   { return new SpecialNamesParagraphStatusPhrase(n0); }
}

InputOutputSection InputOutputSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   InputOutputSectionParagraph n7;

   
}
{
   n1=<INPUT_OUTPUT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=InputOutputSectionParagraph()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new InputOutputSection(n0,n2,n4,n6); }
}

InputOutputSectionParagraph InputOutputSectionParagraph() :
{
   NodeChoice n0;
   FileControlParagraph n1;
   IOControlParagraph n2;

   
}
{
   (
      n1=FileControlParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IOControlParagraph()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new InputOutputSectionParagraph(n0); }
}

FileControlParagraph FileControlParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   FileControlEntry n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<FILE_CONTROL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      n7=FileControlEntry()
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new FileControlParagraph(n0,n2,n8); }
}

FileControlEntry FileControlEntry() :
{
   SelectClause n0;
   AssignClause n1;
   NodeListOptional n2 = new NodeListOptional();
   FileControlClause n3;

   
}
{
   n0=SelectClause()
   n1=AssignClause()
   (
      n3=FileControlClause()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new FileControlEntry(n0,n1,n2); }
}

FileControlClause FileControlClause() :
{
   NodeChoice n0;
   ReserveClause n1;
   OrganizationClause n2;
   PaddingCharacterClause n3;
   RecordDelimiterClause n4;
   AccessModeClause n5;
   AlternateRecordKeyClause n6;
   FileStatusClause n7;
   PasswordClause n8;

   
}
{
   (
      n1=ReserveClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OrganizationClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PaddingCharacterClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RecordDelimiterClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=AccessModeClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=AlternateRecordKeyClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=FileStatusClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=PasswordClause()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new FileControlClause(n0); }
}

SelectClause SelectClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   FileName n5;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<OPTIONAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=FileName()
   
   { return new SelectClause(n0,n2,n5); }
}

AssignClause AssignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   AssignmentName n6;
   Literal n7;

   
}
{
   n1=<ASSIGN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=AssignmentName()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=Literal()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   
   { return new AssignClause(n0,n2,n5); }
}

ReserveClause ReserveClause() :
{
   NodeToken n0;
   Token n1;
   IntegerConstant n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<RESERVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerConstant()
   (
      (
         n5=<AREA> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<AREAS> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      
   )
   
   { return new ReserveClause(n0,n2,n3); }
}

OrganizationClause OrganizationClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   SequentialOrganizationClause n7;
   LineSequentialOrganizationClause n8;
   RelativeOrganizationClause n9;
   IndexedOrganizationClause n10;

   
}
{
   (
      n2=<ORGANIZATION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n7=SequentialOrganizationClause()
         { n6 = new NodeChoice(n7, 0); }
      |
         n8=LineSequentialOrganizationClause()
         { n6 = new NodeChoice(n8, 1); }
      |
         n9=RelativeOrganizationClause()
         { n6 = new NodeChoice(n9, 2); }
      |
         n10=IndexedOrganizationClause()
         { n6 = new NodeChoice(n10, 3); }
      )
      
   )
   
   { return new OrganizationClause(n0,n3,n6); }
}

SequentialOrganizationClause SequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SequentialOrganizationClause(n0); }
}

LineSequentialOrganizationClause LineSequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<LINE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SEQUENTIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new LineSequentialOrganizationClause(n0,n2); }
}

RelativeOrganizationClause RelativeOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new RelativeOrganizationClause(n0); }
}

IndexedOrganizationClause IndexedOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INDEXED> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IndexedOrganizationClause(n0); }
}

PaddingCharacterClause PaddingCharacterClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   QualifiedDataName n9;
   Literal n10;

   
}
{
   n1=<PADDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=QualifiedDataName()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
   { return new PaddingCharacterClause(n0,n2,n5,n8); }
}

RecordDelimiterClause RecordDelimiterClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AssignmentName n12;

   
}
{
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DELIMITER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      (
         n9=<STANDARD_1> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<IMPLICIT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n12=AssignmentName()
         { n7 = new NodeChoice(n12, 2); }
      )
      
   )
   
   { return new RecordDelimiterClause(n0,n2,n4,n7); }
}

AccessModeClause AccessModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SequentialAccessMode n9;
   RandomAccessMode n10;
   DynamicAccessMode n11;

   
}
{
   n1=<ACCESS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=SequentialAccessMode()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=RandomAccessMode()
         { n8 = new NodeChoice(n10, 1); }
      |
         n11=DynamicAccessMode()
         { n8 = new NodeChoice(n11, 2); }
      )
      
   )
   
   { return new AccessModeClause(n0,n2,n5,n8); }
}

SequentialAccessMode SequentialAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new SequentialAccessMode(n0,n2); }
}

RandomAccessMode RandomAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<RANDOM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new RandomAccessMode(n0,n2); }
}

DynamicAccessMode DynamicAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<DYNAMIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new DynamicAccessMode(n0,n2); }
}

RelativeKeyClause RelativeKeyClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   QualifiedDataName n8;

   
}
{
   n1=<RELATIVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<KEY> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=QualifiedDataName()
   
   { return new RelativeKeyClause(n0,n2,n5,n8); }
}

AlternateRecordKeyClause AlternateRecordKeyClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   PasswordClause n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
   n1=<ALTERNATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<RECORD> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<KEY> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=QualifiedDataName()
   (
      n12=PasswordClause()
      { n11.addNode(n12); }
   )?
   (
      { n15 = new NodeOptional(); }
      { n14 = new NodeSequence(2); }
      (
         n17=<WITH> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n14.addNode(n15); }
      n19=<DUPLICATES> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n14.addNode(n18); }
      { n13.addNode(n14); }
   )?
   
   { return new AlternateRecordKeyClause(n0,n2,n4,n7,n10,n11,n13); }
}

PasswordClause PasswordClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   DataName n5;

   
}
{
   n1=<PASSWORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=DataName()
   
   { return new PasswordClause(n0,n2,n5); }
}

FileStatusClause FileStatusClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   QualifiedDataName n8;
   NodeOptional n9 = new NodeOptional();
   QualifiedDataName n10;

   
}
{
   (
      n2=<FILE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<STATUS> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=QualifiedDataName()
   (
      n10=QualifiedDataName()
      { n9.addNode(n10); }
   )?
   
   { return new FileStatusClause(n0,n3,n5,n8,n9); }
}

IOControlParagraph IOControlParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   IOControlClause n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   IOControlClause n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<I_O_CONTROL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeListOptional(); }
      { n5 = new NodeSequence(3); }
      n6=IOControlClause()
      { n5.addNode(n6); }
      (
         { n9 = new NodeOptional(); }
         { n8 = new NodeSequence(2); }
         (
            n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n8.addNode(n9); }
         n12=IOControlClause()
         { n8.addNode(n12); }
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n5.addNode(n7); }
      n14=<DOT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n5.addNode(n13); }
      { n4.addNode(n5); }
   )?
   
   { return new IOControlParagraph(n0,n2,n4); }
}

IOControlClause IOControlClause() :
{
   NodeChoice n0;
   RerunClause n1;
   SameAreaClause n2;
   MultipleFileClause n3;

   
}
{
   (
      n1=RerunClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SameAreaClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MultipleFileClause()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new IOControlClause(n0); }
}

RerunClause RerunClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   AssignmentName n7;
   FileName n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   Rerun2 n12;
   NodeSequence n13;
   IntegerConstant n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;

   
}
{
   n1=<RERUN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<ON> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
         (
            n7=AssignmentName()
            { n6 = new NodeChoice(n7, 0); }
         |
            n8=FileName()
            { n6 = new NodeChoice(n8, 1); }
         )
         
      )
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   n10=<EVERY> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      (
         n12=Rerun2()
         { n11 = new NodeChoice(n12, 0); }
      |
         { n13 = new NodeSequence(2); }
         n14=IntegerConstant()
         { n13.addNode(n14); }
         (
            n17=<CLOCK_UNITS> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n13.addNode(n15); }
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   
   { return new RerunClause(n0,n2,n9,n11); }
}

Rerun2 Rerun2() :
{
   NodeChoice n0;
   NodeSequence n1;
   IntegerConstant n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   FileName n19;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=IntegerConstant()
      { n1.addNode(n2); }
      n4=<RECORDS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(5); }
      (
         n8=<END> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n5.addNode(n6); }
      (
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n5.addNode(n9); }
      (
         (
            n14=<REEL> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12 = new NodeChoice(n13, 0); }
         |
            n16=<UNIT> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n12 = new NodeChoice(n15, 1); }
         )
         
      )
      { n5.addNode(n12); }
      n18=<OF> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n5.addNode(n17); }
      n19=FileName()
      { n5.addNode(n19); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new Rerun2(n0); }
}

SameAreaClause SameAreaClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeList n15 = new NodeList();
   FileName n16;

   
}
{
   n1=<SAME> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<RECORD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<SORT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<SORT_MERGE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   (
      n11=<AREA> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   (
      n14=<FOR> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
   )?
   (
      n16=FileName()
      { n15.addNode(n16); }
   )+
   { n15.nodes.trimToSize(); }
   
   { return new SameAreaClause(n0,n2,n9,n12,n15); }
}

MultipleFileClause MultipleFileClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   FileName n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   IntegerConstant n15;

   
}
{
   n1=<MULTIPLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FILE> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<TAPE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      n9=<CONTAINS> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=FileName()
   (
      n13=<POSITION> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   (
      n15=IntegerConstant()
      { n14.addNode(n15); }
   )?
   
   { return new MultipleFileClause(n0,n2,n4,n7,n10,n11,n14); }
}

DataDivision DataDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDivisionSection n7;

   
}
{
   n1=<DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDivisionSection()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new DataDivision(n0,n2,n4,n6); }
}

DataDivisionSection DataDivisionSection() :
{
   NodeChoice n0;
   FileSection n1;
   WorkingStorageSection n2;
   LinkageSection n3;

   
}
{
   (
      n1=FileSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=WorkingStorageSection()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=LinkageSection()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new DataDivisionSection(n0); }
}

FileSection FileSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   FileAndSortDescriptionEntry n8;
   NodeList n9;
   DataDescriptionEntry n10;

   
}
{
   n1=<FILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeList(); }
      { n7 = new NodeSequence(2); }
      n8=FileAndSortDescriptionEntry()
      { n7.addNode(n8); }
      (
         n10=DataDescriptionEntry()
         { n9.addNode(n10); }
      )+
      { n9.nodes.trimToSize(); }
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new FileSection(n0,n2,n4,n6); }
}

FileAndSortDescriptionEntry FileAndSortDescriptionEntry() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FileName n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeOptional n8;
   NodeToken n9;
   Token n10;
   FileAndSortDescriptionEntryClause n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      (
         n2=<FD> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=FileName()
   (
      { n8 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      (
         n10=<DOT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
      )?
      { n7.addNode(n8); }
      n11=FileAndSortDescriptionEntryClause()
      { n7.addNode(n11); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n13=<DOT> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new FileAndSortDescriptionEntry(n0,n5,n6,n12); }
}

FileAndSortDescriptionEntryClause FileAndSortDescriptionEntryClause() :
{
   NodeChoice n0;
   ExternalClause n1;
   GlobalClause n2;
   BlockContainsClause n3;
   RecordContainsClause n4;
   LabelRecordsClause n5;
   ValueOfClause n6;
   DataRecordClause n7;
   LinageClause n8;
   CodeSetClause n9;
   ReportClause n10;
   RecordingModeClause n11;

   
}
{
   (
      n1=ExternalClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GlobalClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BlockContainsClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RecordContainsClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=LabelRecordsClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=ValueOfClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=DataRecordClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=LinageClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=CodeSetClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=ReportClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=RecordingModeClause()
      { n0 = new NodeChoice(n11, 10); }
   )
   
   { return new FileAndSortDescriptionEntryClause(n0); }
}

ExternalClause ExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ExternalClause(n0,n3); }
}

GlobalClause GlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new GlobalClause(n0,n3); }
}

BlockContainsClause BlockContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   IntegerConstant n7;
   NodeToken n8;
   Token n9;
   IntegerConstant n10;
   NodeOptional n11 = new NodeOptional();
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<BLOCK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n6 = new NodeSequence(2); }
      n7=IntegerConstant()
      { n6.addNode(n7); }
      n9=<TO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n6.addNode(n8); }
      { n5.addNode(n6); }
   )?
   n10=IntegerConstant()
   (
      (
         n14=<RECORDS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12 = new NodeChoice(n13, 0); }
      |
         n16=<CHARACTERS> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n12 = new NodeChoice(n15, 1); }
      )
      { n11.addNode(n12); }
   )?
   
   { return new BlockContainsClause(n0,n2,n5,n10,n11); }
}

RecordContainsClause RecordContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   IntegerConstant n9;
   NodeToken n10;
   Token n11;
   IntegerConstant n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   IntegerConstant n33;
   NodeOptional n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   IntegerConstant n38;
   NodeToken n39;
   Token n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45;
   NodeToken n46;
   Token n47;
   QualifiedDataName n48;

   
}
{
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(3); }
         (
            { n8 = new NodeSequence(2); }
            n9=IntegerConstant()
            { n8.addNode(n9); }
            n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n8.addNode(n10); }
            { n7.addNode(n8); }
         )?
         { n6.addNode(n7); }
         n12=IntegerConstant()
         { n6.addNode(n12); }
         (
            n15=<CHARACTERS> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n6.addNode(n13); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n16 = new NodeSequence(6); }
         (
            n19=<IS> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
         )?
         { n16.addNode(n17); }
         n21=<VARYING> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n16.addNode(n20); }
         (
            n24=<IN> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n22.addNode(n23); }
         )?
         { n16.addNode(n22); }
         (
            n27=<SIZE> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n16.addNode(n25); }
         (
            { n30 = new NodeOptional(); }
            { n34 = new NodeOptional(); }
            { n29 = new NodeSequence(4); }
            (
               n32=<FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n30.addNode(n31); }
            )?
            { n29.addNode(n30); }
            n33=IntegerConstant()
            { n29.addNode(n33); }
            (
               { n35 = new NodeSequence(2); }
               n37=<TO> { n36 = JTBToolkit.makeNodeToken(n37); }
               { n35.addNode(n36); }
               n38=IntegerConstant()
               { n35.addNode(n38); }
               { n34.addNode(n35); }
            )?
            { n29.addNode(n34); }
            n40=<CHARACTERS> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n29.addNode(n39); }
            { n28.addNode(n29); }
         )?
         { n16.addNode(n28); }
         (
            { n45 = new NodeOptional(); }
            { n42 = new NodeSequence(3); }
            n44=<DEPENDING> { n43 = JTBToolkit.makeNodeToken(n44); }
            { n42.addNode(n43); }
            (
               n47=<ON> { n46 = JTBToolkit.makeNodeToken(n47); }
               { n45.addNode(n46); }
            )?
            { n42.addNode(n45); }
            n48=QualifiedDataName()
            { n42.addNode(n48); }
            { n41.addNode(n42); }
         )?
         { n16.addNode(n41); }
         { n5 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new RecordContainsClause(n0,n2,n5); }
}

LabelRecordsClause LabelRecordsClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeList n21 = new NodeList();
   DataName n22;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<LABEL> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            { n5 = new NodeSequence(2); }
            n7=<RECORD> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5.addNode(n6); }
            (
               n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
               { n8.addNode(n9); }
            )?
            { n5.addNode(n8); }
            { n4 = new NodeChoice(n5, 0); }
         |
            { n11 = new NodeSequence(2); }
            n13=<RECORDS> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            (
               n16=<ARE> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
            )?
            { n11.addNode(n14); }
            { n4 = new NodeChoice(n11, 1); }
         )
         
      )
      { n1.addNode(n4); }
      n18=<OMITTED> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n1.addNode(n17); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n20=<STANDARD> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 1); }
   |
      (
         n22=DataName()
         { n21.addNode(n22); }
      )+
      { n21.nodes.trimToSize(); }
      { n0 = new NodeChoice(n21, 2); }
   )
   
   { return new LabelRecordsClause(n0); }
}

ValueOfClause ValueOfClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SystemName n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   QualifiedDataName n10;
   Literal n11;

   
}
{
   n1=<VALUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<OF> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(3); }
      n6=SystemName()
      { n5.addNode(n6); }
      n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      (
         (
            n10=QualifiedDataName()
            { n9 = new NodeChoice(n10, 0); }
         |
            n11=Literal()
            { n9 = new NodeChoice(n11, 1); }
         )
         
      )
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
   { return new ValueOfClause(n0,n2,n4); }
}

DataRecordClause DataRecordClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeList n15 = new NodeList();
   DataName n16;

   
}
{
   n1=<DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(2); }
         n11=<RECORDS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            n14=<ARE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      n16=DataName()
      { n15.addNode(n16); }
   )+
   { n15.nodes.trimToSize(); }
   
   { return new DataRecordClause(n0,n2,n15); }
}

LinageClause LinageClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   DataName n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeChoice n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeChoice n22;
   DataName n23;
   IntegerConstant n24;
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   DataName n35;
   IntegerConstant n36;
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeOptional n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeChoice n46;
   DataName n47;
   IntegerConstant n48;

   
}
{
   n1=<LINAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=DataName()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=IntegerConstant()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n10=<LINES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   (
      { n14 = new NodeOptional(); }
      { n19 = new NodeOptional(); }
      { n26 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n41 = new NodeOptional(); }
      (
         { n13 = new NodeSequence(4); }
         (
            n16=<WITH> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
         )?
         { n13.addNode(n14); }
         n18=<FOOTING> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n13.addNode(n17); }
         (
            n21=<AT> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
         )?
         { n13.addNode(n19); }
         (
            (
               n23=DataName()
               { n22 = new NodeChoice(n23, 0); }
            |
               n24=IntegerConstant()
               { n22 = new NodeChoice(n24, 1); }
            )
            
         )
         { n13.addNode(n22); }
         { n12 = new NodeChoice(n13, 0); }
      |
         { n25 = new NodeSequence(4); }
         (
            n28=<LINES> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
         )?
         { n25.addNode(n26); }
         (
            n31=<AT> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n25.addNode(n29); }
         n33=<TOP> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n25.addNode(n32); }
         (
            (
               n35=DataName()
               { n34 = new NodeChoice(n35, 0); }
            |
               n36=IntegerConstant()
               { n34 = new NodeChoice(n36, 1); }
            )
            
         )
         { n25.addNode(n34); }
         { n12 = new NodeChoice(n25, 1); }
      |
         { n37 = new NodeSequence(4); }
         (
            n40=<LINES> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
         )?
         { n37.addNode(n38); }
         (
            n43=<AT> { n42 = JTBToolkit.makeNodeToken(n43); }
            { n41.addNode(n42); }
         )?
         { n37.addNode(n41); }
         n45=<BOTTOM> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n37.addNode(n44); }
         (
            (
               n47=DataName()
               { n46 = new NodeChoice(n47, 0); }
            |
               n48=IntegerConstant()
               { n46 = new NodeChoice(n48, 1); }
            )
            
         )
         { n37.addNode(n46); }
         { n12 = new NodeChoice(n37, 2); }
      )
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   
   { return new LinageClause(n0,n2,n5,n8,n11); }
}

RecordingModeClause RecordingModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Mode n8;

   
}
{
   n1=<RECORDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Mode()
   
   { return new RecordingModeClause(n0,n2,n5,n8); }
}

CodeSetClause CodeSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   AlphabetName n5;

   
}
{
   n1=<CODE_SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=AlphabetName()
   
   { return new CodeSetClause(n0,n2,n5); }
}

ReportClause ReportClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeList n13 = new NodeList();
   QualifiedDataName n14;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<REPORT> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<REPORTS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n14=QualifiedDataName()
      { n13.addNode(n14); }
   )+
   { n13.nodes.trimToSize(); }
   
   { return new ReportClause(n0,n13); }
}

DataDescriptionEntry DataDescriptionEntry() :
{
   NodeChoice n0;
   NodeChoice n1;
   NodeSequence n2;
   LevelNumber n3;
   NodeChoice n4;
   DataName n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   DataDescriptionEntryClause n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   DataName n16;
   RenamesClause n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   DataName n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeListOptional n28 = new NodeListOptional();
   DataDescriptionEntryClause n29;
   NodeToken n30;
   Token n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   ConditionName n35;
   ConditionValueClause n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   ExecSQLStatement n40;
   NodeToken n41;
   Token n42;

   
}
{
   (
      (
         (
            { n2 = new NodeSequence(4); }
            n3=LevelNumber()
            { n2.addNode(n3); }
            (
               (
                  n5=DataName()
                  { n4 = new NodeChoice(n5, 0); }
               |
                  (
                     n8=<FILLER> { n7 = JTBToolkit.makeNodeToken(n8); }
                     { n6.addNode(n7); }
                  )?
                  { n4 = new NodeChoice(n6, 1); }
               )
               
            )
            { n2.addNode(n4); }
            (
               n10=DataDescriptionEntryClause()
               { n9.addNode(n10); }
            )*
            { n9.nodes.trimToSize(); }
            { n2.addNode(n9); }
            n12=<DOT> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n2.addNode(n11); }
            { n1 = new NodeChoice(n2, 0); }
         |
            { n13 = new NodeSequence(4); }
            n15=<LEVEL_66> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
            n16=DataName()
            { n13.addNode(n16); }
            n17=RenamesClause()
            { n13.addNode(n17); }
            n19=<DOT> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n13.addNode(n18); }
            { n1 = new NodeChoice(n13, 1); }
         |
            { n20 = new NodeSequence(4); }
            n22=<LEVEL_77> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
            (
               (
                  n24=DataName()
                  { n23 = new NodeChoice(n24, 0); }
               |
                  (
                     n27=<FILLER> { n26 = JTBToolkit.makeNodeToken(n27); }
                     { n25.addNode(n26); }
                  )?
                  { n23 = new NodeChoice(n25, 1); }
               )
               
            )
            { n20.addNode(n23); }
            (
               n29=DataDescriptionEntryClause()
               { n28.addNode(n29); }
            )*
            { n28.nodes.trimToSize(); }
            { n20.addNode(n28); }
            n31=<DOT> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n20.addNode(n30); }
            { n1 = new NodeChoice(n20, 2); }
         |
            { n32 = new NodeSequence(4); }
            n34=<LEVEL_88> { n33 = JTBToolkit.makeNodeToken(n34); }
            { n32.addNode(n33); }
            n35=ConditionName()
            { n32.addNode(n35); }
            n36=ConditionValueClause()
            { n32.addNode(n36); }
            n38=<DOT> { n37 = JTBToolkit.makeNodeToken(n38); }
            { n32.addNode(n37); }
            { n1 = new NodeChoice(n32, 3); }
         )
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      { n39 = new NodeSequence(2); }
      n40=ExecSQLStatement()
      { n39.addNode(n40); }
      n42=<DOT> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n39.addNode(n41); }
      { n0 = new NodeChoice(n39, 1); }
   )
   
   { return new DataDescriptionEntry(n0); }
}

DataDescriptionEntryClause DataDescriptionEntryClause() :
{
   NodeChoice n0;
   DataPictureClause n1;
   DataValueClause n2;
   DataUsageClause n3;
   DataRedefinesClause n4;
   DataExternalClause n5;
   DataGlobalClause n6;
   DataSignClause n7;
   DataOccursClause n8;
   DataSynchronizedClause n9;
   DataJustifiedClause n10;
   DataBlankWhenZeroClause n11;

   
}
{
   (
      n1=DataPictureClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DataValueClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DataUsageClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DataRedefinesClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=DataExternalClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DataGlobalClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=DataSignClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=DataOccursClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=DataSynchronizedClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=DataJustifiedClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=DataBlankWhenZeroClause()
      { n0 = new NodeChoice(n11, 10); }
   )
   
   { return new DataDescriptionEntryClause(n0); }
}

DataRedefinesClause DataRedefinesClause() :
{
   NodeToken n0;
   Token n1;
   DataName n2;

   
}
{
   n1=<REDEFINES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DataName()
   
   { return new DataRedefinesClause(n0,n2); }
}

DataBlankWhenZeroClause DataBlankWhenZeroClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<BLANK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<WHEN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n7=<ZERO> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<ZEROS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      |
         n11=<ZEROES> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n5 = new NodeChoice(n10, 2); }
      )
      
   )
   
   { return new DataBlankWhenZeroClause(n0,n2,n5); }
}

DataJustifiedClause DataJustifiedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
   (
      (
         n2=<JUSTIFIED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<JUST> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<RIGHT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
   { return new DataJustifiedClause(n0,n5); }
}

DataOccursClause DataOccursClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   IntegerConstant n4;
   NodeToken n5;
   Token n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   QualifiedDataName n18;
   NodeListOptional n19 = new NodeListOptional();
   NodeSequence n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeList n32;
   QualifiedDataName n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeList n41;
   IndexName n42;

   
}
{
   n1=<OCCURS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n4=IntegerConstant()
      { n3.addNode(n4); }
      n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n7=IntegerConstant()
   (
      n10=<TIMES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   (
      { n15 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      n14=<DEPENDING> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      (
         n17=<ON> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n12.addNode(n15); }
      n18=QualifiedDataName()
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      { n26 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n32 = new NodeList(); }
      { n20 = new NodeSequence(4); }
      (
         (
            n23=<ASCENDING> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21 = new NodeChoice(n22, 0); }
         |
            n25=<DESCENDING> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n21 = new NodeChoice(n24, 1); }
         )
         
      )
      { n20.addNode(n21); }
      (
         n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n20.addNode(n26); }
      (
         n31=<IS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n20.addNode(n29); }
      (
         n33=QualifiedDataName()
         { n32.addNode(n33); }
      )+
      { n32.nodes.trimToSize(); }
      { n20.addNode(n32); }
      { n19.addNode(n20); }
   )*
   { n19.nodes.trimToSize(); }
   (
      { n38 = new NodeOptional(); }
      { n41 = new NodeList(); }
      { n35 = new NodeSequence(3); }
      n37=<INDEXED> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      (
         n40=<BY> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n35.addNode(n38); }
      (
         n42=IndexName()
         { n41.addNode(n42); }
      )+
      { n41.nodes.trimToSize(); }
      { n35.addNode(n41); }
      { n34.addNode(n35); }
   )?
   
   { return new DataOccursClause(n0,n2,n7,n8,n11,n19,n34); }
}

DataPictureClause DataPictureClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   PictureString n8;

   
}
{
   (
      (
         n2=<PICTURE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<PIC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=PictureString()
   
   { return new DataPictureClause(n0,n5,n8); }
}

PictureString PictureString() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   PictureCurrency n6;
   NodeList n7 = new NodeList();
   NodeSequence n8;
   NodeList n9;
   PictureChars n10;
   NodeOptional n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   IntegerConstant n15;
   NodeToken n16;
   Token n17;
   NodeListOptional n18 = new NodeListOptional();
   NodeSequence n19;
   PicturePunctuation n20;
   NodeList n21;
   NodeSequence n22;
   NodeList n23;
   PictureChars n24;
   NodeOptional n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   IntegerConstant n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32 = new NodeOptional();
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeList n36;
   NodeSequence n37;
   NodeList n38;
   PictureChars n39;
   NodeOptional n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   IntegerConstant n44;
   NodeToken n45;
   Token n46;
   NodeOptional n47 = new NodeOptional();
   NodeToken n48;
   Token n49;
   NodeSequence n50;
   NodeList n51 = new NodeList();
   NodeToken n52;
   Token n53;
   NodeList n54 = new NodeList();
   NodeSequence n55;
   NodeList n56;
   PictureChars n57;
   NodeOptional n58;
   NodeSequence n59;
   NodeToken n60;
   Token n61;
   IntegerConstant n62;
   NodeToken n63;
   Token n64;

   
}
{
   (
      (
         { n1 = new NodeSequence(6); }
         (
            n4=<PLUSCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2.addNode(n3); }
         )?
         { n1.addNode(n2); }
         (
            n6=PictureCurrency()
            { n5.addNode(n6); }
         )?
         { n1.addNode(n5); }
         (
            { n9 = new NodeList(); }
            { n11 = new NodeOptional(); }
            { n8 = new NodeSequence(2); }
            (
               n10=PictureChars()
               { n9.addNode(n10); }
            )+
            { n9.nodes.trimToSize(); }
            { n8.addNode(n9); }
            (
               { n12 = new NodeSequence(3); }
               n14=<LPARENCHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n15=IntegerConstant()
               { n12.addNode(n15); }
               n17=<RPARENCHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n12.addNode(n16); }
               { n11.addNode(n12); }
            )?
            { n8.addNode(n11); }
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n1.addNode(n7); }
         (
            { n21 = new NodeList(); }
            { n19 = new NodeSequence(2); }
            n20=PicturePunctuation()
            { n19.addNode(n20); }
            (
               { n23 = new NodeList(); }
               { n25 = new NodeOptional(); }
               { n22 = new NodeSequence(2); }
               (
                  n24=PictureChars()
                  { n23.addNode(n24); }
               )+
               { n23.nodes.trimToSize(); }
               { n22.addNode(n23); }
               (
                  { n26 = new NodeSequence(3); }
                  n28=<LPARENCHAR> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
                  n29=IntegerConstant()
                  { n26.addNode(n29); }
                  n31=<RPARENCHAR> { n30 = JTBToolkit.makeNodeToken(n31); }
                  { n26.addNode(n30); }
                  { n25.addNode(n26); }
               )?
               { n22.addNode(n25); }
               { n21.addNode(n22); }
            )+
            { n21.nodes.trimToSize(); }
            { n19.addNode(n21); }
            { n18.addNode(n19); }
         )*
         { n18.nodes.trimToSize(); }
         { n1.addNode(n18); }
         (
            { n36 = new NodeList(); }
            { n33 = new NodeSequence(2); }
            n35=<COMMACHAR> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
            (
               { n38 = new NodeList(); }
               { n40 = new NodeOptional(); }
               { n37 = new NodeSequence(2); }
               (
                  n39=PictureChars()
                  { n38.addNode(n39); }
               )+
               { n38.nodes.trimToSize(); }
               { n37.addNode(n38); }
               (
                  { n41 = new NodeSequence(3); }
                  n43=<LPARENCHAR> { n42 = JTBToolkit.makeNodeToken(n43); }
                  { n41.addNode(n42); }
                  n44=IntegerConstant()
                  { n41.addNode(n44); }
                  n46=<RPARENCHAR> { n45 = JTBToolkit.makeNodeToken(n46); }
                  { n41.addNode(n45); }
                  { n40.addNode(n41); }
               )?
               { n37.addNode(n40); }
               { n36.addNode(n37); }
            )+
            { n36.nodes.trimToSize(); }
            { n33.addNode(n36); }
            { n32.addNode(n33); }
         )?
         { n1.addNode(n32); }
         (
            n49=<MINUSCHAR> { n48 = JTBToolkit.makeNodeToken(n49); }
            { n47.addNode(n48); }
         )?
         { n1.addNode(n47); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n50 = new NodeSequence(2); }
         (
            n53=<MINUSCHAR> { n52 = JTBToolkit.makeNodeToken(n53); }
            { n51.addNode(n52); }
         )+
         { n51.nodes.trimToSize(); }
         { n50.addNode(n51); }
         (
            { n56 = new NodeList(); }
            { n58 = new NodeOptional(); }
            { n55 = new NodeSequence(2); }
            (
               n57=PictureChars()
               { n56.addNode(n57); }
            )+
            { n56.nodes.trimToSize(); }
            { n55.addNode(n56); }
            (
               { n59 = new NodeSequence(3); }
               n61=<LPARENCHAR> { n60 = JTBToolkit.makeNodeToken(n61); }
               { n59.addNode(n60); }
               n62=IntegerConstant()
               { n59.addNode(n62); }
               n64=<RPARENCHAR> { n63 = JTBToolkit.makeNodeToken(n64); }
               { n59.addNode(n63); }
               { n58.addNode(n59); }
            )?
            { n55.addNode(n58); }
            { n54.addNode(n55); }
         )+
         { n54.nodes.trimToSize(); }
         { n50.addNode(n54); }
         
      )
      { n0 = new NodeChoice(n50, 1); }
   )
   
   { return new PictureString(n0); }
}

PicturePunctuation PicturePunctuation() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<SLASHCHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DOTCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<COLONCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new PicturePunctuation(n0); }
}

PictureCurrency PictureCurrency() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<DOLLARCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PictureCurrency(n0); }
}

PictureChars PictureChars() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<INTEGER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<COBOL_WORD> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PictureChars(n0); }
}

DataExternalClause DataExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new DataExternalClause(n0,n3); }
}

DataGlobalClause DataGlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new DataGlobalClause(n0,n3); }
}

DataUsageClause DataUsageClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;

   
}
{
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<USAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n9=<BINARY> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<COMP> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<COMP_1> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      |
         n15=<COMP_2> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n7 = new NodeChoice(n14, 3); }
      |
         n17=<COMP_3> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n7 = new NodeChoice(n16, 4); }
      |
         n19=<COMP_4> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n7 = new NodeChoice(n18, 5); }
      |
         n21=<COMPUTATIONAL> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n7 = new NodeChoice(n20, 6); }
      |
         n23=<COMPUTATIONAL_1> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n7 = new NodeChoice(n22, 7); }
      |
         n25=<COMPUTATIONAL_2> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n7 = new NodeChoice(n24, 8); }
      |
         n27=<COMPUTATIONAL_3> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n7 = new NodeChoice(n26, 9); }
      |
         n29=<COMPUTATIONAL_4> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n7 = new NodeChoice(n28, 10); }
      |
         n31=<DISPLAY> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n7 = new NodeChoice(n30, 11); }
      |
         n33=<DISPLAY_1> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n7 = new NodeChoice(n32, 12); }
      |
         n35=<INDEX> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n7 = new NodeChoice(n34, 13); }
      |
         n37=<PACKED_DECIMAL> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n7 = new NodeChoice(n36, 14); }
      |
         n39=<POINTER> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n7 = new NodeChoice(n38, 15); }
      )
      
   )
   
   { return new DataUsageClause(n0,n7); }
}

DataSignClause DataSignClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<SIGN> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n9=<LEADING> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<TRAILING> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      )
      
   )
   (
      { n16 = new NodeOptional(); }
      { n13 = new NodeSequence(2); }
      n15=<SEPARATE> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      (
         n18=<CHARACTER> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   
   { return new DataSignClause(n0,n7,n12); }
}

DataSynchronizedClause DataSynchronizedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      (
         n2=<SYNCHRONIZED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SYNC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         (
            n8=<LEFT> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10=<RIGHT> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         )
         
      )
      { n5.addNode(n6); }
   )?
   
   { return new DataSynchronizedClause(n0,n5); }
}

DataValueClause DataValueClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeList n13 = new NodeList();
   NodeSequence n14;
   Literal n15;
   NodeOptional n16;
   NodeSequence n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Literal n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<VALUE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<VALUES> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      { n16 = new NodeOptional(); }
      { n24 = new NodeOptional(); }
      { n14 = new NodeSequence(3); }
      n15=Literal()
      { n14.addNode(n15); }
      (
         { n17 = new NodeSequence(2); }
         (
            (
               n20=<THROUGH> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18 = new NodeChoice(n19, 0); }
            |
               n22=<THRU> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n18 = new NodeChoice(n21, 1); }
            )
            
         )
         { n17.addNode(n18); }
         n23=Literal()
         { n17.addNode(n23); }
         { n16.addNode(n17); }
      )?
      { n14.addNode(n16); }
      (
         n26=<COMMACHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n14.addNode(n24); }
      { n13.addNode(n14); }
   )+
   { n13.nodes.trimToSize(); }
   
   { return new DataValueClause(n0,n13); }
}

ConditionValueClause ConditionValueClause() :
{
   DataValueClause n0;

   
}
{
   n0=DataValueClause()
   
   { return new ConditionValueClause(n0); }
}

RenamesClause RenamesClause() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;

   
}
{
   n1=<RENAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   (
      { n4 = new NodeSequence(2); }
      (
         (
            n7=<THROUGH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<THRU> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         
      )
      { n4.addNode(n5); }
      n10=QualifiedDataName()
      { n4.addNode(n10); }
      { n3.addNode(n4); }
   )?
   
   { return new RenamesClause(n0,n2,n3); }
}

WorkingStorageSection WorkingStorageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDescriptionEntry n7;

   
}
{
   n1=<WORKING_STORAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDescriptionEntry()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new WorkingStorageSection(n0,n2,n4,n6); }
}

LinkageSection LinkageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDescriptionEntry n7;

   
}
{
   n1=<LINKAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDescriptionEntry()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new LinkageSection(n0,n2,n4,n6); }
}

ProcedureDivision ProcedureDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeList n8;
   NodeSequence n9;
   DataName n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   Declaratives n17;
   ProcedureBody n18;

   
}
{
   n1=<PROCEDURE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n8 = new NodeList(); }
      { n5 = new NodeSequence(2); }
      n7=<USING> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      (
         { n11 = new NodeOptional(); }
         { n9 = new NodeSequence(2); }
         n10=DataName()
         { n9.addNode(n10); }
         (
            n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
         )?
         { n9.addNode(n11); }
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   (
      n17=Declaratives()
      { n16.addNode(n17); }
   )?
   n18=ProcedureBody()
   
   { return new ProcedureDivision(n0,n2,n4,n14,n16,n18); }
}

Declaratives Declaratives() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SectionHeader n6;
   NodeToken n7;
   Token n8;
   UseStatement n9;
   NodeToken n10;
   Token n11;
   Paragraphs n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1=<DECLARATIVES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(5); }
      n6=SectionHeader()
      { n5.addNode(n6); }
      n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      n9=UseStatement()
      { n5.addNode(n9); }
      n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      n12=Paragraphs()
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n14=<END> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<DECLARATIVES> { n15 = JTBToolkit.makeNodeToken(n16); }
   n18=<DOT> { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Declaratives(n0,n2,n4,n13,n15,n17); }
}

ProcedureBody ProcedureBody() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   Paragraphs n2;
   ProcedureSection n3;

   
}
{
   (
      (
         n2=Paragraphs()
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=ProcedureSection()
         { n1 = new NodeChoice(n3, 1); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new ProcedureBody(n0); }
}

ProcedureSection ProcedureSection() :
{
   SectionHeader n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   Paragraphs n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
   n0=SectionHeader()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=Paragraphs()
      { n3.addNode(n4); }
   )?
   (
      n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
   { return new ProcedureSection(n0,n1,n3,n5); }
}

SectionHeader SectionHeader() :
{
   SectionName n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   IntegerConstant n4;

   
}
{
   n0=SectionName()
   n2=<SECTION> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=IntegerConstant()
      { n3.addNode(n4); }
   )?
   
   { return new SectionHeader(n0,n1,n3); }
}

Paragraphs Paragraphs() :
{
   NodeChoice n0;
   NodeList n1 = new NodeList();
   Sentence n2;
   NodeList n3 = new NodeList();
   Paragraph n4;

   
}
{
   (
      (
         n2=Sentence()
         { n1.addNode(n2); }
      )+
      { n1.nodes.trimToSize(); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         n4=Paragraph()
         { n3.addNode(n4); }
      )+
      { n3.nodes.trimToSize(); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Paragraphs(n0); }
}

Paragraph Paragraph() :
{
   ParagraphName n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeSequence n4;
   ExitStatement n5;
   NodeToken n6;
   Token n7;
   AlteredGoto n8;
   NodeListOptional n9 = new NodeListOptional();
   Sentence n10;

   
}
{
   n0=ParagraphName()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         { n4 = new NodeSequence(2); }
         n5=ExitStatement()
         { n4.addNode(n5); }
         n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n4.addNode(n6); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n8=AlteredGoto()
         { n3 = new NodeChoice(n8, 1); }
      |
         (
            n10=Sentence()
            { n9.addNode(n10); }
         )*
         { n9.nodes.trimToSize(); }
         { n3 = new NodeChoice(n9, 2); }
      )
      
   )
   
   { return new Paragraph(n0,n1,n3); }
}

Sentence Sentence() :
{
   StatementList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=StatementList()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new Sentence(n0,n1); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   AcceptStatement n1;
   AddStatement n2;
   AlterStatement n3;
   CallStatement n4;
   CancelStatement n5;
   CloseStatement n6;
   ComputeStatement n7;
   ContinueStatement n8;
   DeleteStatement n9;
   DisplayStatement n10;
   DivideStatement n11;
   EntryStatement n12;
   EvaluateStatement n13;
   ExitProgramStatement n14;
   ExitStatement n15;
   GobackStatement n16;
   GotoStatement n17;
   IfStatement n18;
   InitializeStatement n19;
   InspectStatement n20;
   MergeStatement n21;
   MoveStatement n22;
   MultiplyStatement n23;
   OpenStatement n24;
   PerformStatement n25;
   ReadStatement n26;
   ReleaseStatement n27;
   ReturnStatement n28;
   RewriteStatement n29;
   SearchStatement n30;
   SetStatement n31;
   SortStatement n32;
   StartStatement n33;
   StopStatement n34;
   StringStatement n35;
   SubtractStatement n36;
   UnstringStatement n37;
   WriteStatement n38;
   ExecCICSStatement n39;
   ExecSQLStatement n40;

   
}
{
   (
      (
         n1=AcceptStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=AddStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=AlterStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=CallStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=CancelStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=CloseStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         n7=ComputeStatement()
         { n0 = new NodeChoice(n7, 6); }
      |
         n8=ContinueStatement()
         { n0 = new NodeChoice(n8, 7); }
      |
         n9=DeleteStatement()
         { n0 = new NodeChoice(n9, 8); }
      |
         n10=DisplayStatement()
         { n0 = new NodeChoice(n10, 9); }
      |
         n11=DivideStatement()
         { n0 = new NodeChoice(n11, 10); }
      |
         n12=EntryStatement()
         { n0 = new NodeChoice(n12, 11); }
      |
         n13=EvaluateStatement()
         { n0 = new NodeChoice(n13, 12); }
      |
         n14=ExitProgramStatement()
         { n0 = new NodeChoice(n14, 13); }
      |
         n15=ExitStatement()
         { n0 = new NodeChoice(n15, 14); }
      |
         n16=GobackStatement()
         { n0 = new NodeChoice(n16, 15); }
      |
         n17=GotoStatement()
         { n0 = new NodeChoice(n17, 16); }
      |
         n18=IfStatement()
         { n0 = new NodeChoice(n18, 17); }
      |
         n19=InitializeStatement()
         { n0 = new NodeChoice(n19, 18); }
      |
         n20=InspectStatement()
         { n0 = new NodeChoice(n20, 19); }
      |
         n21=MergeStatement()
         { n0 = new NodeChoice(n21, 20); }
      |
         n22=MoveStatement()
         { n0 = new NodeChoice(n22, 21); }
      |
         n23=MultiplyStatement()
         { n0 = new NodeChoice(n23, 22); }
      |
         n24=OpenStatement()
         { n0 = new NodeChoice(n24, 23); }
      |
         n25=PerformStatement()
         { n0 = new NodeChoice(n25, 24); }
      |
         n26=ReadStatement()
         { n0 = new NodeChoice(n26, 25); }
      |
         n27=ReleaseStatement()
         { n0 = new NodeChoice(n27, 26); }
      |
         n28=ReturnStatement()
         { n0 = new NodeChoice(n28, 27); }
      |
         n29=RewriteStatement()
         { n0 = new NodeChoice(n29, 28); }
      |
         n30=SearchStatement()
         { n0 = new NodeChoice(n30, 29); }
      |
         n31=SetStatement()
         { n0 = new NodeChoice(n31, 30); }
      |
         n32=SortStatement()
         { n0 = new NodeChoice(n32, 31); }
      |
         n33=StartStatement()
         { n0 = new NodeChoice(n33, 32); }
      |
         n34=StopStatement()
         { n0 = new NodeChoice(n34, 33); }
      |
         n35=StringStatement()
         { n0 = new NodeChoice(n35, 34); }
      |
         n36=SubtractStatement()
         { n0 = new NodeChoice(n36, 35); }
      |
         n37=UnstringStatement()
         { n0 = new NodeChoice(n37, 36); }
      |
         n38=WriteStatement()
         { n0 = new NodeChoice(n38, 37); }
      |
         n39=ExecCICSStatement()
         { n0 = new NodeChoice(n39, 38); }
      |
         n40=ExecSQLStatement()
         { n0 = new NodeChoice(n40, 39); }
      )
      
   )
   
   {
      if ( n0 != null && (n0.choice instanceof GobackStatement || n0.choice instanceof ExitProgramStatement|| n0.choice instanceof StopStatement) )
      {
         ;
      }
      else
      {
         nodeCounter.incrementStatementCounter();
      }
   }
   
   
   { return new Statement(n0); }
}

AcceptStatement AcceptStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   MnemonicName n8;
   EnvironmentName n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<ACCEPT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         (
            n8=MnemonicName()
            { n7 = new NodeChoice(n8, 0); }
         |
            n9=EnvironmentName()
            { n7 = new NodeChoice(n9, 1); }
         |
            n11=<DATE> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n7 = new NodeChoice(n10, 2); }
         |
            n13=<DAY> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n7 = new NodeChoice(n12, 3); }
         |
            n15=<DAY_OF_WEEK> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n7 = new NodeChoice(n14, 4); }
         |
            n17=<TIME> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n7 = new NodeChoice(n16, 5); }
         )
         
      )
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new AcceptStatement(n0,n2,n3); }
}

AddStatement AddStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeList n17;
   NodeSequence n18;
   Identifier n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeSequence n23;
   NodeList n24 = new NodeList();
   NodeChoice n25;
   Identifier n26;
   Literal n27;
   NodeChoice n28;
   NodeSequence n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   Identifier n35;
   Literal n36;
   NodeToken n37;
   Token n38;
   NodeList n39 = new NodeList();
   NodeSequence n40;
   Identifier n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeList n48 = new NodeList();
   NodeSequence n49;
   Identifier n50;
   NodeOptional n51;
   NodeToken n52;
   Token n53;
   NodeOptional n54 = new NodeOptional();
   NodeSequence n55;
   NodeOptional n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   StatementList n63;
   NodeOptional n64 = new NodeOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeOptional n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   StatementList n75;
   NodeOptional n76 = new NodeOptional();
   NodeToken n77;
   Token n78;

   
}
{
   n1=<ADD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            { n3 = new NodeSequence(5); }
            (
               (
                  n6=<CORRESPONDING> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4 = new NodeChoice(n5, 0); }
               |
                  n8=<CORR> { n7 = JTBToolkit.makeNodeToken(n8); }
                  { n4 = new NodeChoice(n7, 1); }
               )
               
            )
            { n3.addNode(n4); }
            n9=Identifier()
            { n3.addNode(n9); }
            n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3.addNode(n10); }
            n12=Identifier()
            { n3.addNode(n12); }
            (
               { n17 = new NodeList(); }
               { n14 = new NodeSequence(2); }
               n16=<GIVING> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
               (
                  { n20 = new NodeOptional(); }
                  { n18 = new NodeSequence(2); }
                  n19=Identifier()
                  { n18.addNode(n19); }
                  (
                     n22=<ROUNDED> { n21 = JTBToolkit.makeNodeToken(n22); }
                     { n20.addNode(n21); }
                  )?
                  { n18.addNode(n20); }
                  { n17.addNode(n18); }
               )+
               { n17.nodes.trimToSize(); }
               { n14.addNode(n17); }
               { n13.addNode(n14); }
            )?
            { n3.addNode(n13); }
            
         )
         { n2 = new NodeChoice(n3, 0); }
      |
         { n23 = new NodeSequence(2); }
         (
            (
               n26=Identifier()
               { n25 = new NodeChoice(n26, 0); }
            |
               n27=Literal()
               { n25 = new NodeChoice(n27, 1); }
            )
            { n24.addNode(n25); }
         )+
         { n24.nodes.trimToSize(); }
         { n23.addNode(n24); }
         (
            (
               { n29 = new NodeSequence(3); }
               (
                  { n31 = new NodeSequence(2); }
                  n33=<TO> { n32 = JTBToolkit.makeNodeToken(n33); }
                  { n31.addNode(n32); }
                  (
                     (
                        n35=Identifier()
                        { n34 = new NodeChoice(n35, 0); }
                     |
                        n36=Literal()
                        { n34 = new NodeChoice(n36, 1); }
                     )
                     
                  )
                  { n31.addNode(n34); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               n38=<GIVING> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n29.addNode(n37); }
               (
                  { n42 = new NodeOptional(); }
                  { n40 = new NodeSequence(2); }
                  n41=Identifier()
                  { n40.addNode(n41); }
                  (
                     n44=<ROUNDED> { n43 = JTBToolkit.makeNodeToken(n44); }
                     { n42.addNode(n43); }
                  )?
                  { n40.addNode(n42); }
                  { n39.addNode(n40); }
               )+
               { n39.nodes.trimToSize(); }
               { n29.addNode(n39); }
               { n28 = new NodeChoice(n29, 0); }
            |
               { n45 = new NodeSequence(2); }
               n47=<TO> { n46 = JTBToolkit.makeNodeToken(n47); }
               { n45.addNode(n46); }
               (
                  { n51 = new NodeOptional(); }
                  { n49 = new NodeSequence(2); }
                  n50=Identifier()
                  { n49.addNode(n50); }
                  (
                     n53=<ROUNDED> { n52 = JTBToolkit.makeNodeToken(n53); }
                     { n51.addNode(n52); }
                  )?
                  { n49.addNode(n51); }
                  { n48.addNode(n49); }
               )+
               { n48.nodes.trimToSize(); }
               { n45.addNode(n48); }
               { n28 = new NodeChoice(n45, 1); }
            )
            
         )
         { n23.addNode(n28); }
         { n2 = new NodeChoice(n23, 1); }
      )
      
   )
   (
      { n56 = new NodeOptional(); }
      { n55 = new NodeSequence(5); }
      (
         n58=<ON> { n57 = JTBToolkit.makeNodeToken(n58); }
         { n56.addNode(n57); }
      )?
      { n55.addNode(n56); }
      n60=<SIZE> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n55.addNode(n59); }
      n62=<ERROR> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n55.addNode(n61); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n63=StatementList()
      { n55.addNode(n63); }
      { n54.addNode(n55); }
   )?
   (
      { n68 = new NodeOptional(); }
      { n65 = new NodeSequence(6); }
      n67=<NOT> { n66 = JTBToolkit.makeNodeToken(n67); }
      { n65.addNode(n66); }
      (
         n70=<ON> { n69 = JTBToolkit.makeNodeToken(n70); }
         { n68.addNode(n69); }
      )?
      { n65.addNode(n68); }
      n72=<SIZE> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n65.addNode(n71); }
      n74=<ERROR> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n65.addNode(n73); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n75=StatementList()
      { n65.addNode(n75); }
      { n64.addNode(n65); }
   )?
   (
      n78=<END_ADD> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n76.addNode(n77); }
   )?
   
   { return new AddStatement(n0,n2,n54,n64,n76); }
}

AlteredGoto AlteredGoto() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AlteredGoto(n0,n2,n5); }
}

AlterStatement AlterStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   ProcedureName n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ProcedureName n13;

   
}
{
   n1=<ALTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n3 = new NodeSequence(4); }
      n4=ProcedureName()
      { n3.addNode(n4); }
      n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         { n8 = new NodeSequence(2); }
         n10=<PROCEED> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<TO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n7.addNode(n8); }
      )?
      { n3.addNode(n7); }
      n13=ProcedureName()
      { n3.addNode(n13); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new AlterStatement(n0,n2); }
}

CallStatement CallStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeList n9;
   NodeChoice n10;
   NodeSequence n11;
   NodeOptional n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeList n19;
   NodeSequence n20;
   NodeChoice n21;
   Identifier n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Identifier n28;
   FileName n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeOptional n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeList n39;
   NodeSequence n40;
   NodeChoice n41;
   NodeSequence n42;
   NodeOptional n43;
   NodeSequence n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   Identifier n49;
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   Identifier n55;
   Literal n56;
   NodeOptional n57;
   NodeToken n58;
   Token n59;
   NodeOptional n60 = new NodeOptional();
   NodeSequence n61;
   NodeOptional n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   StatementList n67;
   NodeOptional n68 = new NodeOptional();
   NodeSequence n69;
   NodeOptional n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   StatementList n75;
   NodeOptional n76 = new NodeOptional();
   NodeSequence n77;
   NodeToken n78;
   Token n79;
   NodeOptional n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   StatementList n85;
   NodeOptional n86 = new NodeOptional();
   NodeToken n87;
   Token n88;

   
}
{
   n1=<CALL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      { n9 = new NodeList(); }
      { n6 = new NodeSequence(2); }
      n8=<USING> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      (
         { n12 = new NodeOptional(); }
         { n19 = new NodeList(); }
         { n34 = new NodeOptional(); }
         { n39 = new NodeList(); }
         (
            (
               { n11 = new NodeSequence(2); }
               (
                  { n14 = new NodeOptional(); }
                  { n13 = new NodeSequence(2); }
                  (
                     n16=<BY> { n15 = JTBToolkit.makeNodeToken(n16); }
                     { n14.addNode(n15); }
                  )?
                  { n13.addNode(n14); }
                  n18=<REFERENCE> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n13.addNode(n17); }
                  { n12.addNode(n13); }
               )?
               { n11.addNode(n12); }
               (
                  { n30 = new NodeOptional(); }
                  { n20 = new NodeSequence(2); }
                  (
                     (
                        n22=Identifier()
                        { n21 = new NodeChoice(n22, 0); }
                     |
                        { n23 = new NodeSequence(3); }
                        n25=<ADDRESS> { n24 = JTBToolkit.makeNodeToken(n25); }
                        { n23.addNode(n24); }
                        n27=<OF> { n26 = JTBToolkit.makeNodeToken(n27); }
                        { n23.addNode(n26); }
                        n28=Identifier()
                        { n23.addNode(n28); }
                        { n21 = new NodeChoice(n23, 1); }
                     |
                        n29=FileName()
                        { n21 = new NodeChoice(n29, 2); }
                     )
                     
                  )
                  { n20.addNode(n21); }
                  (
                     n32=<COMMACHAR> { n31 = JTBToolkit.makeNodeToken(n32); }
                     { n30.addNode(n31); }
                  )?
                  { n20.addNode(n30); }
                  { n19.addNode(n20); }
               )+
               { n19.nodes.trimToSize(); }
               { n11.addNode(n19); }
               { n10 = new NodeChoice(n11, 0); }
            |
               { n33 = new NodeSequence(3); }
               (
                  n36=<BY> { n35 = JTBToolkit.makeNodeToken(n36); }
                  { n34.addNode(n35); }
               )?
               { n33.addNode(n34); }
               n38=<CONTENT> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n33.addNode(n37); }
               (
                  { n43 = new NodeOptional(); }
                  { n57 = new NodeOptional(); }
                  { n40 = new NodeSequence(2); }
                  (
                     (
                        { n42 = new NodeSequence(2); }
                        (
                           { n44 = new NodeSequence(2); }
                           n46=<LENGTH> { n45 = JTBToolkit.makeNodeToken(n46); }
                           { n44.addNode(n45); }
                           n48=<OF> { n47 = JTBToolkit.makeNodeToken(n48); }
                           { n44.addNode(n47); }
                           { n43.addNode(n44); }
                        )?
                        { n42.addNode(n43); }
                        n49=Identifier()
                        { n42.addNode(n49); }
                        { n41 = new NodeChoice(n42, 0); }
                     |
                        { n50 = new NodeSequence(3); }
                        n52=<ADDRESS> { n51 = JTBToolkit.makeNodeToken(n52); }
                        { n50.addNode(n51); }
                        n54=<OF> { n53 = JTBToolkit.makeNodeToken(n54); }
                        { n50.addNode(n53); }
                        n55=Identifier()
                        { n50.addNode(n55); }
                        { n41 = new NodeChoice(n50, 1); }
                     |
                        n56=Literal()
                        { n41 = new NodeChoice(n56, 2); }
                     )
                     
                  )
                  { n40.addNode(n41); }
                  (
                     n59=<COMMACHAR> { n58 = JTBToolkit.makeNodeToken(n59); }
                     { n57.addNode(n58); }
                  )?
                  { n40.addNode(n57); }
                  { n39.addNode(n40); }
               )+
               { n39.nodes.trimToSize(); }
               { n33.addNode(n39); }
               { n10 = new NodeChoice(n33, 1); }
            )
            
         )
         { n9.addNode(n10); }
      )+
      { n9.nodes.trimToSize(); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      { n62 = new NodeOptional(); }
      { n61 = new NodeSequence(4); }
      (
         n64=<ON> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n62.addNode(n63); }
      )?
      { n61.addNode(n62); }
      n66=<OVERFLOW> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n61.addNode(n65); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n67=StatementList()
      { n61.addNode(n67); }
      { n60.addNode(n61); }
   )?
   (
      { n70 = new NodeOptional(); }
      { n69 = new NodeSequence(4); }
      (
         n72=<ON> { n71 = JTBToolkit.makeNodeToken(n72); }
         { n70.addNode(n71); }
      )?
      { n69.addNode(n70); }
      n74=<EXCEPTION> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n69.addNode(n73); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n75=StatementList()
      { n69.addNode(n75); }
      { n68.addNode(n69); }
   )?
   (
      { n80 = new NodeOptional(); }
      { n77 = new NodeSequence(5); }
      n79=<NOT> { n78 = JTBToolkit.makeNodeToken(n79); }
      { n77.addNode(n78); }
      (
         n82=<ON> { n81 = JTBToolkit.makeNodeToken(n82); }
         { n80.addNode(n81); }
      )?
      { n77.addNode(n80); }
      n84=<EXCEPTION> { n83 = JTBToolkit.makeNodeToken(n84); }
      { n77.addNode(n83); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n85=StatementList()
      { n77.addNode(n85); }
      { n76.addNode(n77); }
   )?
   (
      n88=<END_CALL> { n87 = JTBToolkit.makeNodeToken(n88); }
      { n86.addNode(n87); }
   )?
   
   { return new CallStatement(n0,n2,n5,n60,n68,n76,n86); }
}

CancelStatement CancelStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   Identifier n4;
   Literal n5;

   
}
{
   n1=<CANCEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=Identifier()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=Literal()
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new CancelStatement(n0,n2); }
}

CloseStatement CloseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   FileName n4;
   NodeOptional n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeChoice n14;
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeChoice n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;

   
}
{
   n1=<CLOSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=FileName()
      { n3.addNode(n4); }
      (
         { n13 = new NodeOptional(); }
         { n30 = new NodeOptional(); }
         (
            (
               { n7 = new NodeSequence(2); }
               (
                  (
                     n10=<REEL> { n9 = JTBToolkit.makeNodeToken(n10); }
                     { n8 = new NodeChoice(n9, 0); }
                  |
                     n12=<UNIT> { n11 = JTBToolkit.makeNodeToken(n12); }
                     { n8 = new NodeChoice(n11, 1); }
                  )
                  
               )
               { n7.addNode(n8); }
               (
                  { n16 = new NodeOptional(); }
                  { n22 = new NodeOptional(); }
                  (
                     (
                        { n15 = new NodeSequence(2); }
                        (
                           n18=<FOR> { n17 = JTBToolkit.makeNodeToken(n18); }
                           { n16.addNode(n17); }
                        )?
                        { n15.addNode(n16); }
                        n20=<REMOVAL> { n19 = JTBToolkit.makeNodeToken(n20); }
                        { n15.addNode(n19); }
                        { n14 = new NodeChoice(n15, 0); }
                     |
                        { n21 = new NodeSequence(3); }
                        (
                           n24=<WITH> { n23 = JTBToolkit.makeNodeToken(n24); }
                           { n22.addNode(n23); }
                        )?
                        { n21.addNode(n22); }
                        n26=<NO> { n25 = JTBToolkit.makeNodeToken(n26); }
                        { n21.addNode(n25); }
                        n28=<REWIND> { n27 = JTBToolkit.makeNodeToken(n28); }
                        { n21.addNode(n27); }
                        { n14 = new NodeChoice(n21, 1); }
                     )
                     
                  )
                  { n13.addNode(n14); }
               )?
               { n7.addNode(n13); }
               { n6 = new NodeChoice(n7, 0); }
            |
               { n29 = new NodeSequence(2); }
               (
                  n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               (
                  (
                     { n34 = new NodeSequence(2); }
                     n36=<NO> { n35 = JTBToolkit.makeNodeToken(n36); }
                     { n34.addNode(n35); }
                     n38=<REWIND> { n37 = JTBToolkit.makeNodeToken(n38); }
                     { n34.addNode(n37); }
                     { n33 = new NodeChoice(n34, 0); }
                  |
                     n40=<LOCK> { n39 = JTBToolkit.makeNodeToken(n40); }
                     { n33 = new NodeChoice(n39, 1); }
                  )
                  
               )
               { n29.addNode(n33); }
               { n6 = new NodeChoice(n29, 1); }
            )
            
         )
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new CloseStatement(n0,n2); }
}

ComputeStatement ComputeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ArithmeticExpression n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   StatementList n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;

   
}
{
   n1=<COMPUTE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<ROUNDED> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      (
         n10=<EQUALCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n12=<EQUAL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   n13=ArithmeticExpression()
   (
      { n16 = new NodeOptional(); }
      { n15 = new NodeSequence(5); }
      (
         n18=<ON> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n15.addNode(n16); }
      n20=<SIZE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n15.addNode(n19); }
      n22=<ERROR> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n15.addNode(n21); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      { n28 = new NodeOptional(); }
      { n25 = new NodeSequence(6); }
      n27=<NOT> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      (
         n30=<ON> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n25.addNode(n28); }
      n32=<SIZE> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      n34=<ERROR> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n25.addNode(n33); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n35=StatementList()
      { n25.addNode(n35); }
      { n24.addNode(n25); }
   )?
   (
      n38=<END_COMPUTE> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n36.addNode(n37); }
   )?
   
   { return new ComputeStatement(n0,n2,n8,n13,n14,n24,n36); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<CONTINUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ContinueStatement(n0); }
}

DeleteStatement DeleteStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   StatementList n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;

   
}
{
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n10 = new NodeOptional(); }
      { n7 = new NodeSequence(4); }
      n9=<INVALID> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      (
         n12=<KEY> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n7.addNode(n10); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n13=StatementList()
      { n7.addNode(n13); }
      { n6.addNode(n7); }
   )?
   (
      { n20 = new NodeOptional(); }
      { n15 = new NodeSequence(5); }
      n17=<NOT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<INVALID> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      (
         n22=<KEY> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n15.addNode(n20); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      n26=<END_DELETE> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
   )?
   
   { return new DeleteStatement(n0,n2,n3,n6,n14,n24); }
}

DisplayStatement DisplayStatement() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   Identifier n11;
   Literal n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   MnemonicName n18;
   EnvironmentName n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29 = new NodeOptional();
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Identifier n33;

   
}
{
   (
      n2=<D> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<DISPLAY> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      { n7 = new NodeOptional(); }
      { n6 = new NodeSequence(2); }
      (
         n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      (
         (
            n11=Identifier()
            { n10 = new NodeChoice(n11, 0); }
         |
            n12=Literal()
            { n10 = new NodeChoice(n12, 1); }
         )
         
      )
      { n6.addNode(n10); }
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   (
      { n14 = new NodeSequence(2); }
      n16=<UPON> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         (
            n18=MnemonicName()
            { n17 = new NodeChoice(n18, 0); }
         |
            n19=EnvironmentName()
            { n17 = new NodeChoice(n19, 1); }
         )
         
      )
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n21 = new NodeSequence(3); }
      (
         n24=<WITH> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n21.addNode(n22); }
      n26=<NO> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n21.addNode(n25); }
      n28=<ADVANCING> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n21.addNode(n27); }
      { n20.addNode(n21); }
   )?
   (
      { n30 = new NodeSequence(2); }
      n32=<READ> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n33=Identifier()
      { n30.addNode(n33); }
      { n29.addNode(n30); }
   )?
   
   { return new DisplayStatement(n0,n3,n5,n13,n20,n29); }
}

DivideStatement DivideStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   QualifiedDataName n3;
   Literal n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Literal n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeList n14;
   NodeSequence n15;
   Identifier n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeList n23 = new NodeList();
   NodeSequence n24;
   Identifier n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeChoice n32;
   Identifier n33;
   Literal n34;
   NodeOptional n35 = new NodeOptional();
   NodeSequence n36;
   NodeToken n37;
   Token n38;
   NodeList n39;
   NodeSequence n40;
   Identifier n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45 = new NodeOptional();
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   Identifier n49;
   NodeOptional n50 = new NodeOptional();
   NodeSequence n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   StatementList n59;
   NodeOptional n60 = new NodeOptional();
   NodeSequence n61;
   NodeToken n62;
   Token n63;
   NodeOptional n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   StatementList n71;
   NodeOptional n72 = new NodeOptional();
   NodeToken n73;
   Token n74;

   
}
{
   n1=<DIVIDE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=QualifiedDataName()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      (
         { n6 = new NodeSequence(3); }
         n8=<INTO> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Literal()
         { n6.addNode(n9); }
         (
            { n14 = new NodeList(); }
            { n11 = new NodeSequence(2); }
            n13=<GIVING> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            (
               { n17 = new NodeOptional(); }
               { n15 = new NodeSequence(2); }
               n16=Identifier()
               { n15.addNode(n16); }
               (
                  n19=<ROUNDED> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n17.addNode(n18); }
               )?
               { n15.addNode(n17); }
               { n14.addNode(n15); }
            )+
            { n14.nodes.trimToSize(); }
            { n11.addNode(n14); }
            { n10.addNode(n11); }
         )?
         { n6.addNode(n10); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n20 = new NodeSequence(2); }
         n22=<INTO> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         (
            { n26 = new NodeOptional(); }
            { n24 = new NodeSequence(2); }
            n25=Identifier()
            { n24.addNode(n25); }
            (
               n28=<ROUNDED> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n26.addNode(n27); }
            )?
            { n24.addNode(n26); }
            { n23.addNode(n24); }
         )+
         { n23.nodes.trimToSize(); }
         { n20.addNode(n23); }
         { n5 = new NodeChoice(n20, 1); }
      |
         { n29 = new NodeSequence(3); }
         n31=<BY> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
         (
            (
               n33=Identifier()
               { n32 = new NodeChoice(n33, 0); }
            |
               n34=Literal()
               { n32 = new NodeChoice(n34, 1); }
            )
            
         )
         { n29.addNode(n32); }
         (
            { n39 = new NodeList(); }
            { n36 = new NodeSequence(2); }
            n38=<GIVING> { n37 = JTBToolkit.makeNodeToken(n38); }
            { n36.addNode(n37); }
            (
               { n42 = new NodeOptional(); }
               { n40 = new NodeSequence(2); }
               n41=Identifier()
               { n40.addNode(n41); }
               (
                  n44=<ROUNDED> { n43 = JTBToolkit.makeNodeToken(n44); }
                  { n42.addNode(n43); }
               )?
               { n40.addNode(n42); }
               { n39.addNode(n40); }
            )+
            { n39.nodes.trimToSize(); }
            { n36.addNode(n39); }
            { n35.addNode(n36); }
         )?
         { n29.addNode(n35); }
         { n5 = new NodeChoice(n29, 2); }
      )
      
   )
   (
      { n46 = new NodeSequence(2); }
      n48=<REMAINDER> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n46.addNode(n47); }
      n49=Identifier()
      { n46.addNode(n49); }
      { n45.addNode(n46); }
   )?
   (
      { n52 = new NodeOptional(); }
      { n51 = new NodeSequence(5); }
      (
         n54=<ON> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
      )?
      { n51.addNode(n52); }
      n56=<SIZE> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n51.addNode(n55); }
      n58=<ERROR> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n51.addNode(n57); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n59=StatementList()
      { n51.addNode(n59); }
      { n50.addNode(n51); }
   )?
   (
      { n64 = new NodeOptional(); }
      { n61 = new NodeSequence(6); }
      n63=<NOT> { n62 = JTBToolkit.makeNodeToken(n63); }
      { n61.addNode(n62); }
      (
         n66=<ON> { n65 = JTBToolkit.makeNodeToken(n66); }
         { n64.addNode(n65); }
      )?
      { n61.addNode(n64); }
      n68=<SIZE> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n61.addNode(n67); }
      n70=<ERROR> { n69 = JTBToolkit.makeNodeToken(n70); }
      { n61.addNode(n69); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n71=StatementList()
      { n61.addNode(n71); }
      { n60.addNode(n61); }
   )?
   (
      n74=<END_DIVIDE> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n72.addNode(n73); }
   )?
   
   { return new DivideStatement(n0,n2,n5,n45,n50,n60,n72); }
}

EntryStatement EntryStatement() :
{
   NodeToken n0;
   Token n1;
   Literal n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   Identifier n8;

   
}
{
   n1=<ENTRY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Literal()
   (
      { n7 = new NodeList(); }
      { n4 = new NodeSequence(2); }
      n6=<USING> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n8=Identifier()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new EntryStatement(n0,n2,n3); }
}

EvaluateStatement EvaluateStatement() :
{
   NodeToken n0;
   Token n1;
   EvaluateValue n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   EvaluateValue n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeList n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   EvaluatePhrase n14;
   NodeListOptional n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   EvaluatePhrase n19;
   StatementList n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   StatementList n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;

   
}
{
   n1=<EVALUATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EvaluateValue()
   (
      { n4 = new NodeSequence(2); }
      n6=<ALSO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=EvaluateValue()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n10 = new NodeList(); }
      { n9 = new NodeSequence(3); }
      (
         { n15 = new NodeListOptional(); }
         { n11 = new NodeSequence(3); }
         n13=<WHEN> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=EvaluatePhrase()
         { n11.addNode(n14); }
         (
            { n16 = new NodeSequence(2); }
            n18=<ALSO> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n16.addNode(n17); }
            n19=EvaluatePhrase()
            { n16.addNode(n19); }
            { n15.addNode(n16); }
         )*
         { n15.nodes.trimToSize(); }
         { n11.addNode(n15); }
         { n10.addNode(n11); }
      )+
      { n10.nodes.trimToSize(); }
      { n9.addNode(n10); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n20=StatementList()
      { n9.addNode(n20); }
      { n8.addNode(n9); }
   )+
   { n8.nodes.trimToSize(); }
   (
      { n22 = new NodeSequence(3); }
      n24=<WHEN> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<OTHER> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      n27=StatementList()
      { n22.addNode(n27); }
      { n21.addNode(n22); }
   )?
   
   {
      nodeCounter.incrementBranchCounter();
   }
   
   (
      n30=<END_EVALUATE> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n28.addNode(n29); }
   )?
   
   { return new EvaluateStatement(n0,n2,n3,n8,n21,n28); }
}

EvaluateValue EvaluateValue() :
{
   NodeChoice n0;
   Condition n1;
   Identifier n2;
   ArithmeticExpression n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      (
         
         {
            countCondition = false;
         }
         
         n1=Condition()
         
         {
            countCondition = true;
         }
         
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Identifier()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=ArithmeticExpression()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=Literal()
         { n0 = new NodeChoice(n4, 3); }
      |
         n6=<TRUE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 4); }
      |
         n8=<FALSE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 5); }
      )
      
   )
   
   { return new EvaluateValue(n0); }
}

EvaluatePhrase EvaluatePhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Condition n3;
   NodeSequence n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;
   ArithmeticExpression n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   Literal n21;
   ArithmeticExpression n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      (
         n2=<ANY> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         
         {
            countCondition = false;
         }
         
         n3=Condition()
         
         {
            countCondition = true;
         }
         
         { n0 = new NodeChoice(n3, 1); }
      |
         (
            { n4 = new NodeSequence(3); }
            (
               n7=<NOT> { n6 = JTBToolkit.makeNodeToken(n7); }
               { n5.addNode(n6); }
            )?
            { n4.addNode(n5); }
            (
               (
                  n9=Identifier()
                  { n8 = new NodeChoice(n9, 0); }
               |
                  n10=Literal()
                  { n8 = new NodeChoice(n10, 1); }
               |
                  n11=ArithmeticExpression()
                  { n8 = new NodeChoice(n11, 2); }
               )
               
            )
            { n4.addNode(n8); }
            (
               { n13 = new NodeSequence(2); }
               (
                  (
                     n16=<THROUGH> { n15 = JTBToolkit.makeNodeToken(n16); }
                     { n14 = new NodeChoice(n15, 0); }
                  |
                     n18=<THRU> { n17 = JTBToolkit.makeNodeToken(n18); }
                     { n14 = new NodeChoice(n17, 1); }
                  )
                  
               )
               { n13.addNode(n14); }
               (
                  (
                     n20=Identifier()
                     { n19 = new NodeChoice(n20, 0); }
                  |
                     n21=Literal()
                     { n19 = new NodeChoice(n21, 1); }
                  |
                     n22=ArithmeticExpression()
                     { n19 = new NodeChoice(n22, 2); }
                  )
                  
               )
               { n13.addNode(n19); }
               { n12.addNode(n13); }
            )?
            { n4.addNode(n12); }
            
         )
         { n0 = new NodeChoice(n4, 2); }
      |
         n24=<TRUE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 3); }
      |
         n26=<FALSE> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 4); }
      )
      
   )
   
   { return new EvaluatePhrase(n0); }
}

ExitStatement ExitStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ExitStatement(n0); }
}

ExitProgramStatement ExitProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExitProgramStatement(n0,n2); }
}

GobackStatement GobackStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<GOBACK> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new GobackStatement(n0); }
}

GotoStatement GotoStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   ProcedureName n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   QualifiedDataName n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(2); }
         n7=ProcedureName()
         { n6.addNode(n7); }
         (
            { n12 = new NodeOptional(); }
            { n9 = new NodeSequence(3); }
            n11=<DEPENDING> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            (
               n14=<ON> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
            )?
            { n9.addNode(n12); }
            n15=QualifiedDataName()
            { n9.addNode(n15); }
            { n8.addNode(n9); }
         )?
         { n6.addNode(n8); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n17=<MORE_LABELS> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n5 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new GotoStatement(n0,n2,n5); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Condition n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeList n7 = new NodeList();
   Statement n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   NodeList n19;
   Statement n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;

   nodeCounter.incrementBranchCounter(2);nodeCounter.incrementConditionCounter();
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   (
      n5=<THEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         (
            n8=Statement()
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n6 = new NodeChoice(n7, 0); }
      |
         { n9 = new NodeSequence(2); }
         n11=<NEXT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13=<SENTENCE> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         { n6 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      { n19 = new NodeList(); }
      { n15 = new NodeSequence(2); }
      n17=<ELSE> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         (
            (
               n20=Statement()
               { n19.addNode(n20); }
            )+
            { n19.nodes.trimToSize(); }
            { n18 = new NodeChoice(n19, 0); }
         |
            { n21 = new NodeSequence(2); }
            n23=<NEXT> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
            n25=<SENTENCE> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n21.addNode(n24); }
            { n18 = new NodeChoice(n21, 1); }
         )
         
      )
      { n15.addNode(n18); }
      { n14.addNode(n15); }
   )?
   (
      n28=<END_IF> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
   )?
   
   { return new IfStatement(n0,n2,n3,n6,n14,n26); }
}

InitializeStatement InitializeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeListOptional n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeList n12;
   NodeSequence n13;
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   Identifier n35;
   Literal n36;

   
}
{
   n1=<INITIALIZE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      { n12 = new NodeList(); }
      { n9 = new NodeSequence(2); }
      n11=<REPLACING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         { n29 = new NodeOptional(); }
         { n13 = new NodeSequence(4); }
         (
            (
               n16=<ALPHABETIC> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14 = new NodeChoice(n15, 0); }
            |
               n18=<ALPHANUMERIC> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n14 = new NodeChoice(n17, 1); }
            |
               n20=<NUMERIC> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n14 = new NodeChoice(n19, 2); }
            |
               n22=<ALPHANUMERIC_EDITED> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n14 = new NodeChoice(n21, 3); }
            |
               n24=<NUMERIC_EDITED> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n14 = new NodeChoice(n23, 4); }
            |
               n26=<DBCS> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n14 = new NodeChoice(n25, 5); }
            |
               n28=<EGCS> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n14 = new NodeChoice(n27, 6); }
            )
            
         )
         { n13.addNode(n14); }
         (
            n31=<DATA> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n13.addNode(n29); }
         n33=<BY> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n13.addNode(n32); }
         (
            (
               n35=Identifier()
               { n34 = new NodeChoice(n35, 0); }
            |
               n36=Literal()
               { n34 = new NodeChoice(n36, 1); }
            )
            
         )
         { n13.addNode(n34); }
         { n12.addNode(n13); }
      )+
      { n12.nodes.trimToSize(); }
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new InitializeStatement(n0,n2,n8); }
}

InspectStatement InspectStatement() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeChoice n3;
   TallyingPhrase n4;
   ConvertingPhrase n5;
   ReplacingPhrase n6;

   
}
{
   n1=<INSPECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   (
      (
         n4=TallyingPhrase()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=ConvertingPhrase()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=ReplacingPhrase()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new InspectStatement(n0,n2,n3); }
}

TallyingPhrase TallyingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12;
   BeforeAfterPhrase n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeList n20;
   NodeSequence n21;
   NodeChoice n22;
   Identifier n23;
   Literal n24;
   NodeListOptional n25;
   BeforeAfterPhrase n26;
   NodeOptional n27 = new NodeOptional();
   ReplacingPhrase n28;

   
}
{
   n1=<TALLYING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n3 = new NodeSequence(3); }
      n4=Identifier()
      { n3.addNode(n4); }
      n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         { n12 = new NodeListOptional(); }
         { n20 = new NodeList(); }
         (
            { n9 = new NodeSequence(2); }
            n11=<CHARACTERS> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            (
               n13=BeforeAfterPhrase()
               { n12.addNode(n13); }
            )*
            { n12.nodes.trimToSize(); }
            { n9.addNode(n12); }
            { n8 = new NodeChoice(n9, 0); }
         |
            { n14 = new NodeSequence(2); }
            (
               (
                  n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n15 = new NodeChoice(n16, 0); }
               |
                  n19=<LEADING> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n15 = new NodeChoice(n18, 1); }
               )
               
            )
            { n14.addNode(n15); }
            (
               { n25 = new NodeListOptional(); }
               { n21 = new NodeSequence(2); }
               (
                  (
                     n23=Identifier()
                     { n22 = new NodeChoice(n23, 0); }
                  |
                     n24=Literal()
                     { n22 = new NodeChoice(n24, 1); }
                  )
                  
               )
               { n21.addNode(n22); }
               (
                  n26=BeforeAfterPhrase()
                  { n25.addNode(n26); }
               )*
               { n25.nodes.trimToSize(); }
               { n21.addNode(n25); }
               { n20.addNode(n21); }
            )+
            { n20.nodes.trimToSize(); }
            { n14.addNode(n20); }
            { n8 = new NodeChoice(n14, 1); }
         )
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      n28=ReplacingPhrase()
      { n27.addNode(n28); }
   )?
   
   { return new TallyingPhrase(n0,n2,n27); }
}

ConvertingPhrase ConvertingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   Identifier n8;
   Literal n9;
   NodeListOptional n10 = new NodeListOptional();
   BeforeAfterPhrase n11;

   
}
{
   n1=<CONVERTING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=Identifier()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=Literal()
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      n11=BeforeAfterPhrase()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
   { return new ConvertingPhrase(n0,n2,n5,n7,n10); }
}

ReplacingPhrase ReplacingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   Identifier n10;
   Literal n11;
   NodeListOptional n12;
   BeforeAfterPhrase n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeList n22;
   NodeSequence n23;
   NodeChoice n24;
   Identifier n25;
   Literal n26;
   NodeToken n27;
   Token n28;
   NodeChoice n29;
   Identifier n30;
   Literal n31;
   NodeListOptional n32;
   BeforeAfterPhrase n33;

   
}
{
   n1=<REPLACING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n12 = new NodeListOptional(); }
      { n22 = new NodeList(); }
      (
         { n4 = new NodeSequence(4); }
         n6=<CHARACTERS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<BY> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         (
            (
               n10=Identifier()
               { n9 = new NodeChoice(n10, 0); }
            |
               n11=Literal()
               { n9 = new NodeChoice(n11, 1); }
            )
            
         )
         { n4.addNode(n9); }
         (
            n13=BeforeAfterPhrase()
            { n12.addNode(n13); }
         )*
         { n12.nodes.trimToSize(); }
         { n4.addNode(n12); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n14 = new NodeSequence(2); }
         (
            (
               n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               n19=<LEADING> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 1); }
            |
               n21=<FIRST> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n15 = new NodeChoice(n20, 2); }
            )
            
         )
         { n14.addNode(n15); }
         (
            { n32 = new NodeListOptional(); }
            { n23 = new NodeSequence(4); }
            (
               (
                  n25=Identifier()
                  { n24 = new NodeChoice(n25, 0); }
               |
                  n26=Literal()
                  { n24 = new NodeChoice(n26, 1); }
               )
               
            )
            { n23.addNode(n24); }
            n28=<BY> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n23.addNode(n27); }
            (
               (
                  n30=Identifier()
                  { n29 = new NodeChoice(n30, 0); }
               |
                  n31=Literal()
                  { n29 = new NodeChoice(n31, 1); }
               )
               
            )
            { n23.addNode(n29); }
            (
               n33=BeforeAfterPhrase()
               { n32.addNode(n33); }
            )*
            { n32.nodes.trimToSize(); }
            { n23.addNode(n32); }
            { n22.addNode(n23); }
         )+
         { n22.nodes.trimToSize(); }
         { n14.addNode(n22); }
         { n3 = new NodeChoice(n14, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new ReplacingPhrase(n0,n2); }
}

BeforeAfterPhrase BeforeAfterPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;

   
}
{
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<INITIAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=Identifier()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
   { return new BeforeAfterPhrase(n0,n5,n8); }
}

MergeStatement MergeStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   QualifiedDataName n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   AlphabetName n28;
   NodeToken n29;
   Token n30;
   FileName n31;
   NodeList n32 = new NodeList();
   FileName n33;
   NodeChoice n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40 = new NodeOptional();
   NodeToken n41;
   Token n42;
   ProcedureName n43;
   NodeOptional n44 = new NodeOptional();
   NodeSequence n45;
   NodeChoice n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   ProcedureName n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   NodeList n55 = new NodeList();
   FileName n56;

   
}
{
   n1=<MERGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         n17=QualifiedDataName()
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n20 = new NodeOptional(); }
      { n25 = new NodeOptional(); }
      { n19 = new NodeSequence(4); }
      (
         n22=<COLLATING> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n19.addNode(n20); }
      n24=<SEQUENCE> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n19.addNode(n23); }
      (
         n27=<IS> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n19.addNode(n25); }
      n28=AlphabetName()
      { n19.addNode(n28); }
      { n18.addNode(n19); }
   )?
   n30=<USING> { n29 = JTBToolkit.makeNodeToken(n30); }
   n31=FileName()
   (
      n33=FileName()
      { n32.addNode(n33); }
   )+
   { n32.nodes.trimToSize(); }
   (
      (
         { n35 = new NodeSequence(5); }
         n37=<OUTPUT> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n35.addNode(n36); }
         n39=<PROCEDURE> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n35.addNode(n38); }
         (
            n42=<IS> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
         )?
         { n35.addNode(n40); }
         n43=ProcedureName()
         { n35.addNode(n43); }
         (
            { n45 = new NodeSequence(2); }
            (
               (
                  n48=<THROUGH> { n47 = JTBToolkit.makeNodeToken(n48); }
                  { n46 = new NodeChoice(n47, 0); }
               |
                  n50=<THRU> { n49 = JTBToolkit.makeNodeToken(n50); }
                  { n46 = new NodeChoice(n49, 1); }
               )
               
            )
            { n45.addNode(n46); }
            n51=ProcedureName()
            { n45.addNode(n51); }
            { n44.addNode(n45); }
         )?
         { n35.addNode(n44); }
         { n34 = new NodeChoice(n35, 0); }
      |
         { n52 = new NodeSequence(2); }
         n54=<GIVING> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
         (
            n56=FileName()
            { n55.addNode(n56); }
         )+
         { n55.nodes.trimToSize(); }
         { n52.addNode(n55); }
         { n34 = new NodeChoice(n52, 1); }
      )
      
   )
   
   { return new MergeStatement(n0,n2,n3,n18,n29,n31,n32,n34); }
}

MoveStatement MoveStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   Literal n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   NodeSequence n10;
   Identifier n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeChoice n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   QualifiedDataName n21;
   NodeToken n22;
   Token n23;
   NodeList n24 = new NodeList();
   NodeSequence n25;
   QualifiedDataName n26;
   NodeOptional n27;
   NodeToken n28;
   Token n29;

   
}
{
   n1=<MOVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         (
            (
               n5=Identifier()
               { n4 = new NodeChoice(n5, 0); }
            |
               n6=Literal()
               { n4 = new NodeChoice(n6, 1); }
            )
            
         )
         { n3.addNode(n4); }
         n8=<TO> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         (
            { n12 = new NodeOptional(); }
            { n10 = new NodeSequence(2); }
            n11=Identifier()
            { n10.addNode(n11); }
            (
               n14=<COMMACHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
            )?
            { n10.addNode(n12); }
            { n9.addNode(n10); }
         )+
         { n9.nodes.trimToSize(); }
         { n3.addNode(n9); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n15 = new NodeSequence(4); }
         (
            (
               n18=<CORRESPONDING> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n16 = new NodeChoice(n17, 0); }
            |
               n20=<CORR> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n16 = new NodeChoice(n19, 1); }
            )
            
         )
         { n15.addNode(n16); }
         n21=QualifiedDataName()
         { n15.addNode(n21); }
         n23=<TO> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n15.addNode(n22); }
         (
            { n27 = new NodeOptional(); }
            { n25 = new NodeSequence(2); }
            n26=QualifiedDataName()
            { n25.addNode(n26); }
            (
               n29=<COMMACHAR> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n27.addNode(n28); }
            )?
            { n25.addNode(n27); }
            { n24.addNode(n25); }
         )+
         { n24.nodes.trimToSize(); }
         { n15.addNode(n24); }
         { n2 = new NodeChoice(n15, 1); }
      )
      
   )
   
   { return new MoveStatement(n0,n2); }
}

MultiplyStatement MultiplyStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   Identifier n8;
   Literal n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeList n14;
   NodeSequence n15;
   Identifier n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   StatementList n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeOptional n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   StatementList n41;
   NodeOptional n42 = new NodeOptional();
   NodeToken n43;
   Token n44;

   
}
{
   n1=<MULTIPLY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<BY> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=Identifier()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=Literal()
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      { n14 = new NodeList(); }
      { n11 = new NodeSequence(2); }
      n13=<GIVING> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      (
         { n17 = new NodeOptional(); }
         { n15 = new NodeSequence(2); }
         n16=Identifier()
         { n15.addNode(n16); }
         (
            n19=<ROUNDED> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
         )?
         { n15.addNode(n17); }
         { n14.addNode(n15); }
      )+
      { n14.nodes.trimToSize(); }
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n21 = new NodeSequence(5); }
      (
         n24=<ON> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n21.addNode(n22); }
      n26=<SIZE> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n21.addNode(n25); }
      n28=<ERROR> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n21.addNode(n27); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n29=StatementList()
      { n21.addNode(n29); }
      { n20.addNode(n21); }
   )?
   (
      { n34 = new NodeOptional(); }
      { n31 = new NodeSequence(6); }
      n33=<NOT> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      (
         n36=<ON> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n34.addNode(n35); }
      )?
      { n31.addNode(n34); }
      n38=<SIZE> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n31.addNode(n37); }
      n40=<ERROR> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n31.addNode(n39); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n41=StatementList()
      { n31.addNode(n41); }
      { n30.addNode(n31); }
   )?
   (
      n44=<END_MULTIPLY> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n42.addNode(n43); }
   )?
   
   { return new MultiplyStatement(n0,n2,n5,n7,n10,n20,n30,n42); }
}

OpenStatement OpenStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeSequence n8;
   FileName n9;
   NodeOptional n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeList n25;
   NodeSequence n26;
   FileName n27;
   NodeOptional n28;
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeList n40;
   FileName n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeList n45;
   FileName n46;

   
}
{
   n1=<OPEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n25 = new NodeList(); }
      { n40 = new NodeList(); }
      { n45 = new NodeList(); }
      (
         { n4 = new NodeSequence(2); }
         n6=<INPUT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            { n10 = new NodeOptional(); }
            { n8 = new NodeSequence(2); }
            n9=FileName()
            { n8.addNode(n9); }
            (
               { n15 = new NodeOptional(); }
               (
                  (
                     n13=<REVERSED> { n12 = JTBToolkit.makeNodeToken(n13); }
                     { n11 = new NodeChoice(n12, 0); }
                  |
                     { n14 = new NodeSequence(3); }
                     (
                        n17=<WITH> { n16 = JTBToolkit.makeNodeToken(n17); }
                        { n15.addNode(n16); }
                     )?
                     { n14.addNode(n15); }
                     n19=<NO> { n18 = JTBToolkit.makeNodeToken(n19); }
                     { n14.addNode(n18); }
                     n21=<REWIND> { n20 = JTBToolkit.makeNodeToken(n21); }
                     { n14.addNode(n20); }
                     { n11 = new NodeChoice(n14, 1); }
                  )
                  
               )
               { n10.addNode(n11); }
            )?
            { n8.addNode(n10); }
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n4.addNode(n7); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n22 = new NodeSequence(2); }
         n24=<OUTPUT> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            { n28 = new NodeOptional(); }
            { n26 = new NodeSequence(2); }
            n27=FileName()
            { n26.addNode(n27); }
            (
               { n30 = new NodeOptional(); }
               { n29 = new NodeSequence(3); }
               (
                  n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               n34=<NO> { n33 = JTBToolkit.makeNodeToken(n34); }
               { n29.addNode(n33); }
               n36=<REWIND> { n35 = JTBToolkit.makeNodeToken(n36); }
               { n29.addNode(n35); }
               { n28.addNode(n29); }
            )?
            { n26.addNode(n28); }
            { n25.addNode(n26); }
         )+
         { n25.nodes.trimToSize(); }
         { n22.addNode(n25); }
         { n3 = new NodeChoice(n22, 1); }
      |
         { n37 = new NodeSequence(2); }
         n39=<I_O> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n37.addNode(n38); }
         (
            n41=FileName()
            { n40.addNode(n41); }
         )+
         { n40.nodes.trimToSize(); }
         { n37.addNode(n40); }
         { n3 = new NodeChoice(n37, 2); }
      |
         { n42 = new NodeSequence(2); }
         n44=<EXTEND> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
         (
            n46=FileName()
            { n45.addNode(n46); }
         )+
         { n45.nodes.trimToSize(); }
         { n42.addNode(n45); }
         { n3 = new NodeChoice(n42, 3); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new OpenStatement(n0,n2); }
}

PerformStatement PerformStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   PerformProcedureScopeClause n4;
   NodeOptional n5 = new NodeOptional();
   PerformFlavour n6;
   NodeListOptional n7 = new NodeListOptional();
   PerformAfterClause n8;
   NodeSequence n9;
   PerformFlavour n10;
   NodeChoice n11;
   NodeSequence n12;
   StatementList n13;
   NodeToken n14;
   Token n15;
   PerformProcedureScopeClause n16;

   
}
{
   n1=<PERFORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         n4=PerformProcedureScopeClause()
         { n3.addNode(n4); }
         (
            n6=PerformFlavour()
            { n5.addNode(n6); }
         )?
         { n3.addNode(n5); }
         (
            n8=PerformAfterClause()
            { n7.addNode(n8); }
         )*
         { n7.nodes.trimToSize(); }
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(2); }
         n10=PerformFlavour()
         { n9.addNode(n10); }
         (
            (
               { n12 = new NodeSequence(3); }
               
               {
                  nodeCounter.incrementLoopCounter();
               }
               
               n13=StatementList()
               { n12.addNode(n13); }
               n15=<END_PERFORM> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n12.addNode(n14); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n16=PerformProcedureScopeClause()
               { n11 = new NodeChoice(n16, 1); }
            )
            
         )
         { n9.addNode(n11); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   
   { return new PerformStatement(n0,n2); }
}

PerformFlavour PerformFlavour() :
{
   NodeChoice n0;
   PerformTimeClause n1;
   PerformUntilClause n2;
   PerformUntilWithTestClause n3;
   PerformVaryingWithTestClause n4;

   
}
{
   (
      n1=PerformTimeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PerformUntilClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PerformUntilWithTestClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=PerformVaryingWithTestClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new PerformFlavour(n0); }
}

PerformUntilWithTestClause PerformUntilWithTestClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   PerformTestPositionClause n2;
   PerformUntilClause n3;
   NodeSequence n4;
   PerformUntilClause n5;
   PerformTestPositionClause n6;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=PerformTestPositionClause()
         { n1.addNode(n2); }
         n3=PerformUntilClause()
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n4 = new NodeSequence(2); }
         n5=PerformUntilClause()
         { n4.addNode(n5); }
         n6=PerformTestPositionClause()
         { n4.addNode(n6); }
         { n0 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new PerformUntilWithTestClause(n0); }
}

PerformVaryingWithTestClause PerformVaryingWithTestClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   PerformTestPositionClause n2;
   PerformVaryingClause n3;
   NodeSequence n4;
   PerformVaryingClause n5;
   NodeOptional n6 = new NodeOptional();
   PerformTestPositionClause n7;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=PerformTestPositionClause()
         { n1.addNode(n2); }
         n3=PerformVaryingClause()
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n4 = new NodeSequence(2); }
         n5=PerformVaryingClause()
         { n4.addNode(n5); }
         (
            n7=PerformTestPositionClause()
            { n6.addNode(n7); }
         )?
         { n4.addNode(n6); }
         { n0 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new PerformVaryingWithTestClause(n0); }
}

PerformAfterClause PerformAfterClause() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   Identifier n11;
   Literal n12;
   PerformUntilClause n13;

   
}
{
   n1=<AFTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   n4=<FROM> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n6=Identifier()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=Literal()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   n9=<BY> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      (
         n11=Identifier()
         { n10 = new NodeChoice(n11, 0); }
      |
         n12=Literal()
         { n10 = new NodeChoice(n12, 1); }
      )
      
   )
   n13=PerformUntilClause()
   
   { return new PerformAfterClause(n0,n2,n3,n5,n8,n10,n13); }
}

PerformVaryingClause PerformVaryingClause() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   Identifier n11;
   Literal n12;
   PerformUntilClause n13;

   
}
{
   n1=<VARYING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   n4=<FROM> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n6=Identifier()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=Literal()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   n9=<BY> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      (
         n11=Identifier()
         { n10 = new NodeChoice(n11, 0); }
      |
         n12=Literal()
         { n10 = new NodeChoice(n12, 1); }
      )
      
   )
   n13=PerformUntilClause()
   
   { return new PerformVaryingClause(n0,n2,n3,n5,n8,n10,n13); }
}

PerformUntilClause PerformUntilClause() :
{
   NodeToken n0;
   Token n1;
   Condition n2;

   nodeCounter.incrementConditionCounter();
}
{
   n1=<UNTIL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   
   { return new PerformUntilClause(n0,n2); }
}

PerformTestPositionClause PerformTestPositionClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      n2=<WITH> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<TEST> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n7=<BEFORE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<AFTER> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new PerformTestPositionClause(n0,n3,n5); }
}

PerformProcedureScopeClause PerformProcedureScopeClause() :
{
   ProcedureName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ProcedureName n8;

   
}
{
   n0=ProcedureName()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<THROUGH> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<THRU> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ProcedureName()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new PerformProcedureScopeClause(n0,n1); }
}

PerformTimeClause PerformTimeClause() :
{
   NodeChoice n0;
   QualifiedDataName n1;
   IntegerConstant n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      (
         n1=QualifiedDataName()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=IntegerConstant()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   n4=<TIMES> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PerformTimeClause(n0,n3); }
}

ReadStatement ReadStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   QualifiedDataName n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   QualifiedDataName n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   StatementList n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   StatementList n39;
   NodeOptional n40 = new NodeOptional();
   NodeSequence n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   StatementList n47;
   NodeOptional n48 = new NodeOptional();
   NodeSequence n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   StatementList n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;

   
}
{
   n1=<READ> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<NEXT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<RECORD> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   (
      { n10 = new NodeSequence(2); }
      n12=<INTO> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13=QualifiedDataName()
      { n10.addNode(n13); }
      { n9.addNode(n10); }
   )?
   (
      { n18 = new NodeOptional(); }
      { n15 = new NodeSequence(3); }
      n17=<KEY> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n15.addNode(n18); }
      n21=QualifiedDataName()
      { n15.addNode(n21); }
      { n14.addNode(n15); }
   )?
   (
      { n26 = new NodeOptional(); }
      { n23 = new NodeSequence(4); }
      n25=<INVALID> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      (
         n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n23.addNode(n26); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n29=StatementList()
      { n23.addNode(n29); }
      { n22.addNode(n23); }
   )?
   (
      { n36 = new NodeOptional(); }
      { n31 = new NodeSequence(5); }
      n33=<NOT> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n35=<INVALID> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n31.addNode(n34); }
      (
         n38=<KEY> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n31.addNode(n36); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n39=StatementList()
      { n31.addNode(n39); }
      { n30.addNode(n31); }
   )?
   (
      { n42 = new NodeOptional(); }
      { n41 = new NodeSequence(4); }
      (
         n44=<AT> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n41.addNode(n42); }
      n46=<END> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n41.addNode(n45); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n47=StatementList()
      { n41.addNode(n47); }
      { n40.addNode(n41); }
   )?
   (
      { n52 = new NodeOptional(); }
      { n49 = new NodeSequence(5); }
      n51=<NOT> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n49.addNode(n50); }
      (
         n54=<AT> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
      )?
      { n49.addNode(n52); }
      n56=<END> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n49.addNode(n55); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n57=StatementList()
      { n49.addNode(n57); }
      { n48.addNode(n49); }
   )?
   (
      n60=<END_READ> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n58.addNode(n59); }
   )?
   
   { return new ReadStatement(n0,n2,n3,n6,n9,n14,n22,n30,n40,n48,n58); }
}

ReleaseStatement ReleaseStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   QualifiedDataName n7;

   
}
{
   n1=<RELEASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=QualifiedDataName()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new ReleaseStatement(n0,n2,n3); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   StatementList n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   StatementList n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n7 = new NodeSequence(2); }
      n9=<INTO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=QualifiedDataName()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      n13=<AT> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   n15=<END> { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=StatementList()
   (
      { n21 = new NodeOptional(); }
      { n18 = new NodeSequence(4); }
      n20=<NOT> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      (
         n23=<AT> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
      )?
      { n18.addNode(n21); }
      n25=<END> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n18.addNode(n24); }
      n26=StatementList()
      { n18.addNode(n26); }
      { n17.addNode(n18); }
   )?
   (
      n29=<END_RETURN> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
   )?
   
   { return new ReturnStatement(n0,n2,n3,n6,n11,n14,n16,n17,n27); }
}

RewriteStatement RewriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   QualifiedDataName n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   StatementList n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   StatementList n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;

   
}
{
   n1=<REWRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=QualifiedDataName()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n9 = new NodeSequence(4); }
      n11=<INVALID> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         n14=<KEY> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n9.addNode(n12); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n15=StatementList()
      { n9.addNode(n15); }
      { n8.addNode(n9); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n17 = new NodeSequence(5); }
      n19=<NOT> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<INVALID> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      (
         n24=<KEY> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n17.addNode(n22); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n25=StatementList()
      { n17.addNode(n25); }
      { n16.addNode(n17); }
   )?
   (
      n28=<END_REWRITE> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
   )?
   
   { return new RewriteStatement(n0,n2,n3,n8,n16,n26); }
}

SearchStatement SearchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   QualifiedDataName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   StatementList n18;
   NodeList n19 = new NodeList();
   SearchPhrase n20;
   NodeOptional n21 = new NodeOptional();
   NodeToken n22;
   Token n23;

   
}
{
   n1=<SEARCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<ALL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=QualifiedDataName()
   (
      { n7 = new NodeSequence(2); }
      n9=<VARYING> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=QualifiedDataName()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n12 = new NodeSequence(4); }
      (
         n15=<AT> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n12.addNode(n13); }
      n17=<END> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n18=StatementList()
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      n20=SearchPhrase()
      { n19.addNode(n20); }
   )+
   { n19.nodes.trimToSize(); }
   (
      n23=<END_SEARCH> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
   )?
   
   { return new SearchStatement(n0,n2,n5,n6,n11,n19,n21); }
}

SearchPhrase SearchPhrase() :
{
   NodeToken n0;
   Token n1;
   Condition n2;
   NodeChoice n3;
   StatementList n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   nodeCounter.incrementBranchCounter();nodeCounter.incrementConditionCounter();
}
{
   n1=<WHEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   (
      (
         n4=StatementList()
         { n3 = new NodeChoice(n4, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7=<NEXT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n9=<SENTENCE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5.addNode(n8); }
         { n3 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new SearchPhrase(n0,n2,n3); }
}

SetStatement SetStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   Identifier n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Literal n22;
   NodeSequence n23;
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29 = new NodeOptional();
   NodeToken n30;
   Token n31;
   NodeChoice n32;
   Identifier n33;
   Literal n34;

   
}
{
   n1=<SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      (
         { n9 = new NodeSequence(2); }
         n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            (
               n13=Identifier()
               { n12 = new NodeChoice(n13, 0); }
            |
               n15=<TRUE> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n12 = new NodeChoice(n14, 1); }
            |
               n17=<FALSE> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n12 = new NodeChoice(n16, 2); }
            |
               n19=<ON> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n12 = new NodeChoice(n18, 3); }
            |
               n21=<OFF> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n12 = new NodeChoice(n20, 4); }
            |
               n22=Literal()
               { n12 = new NodeChoice(n22, 5); }
            )
            
         )
         { n9.addNode(n12); }
         { n8 = new NodeChoice(n9, 0); }
      |
         { n23 = new NodeSequence(3); }
         (
            (
               n26=<UP> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n24 = new NodeChoice(n25, 0); }
            |
               n28=<DOWN> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n24 = new NodeChoice(n27, 1); }
            )
            
         )
         { n23.addNode(n24); }
         (
            n31=<BY> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n23.addNode(n29); }
         (
            (
               n33=Identifier()
               { n32 = new NodeChoice(n33, 0); }
            |
               n34=Literal()
               { n32 = new NodeChoice(n34, 1); }
            )
            
         )
         { n23.addNode(n32); }
         { n8 = new NodeChoice(n23, 1); }
      )
      
   )
   
   { return new SetStatement(n0,n2,n8); }
}

SortStatement SortStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   QualifiedDataName n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeOptional n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   AlphabetName n41;
   NodeChoice n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeList n46 = new NodeList();
   FileName n47;
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeOptional n53 = new NodeOptional();
   NodeToken n54;
   Token n55;
   ProcedureName n56;
   NodeOptional n57 = new NodeOptional();
   NodeSequence n58;
   NodeChoice n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   ProcedureName n64;
   NodeChoice n65;
   NodeSequence n66;
   NodeToken n67;
   Token n68;
   NodeList n69 = new NodeList();
   FileName n70;
   NodeSequence n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeOptional n76 = new NodeOptional();
   NodeToken n77;
   Token n78;
   ProcedureName n79;
   NodeOptional n80 = new NodeOptional();
   NodeSequence n81;
   NodeChoice n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   ProcedureName n87;

   
}
{
   n1=<SORT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         n17=QualifiedDataName()
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n20 = new NodeOptional(); }
      { n25 = new NodeOptional(); }
      { n28 = new NodeOptional(); }
      { n19 = new NodeSequence(4); }
      (
         n22=<WITH> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n19.addNode(n20); }
      n24=<DUPLICATES> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n19.addNode(n23); }
      (
         n27=<IN> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n19.addNode(n25); }
      (
         n30=<ORDER> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n19.addNode(n28); }
      { n18.addNode(n19); }
   )?
   (
      { n33 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n32 = new NodeSequence(4); }
      (
         n35=<COLLATING> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
      )?
      { n32.addNode(n33); }
      n37=<SEQUENCE> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n32.addNode(n36); }
      (
         n40=<IS> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n32.addNode(n38); }
      n41=AlphabetName()
      { n32.addNode(n41); }
      { n31.addNode(n32); }
   )?
   (
      (
         { n43 = new NodeSequence(2); }
         n45=<USING> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
         (
            n47=FileName()
            { n46.addNode(n47); }
         )+
         { n46.nodes.trimToSize(); }
         { n43.addNode(n46); }
         { n42 = new NodeChoice(n43, 0); }
      |
         { n48 = new NodeSequence(5); }
         n50=<INPUT> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
         n52=<PROCEDURE> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n48.addNode(n51); }
         (
            n55=<IS> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n48.addNode(n53); }
         n56=ProcedureName()
         { n48.addNode(n56); }
         (
            { n58 = new NodeSequence(2); }
            (
               (
                  n61=<THROUGH> { n60 = JTBToolkit.makeNodeToken(n61); }
                  { n59 = new NodeChoice(n60, 0); }
               |
                  n63=<THRU> { n62 = JTBToolkit.makeNodeToken(n63); }
                  { n59 = new NodeChoice(n62, 1); }
               )
               
            )
            { n58.addNode(n59); }
            n64=ProcedureName()
            { n58.addNode(n64); }
            { n57.addNode(n58); }
         )?
         { n48.addNode(n57); }
         { n42 = new NodeChoice(n48, 1); }
      )
      
   )
   (
      (
         { n66 = new NodeSequence(2); }
         n68=<GIVING> { n67 = JTBToolkit.makeNodeToken(n68); }
         { n66.addNode(n67); }
         (
            n70=FileName()
            { n69.addNode(n70); }
         )+
         { n69.nodes.trimToSize(); }
         { n66.addNode(n69); }
         { n65 = new NodeChoice(n66, 0); }
      |
         { n71 = new NodeSequence(5); }
         n73=<OUTPUT> { n72 = JTBToolkit.makeNodeToken(n73); }
         { n71.addNode(n72); }
         n75=<PROCEDURE> { n74 = JTBToolkit.makeNodeToken(n75); }
         { n71.addNode(n74); }
         (
            n78=<IS> { n77 = JTBToolkit.makeNodeToken(n78); }
            { n76.addNode(n77); }
         )?
         { n71.addNode(n76); }
         n79=ProcedureName()
         { n71.addNode(n79); }
         (
            { n81 = new NodeSequence(2); }
            (
               (
                  n84=<THROUGH> { n83 = JTBToolkit.makeNodeToken(n84); }
                  { n82 = new NodeChoice(n83, 0); }
               |
                  n86=<THRU> { n85 = JTBToolkit.makeNodeToken(n86); }
                  { n82 = new NodeChoice(n85, 1); }
               )
               
            )
            { n81.addNode(n82); }
            n87=ProcedureName()
            { n81.addNode(n87); }
            { n80.addNode(n81); }
         )?
         { n71.addNode(n80); }
         { n65 = new NodeChoice(n71, 1); }
      )
      
   )
   
   { return new SortStatement(n0,n2,n3,n18,n31,n42,n65); }
}

StartStatement StartStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32;
   NodeToken n33;
   Token n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeOptional n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   QualifiedDataName n55;
   NodeOptional n56 = new NodeOptional();
   NodeSequence n57;
   NodeToken n58;
   Token n59;
   NodeOptional n60;
   NodeToken n61;
   Token n62;
   StatementList n63;
   NodeOptional n64 = new NodeOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeOptional n70;
   NodeToken n71;
   Token n72;
   StatementList n73;
   NodeOptional n74 = new NodeOptional();
   NodeToken n75;
   Token n76;

   
}
{
   n1=<START> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n7 = new NodeOptional(); }
      { n14 = new NodeOptional(); }
      { n22 = new NodeOptional(); }
      { n32 = new NodeOptional(); }
      { n43 = new NodeOptional(); }
      { n50 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      n6=<KEY> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      (
         (
            { n11 = new NodeSequence(2); }
            n13=<EQUAL> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            (
               n16=<TO> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
            )?
            { n11.addNode(n14); }
            { n10 = new NodeChoice(n11, 0); }
         |
            n18=<EQUALCHAR> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n10 = new NodeChoice(n17, 1); }
         |
            { n19 = new NodeSequence(2); }
            n21=<GREATER> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            (
               n24=<THAN> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n22.addNode(n23); }
            )?
            { n19.addNode(n22); }
            { n10 = new NodeChoice(n19, 2); }
         |
            n26=<MORETHANCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n10 = new NodeChoice(n25, 3); }
         |
            { n27 = new NodeSequence(3); }
            n29=<NOT> { n28 = JTBToolkit.makeNodeToken(n29); }
            { n27.addNode(n28); }
            n31=<LESS> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n27.addNode(n30); }
            (
               n34=<THAN> { n33 = JTBToolkit.makeNodeToken(n34); }
               { n32.addNode(n33); }
            )?
            { n27.addNode(n32); }
            { n10 = new NodeChoice(n27, 4); }
         |
            { n35 = new NodeSequence(2); }
            n37=<NOT> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n35.addNode(n36); }
            n39=<LESSTHANCHAR> { n38 = JTBToolkit.makeNodeToken(n39); }
            { n35.addNode(n38); }
            { n10 = new NodeChoice(n35, 5); }
         |
            { n40 = new NodeSequence(5); }
            n42=<GREATER> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
            (
               n45=<THAN> { n44 = JTBToolkit.makeNodeToken(n45); }
               { n43.addNode(n44); }
            )?
            { n40.addNode(n43); }
            n47=<OR> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n40.addNode(n46); }
            n49=<EQUAL> { n48 = JTBToolkit.makeNodeToken(n49); }
            { n40.addNode(n48); }
            (
               n52=<TO> { n51 = JTBToolkit.makeNodeToken(n52); }
               { n50.addNode(n51); }
            )?
            { n40.addNode(n50); }
            { n10 = new NodeChoice(n40, 6); }
         |
            n54=<MORETHANOREQUAL> { n53 = JTBToolkit.makeNodeToken(n54); }
            { n10 = new NodeChoice(n53, 7); }
         )
         
      )
      { n4.addNode(n10); }
      n55=QualifiedDataName()
      { n4.addNode(n55); }
      { n3.addNode(n4); }
   )?
   (
      { n60 = new NodeOptional(); }
      { n57 = new NodeSequence(4); }
      n59=<INVALID> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n57.addNode(n58); }
      (
         n62=<KEY> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n60.addNode(n61); }
      )?
      { n57.addNode(n60); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n63=StatementList()
      { n57.addNode(n63); }
      { n56.addNode(n57); }
   )?
   (
      { n70 = new NodeOptional(); }
      { n65 = new NodeSequence(5); }
      n67=<NOT> { n66 = JTBToolkit.makeNodeToken(n67); }
      { n65.addNode(n66); }
      n69=<INVALID> { n68 = JTBToolkit.makeNodeToken(n69); }
      { n65.addNode(n68); }
      (
         n72=<KEY> { n71 = JTBToolkit.makeNodeToken(n72); }
         { n70.addNode(n71); }
      )?
      { n65.addNode(n70); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n73=StatementList()
      { n65.addNode(n73); }
      { n64.addNode(n65); }
   )?
   (
      n76=<END_START> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n74.addNode(n75); }
   )?
   
   { return new StartStatement(n0,n2,n3,n56,n64,n74); }
}

StopStatement StopStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Literal n5;

   
}
{
   n1=<STOP> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<RUN> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Literal()
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new StopStatement(n0,n2); }
}

StringStatement StringStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeList n4;
   NodeSequence n5;
   NodeChoice n6;
   Identifier n7;
   QualifiedDataName n8;
   Literal n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   Identifier n19;
   Literal n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Identifier n25;
   NodeOptional n26 = new NodeOptional();
   NodeSequence n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   QualifiedDataName n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   StatementList n41;
   NodeOptional n42 = new NodeOptional();
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   StatementList n51;
   NodeOptional n52 = new NodeOptional();
   NodeToken n53;
   Token n54;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeList(); }
      { n15 = new NodeOptional(); }
      { n3 = new NodeSequence(4); }
      (
         { n10 = new NodeOptional(); }
         { n5 = new NodeSequence(2); }
         (
            (
               n7=Identifier()
               { n6 = new NodeChoice(n7, 0); }
            |
               n8=QualifiedDataName()
               { n6 = new NodeChoice(n8, 1); }
            |
               n9=Literal()
               { n6 = new NodeChoice(n9, 2); }
            )
            
         )
         { n5.addNode(n6); }
         (
            n12=<COMMACHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n5.addNode(n10); }
         { n4.addNode(n5); }
      )+
      { n4.nodes.trimToSize(); }
      { n3.addNode(n4); }
      n14=<DELIMITED> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n3.addNode(n13); }
      (
         n17=<BY> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n3.addNode(n15); }
      (
         (
            n19=Identifier()
            { n18 = new NodeChoice(n19, 0); }
         |
            n20=Literal()
            { n18 = new NodeChoice(n20, 1); }
         |
            n22=<SIZE> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n18 = new NodeChoice(n21, 2); }
         )
         
      )
      { n3.addNode(n18); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n24=<INTO> { n23 = JTBToolkit.makeNodeToken(n24); }
   n25=Identifier()
   (
      { n28 = new NodeOptional(); }
      { n27 = new NodeSequence(3); }
      (
         n30=<WITH> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n27.addNode(n28); }
      n32=<POINTER> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n27.addNode(n31); }
      n33=QualifiedDataName()
      { n27.addNode(n33); }
      { n26.addNode(n27); }
   )?
   (
      { n36 = new NodeOptional(); }
      { n35 = new NodeSequence(4); }
      (
         n38=<ON> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n35.addNode(n36); }
      n40=<OVERFLOW> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n35.addNode(n39); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n41=StatementList()
      { n35.addNode(n41); }
      { n34.addNode(n35); }
   )?
   (
      { n46 = new NodeOptional(); }
      { n43 = new NodeSequence(5); }
      n45=<NOT> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      (
         n48=<ON> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n43.addNode(n46); }
      n50=<OVERFLOW> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n43.addNode(n49); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n51=StatementList()
      { n43.addNode(n51); }
      { n42.addNode(n43); }
   )?
   (
      n54=<END_STRING> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n52.addNode(n53); }
   )?
   
   { return new StringStatement(n0,n2,n23,n25,n26,n34,n42,n52); }
}

SubtractStatement SubtractStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   Literal n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeSequence n16;
   NodeList n17 = new NodeList();
   NodeChoice n18;
   Identifier n19;
   Literal n20;
   NodeToken n21;
   Token n22;
   NodeList n23 = new NodeList();
   NodeSequence n24;
   Identifier n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeChoice n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   QualifiedDataName n35;
   NodeToken n36;
   Token n37;
   QualifiedDataName n38;
   NodeOptional n39 = new NodeOptional();
   NodeSequence n40;
   NodeOptional n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   StatementList n48;
   NodeOptional n49 = new NodeOptional();
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   NodeOptional n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   StatementList n60;
   NodeOptional n61 = new NodeOptional();
   NodeToken n62;
   Token n63;

   
}
{
   n1=<SUBTRACT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(6); }
         (
            (
               n5=Identifier()
               { n4 = new NodeChoice(n5, 0); }
            |
               n6=Literal()
               { n4 = new NodeChoice(n6, 1); }
            )
            
         )
         { n3.addNode(n4); }
         n8=<FROM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         n9=Identifier()
         { n3.addNode(n9); }
         (
            n12=<ROUNDED> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n3.addNode(n10); }
         n14=<GIVING> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n3.addNode(n13); }
         n15=Identifier()
         { n3.addNode(n15); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n16 = new NodeSequence(3); }
         (
            (
               n19=Identifier()
               { n18 = new NodeChoice(n19, 0); }
            |
               n20=Literal()
               { n18 = new NodeChoice(n20, 1); }
            )
            { n17.addNode(n18); }
         )+
         { n17.nodes.trimToSize(); }
         { n16.addNode(n17); }
         n22=<FROM> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n16.addNode(n21); }
         (
            { n26 = new NodeOptional(); }
            { n24 = new NodeSequence(2); }
            n25=Identifier()
            { n24.addNode(n25); }
            (
               n28=<ROUNDED> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n26.addNode(n27); }
            )?
            { n24.addNode(n26); }
            { n23.addNode(n24); }
         )+
         { n23.nodes.trimToSize(); }
         { n16.addNode(n23); }
         { n2 = new NodeChoice(n16, 1); }
      |
         { n29 = new NodeSequence(4); }
         (
            (
               n32=<CORRESPONDING> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n30 = new NodeChoice(n31, 0); }
            |
               n34=<CORR> { n33 = JTBToolkit.makeNodeToken(n34); }
               { n30 = new NodeChoice(n33, 1); }
            )
            
         )
         { n29.addNode(n30); }
         n35=QualifiedDataName()
         { n29.addNode(n35); }
         n37=<FROM> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n29.addNode(n36); }
         n38=QualifiedDataName()
         { n29.addNode(n38); }
         { n2 = new NodeChoice(n29, 2); }
      )
      
   )
   (
      { n41 = new NodeOptional(); }
      { n40 = new NodeSequence(5); }
      (
         n43=<ON> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
      )?
      { n40.addNode(n41); }
      n45=<SIZE> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n40.addNode(n44); }
      n47=<ERROR> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n40.addNode(n46); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n48=StatementList()
      { n40.addNode(n48); }
      { n39.addNode(n40); }
   )?
   (
      { n53 = new NodeOptional(); }
      { n50 = new NodeSequence(6); }
      n52=<NOT> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n50.addNode(n51); }
      (
         n55=<ON> { n54 = JTBToolkit.makeNodeToken(n55); }
         { n53.addNode(n54); }
      )?
      { n50.addNode(n53); }
      n57=<SIZE> { n56 = JTBToolkit.makeNodeToken(n57); }
      { n50.addNode(n56); }
      n59=<ERROR> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n50.addNode(n58); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n60=StatementList()
      { n50.addNode(n60); }
      { n49.addNode(n50); }
   )?
   (
      n63=<END_SUBTRACT> { n62 = JTBToolkit.makeNodeToken(n63); }
      { n61.addNode(n62); }
   )?
   
   { return new SubtractStatement(n0,n2,n39,n49,n61); }
}

UnstringStatement UnstringStatement() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   Identifier n14;
   Literal n15;
   NodeListOptional n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   Identifier n24;
   Literal n25;
   NodeToken n26;
   Token n27;
   NodeList n28 = new NodeList();
   NodeSequence n29;
   Identifier n30;
   NodeOptional n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeOptional n35;
   NodeToken n36;
   Token n37;
   Identifier n38;
   NodeOptional n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   Identifier n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeOptional n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   QualifiedDataName n54;
   NodeOptional n55 = new NodeOptional();
   NodeSequence n56;
   NodeToken n57;
   Token n58;
   NodeOptional n59;
   NodeToken n60;
   Token n61;
   QualifiedDataName n62;
   NodeOptional n63 = new NodeOptional();
   NodeSequence n64;
   NodeOptional n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   StatementList n70;
   NodeOptional n71 = new NodeOptional();
   NodeSequence n72;
   NodeToken n73;
   Token n74;
   NodeOptional n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   StatementList n80;
   NodeOptional n81 = new NodeOptional();
   NodeToken n82;
   Token n83;

   
}
{
   n1=<UNSTRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   (
      { n7 = new NodeOptional(); }
      { n10 = new NodeOptional(); }
      { n16 = new NodeListOptional(); }
      { n4 = new NodeSequence(5); }
      n6=<DELIMITED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9=<BY> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      (
         n12=<ALL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n4.addNode(n10); }
      (
         (
            n14=Identifier()
            { n13 = new NodeChoice(n14, 0); }
         |
            n15=Literal()
            { n13 = new NodeChoice(n15, 1); }
         )
         
      )
      { n4.addNode(n13); }
      (
         { n20 = new NodeOptional(); }
         { n17 = new NodeSequence(3); }
         n19=<OR> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         (
            n22=<ALL> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
         )?
         { n17.addNode(n20); }
         (
            (
               n24=Identifier()
               { n23 = new NodeChoice(n24, 0); }
            |
               n25=Literal()
               { n23 = new NodeChoice(n25, 1); }
            )
            
         )
         { n17.addNode(n23); }
         { n16.addNode(n17); }
      )*
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )?
   n27=<INTO> { n26 = JTBToolkit.makeNodeToken(n27); }
   (
      { n31 = new NodeOptional(); }
      { n39 = new NodeOptional(); }
      { n29 = new NodeSequence(3); }
      n30=Identifier()
      { n29.addNode(n30); }
      (
         { n35 = new NodeOptional(); }
         { n32 = new NodeSequence(3); }
         n34=<DELIMITER> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
         (
            n37=<IN> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n35.addNode(n36); }
         )?
         { n32.addNode(n35); }
         n38=Identifier()
         { n32.addNode(n38); }
         { n31.addNode(n32); }
      )?
      { n29.addNode(n31); }
      (
         { n43 = new NodeOptional(); }
         { n40 = new NodeSequence(3); }
         n42=<COUNT> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n40.addNode(n41); }
         (
            n45=<IN> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n40.addNode(n43); }
         n46=Identifier()
         { n40.addNode(n46); }
         { n39.addNode(n40); }
      )?
      { n29.addNode(n39); }
      { n28.addNode(n29); }
   )+
   { n28.nodes.trimToSize(); }
   (
      { n49 = new NodeOptional(); }
      { n48 = new NodeSequence(3); }
      (
         n51=<WITH> { n50 = JTBToolkit.makeNodeToken(n51); }
         { n49.addNode(n50); }
      )?
      { n48.addNode(n49); }
      n53=<POINTER> { n52 = JTBToolkit.makeNodeToken(n53); }
      { n48.addNode(n52); }
      n54=QualifiedDataName()
      { n48.addNode(n54); }
      { n47.addNode(n48); }
   )?
   (
      { n59 = new NodeOptional(); }
      { n56 = new NodeSequence(3); }
      n58=<TALLYING> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n56.addNode(n57); }
      (
         n61=<IN> { n60 = JTBToolkit.makeNodeToken(n61); }
         { n59.addNode(n60); }
      )?
      { n56.addNode(n59); }
      n62=QualifiedDataName()
      { n56.addNode(n62); }
      { n55.addNode(n56); }
   )?
   (
      { n65 = new NodeOptional(); }
      { n64 = new NodeSequence(4); }
      (
         n67=<ON> { n66 = JTBToolkit.makeNodeToken(n67); }
         { n65.addNode(n66); }
      )?
      { n64.addNode(n65); }
      n69=<OVERFLOW> { n68 = JTBToolkit.makeNodeToken(n69); }
      { n64.addNode(n68); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n70=StatementList()
      { n64.addNode(n70); }
      { n63.addNode(n64); }
   )?
   (
      { n75 = new NodeOptional(); }
      { n72 = new NodeSequence(5); }
      n74=<NOT> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n72.addNode(n73); }
      (
         n77=<ON> { n76 = JTBToolkit.makeNodeToken(n77); }
         { n75.addNode(n76); }
      )?
      { n72.addNode(n75); }
      n79=<OVERFLOW> { n78 = JTBToolkit.makeNodeToken(n79); }
      { n72.addNode(n78); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n80=StatementList()
      { n72.addNode(n80); }
      { n71.addNode(n72); }
   )?
   (
      n83=<END_UNSTRING> { n82 = JTBToolkit.makeNodeToken(n83); }
      { n81.addNode(n82); }
   )?
   
   { return new UnstringStatement(n0,n2,n3,n26,n28,n47,n55,n63,n71,n81); }
}

UseStatement UseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeList n13 = new NodeList();
   ProcedureName n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeOptional n21 = new NodeOptional();
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;
   NodeChoice n29;
   NodeChoice n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeSequence n35;
   NodeOptional n36 = new NodeOptional();
   NodeChoice n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42 = new NodeOptional();
   NodeChoice n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   NodeOptional n54 = new NodeOptional();
   NodeToken n55;
   Token n56;
   NodeChoice n57;
   NodeList n58 = new NodeList();
   FileName n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeToken n64;
   Token n65;
   NodeToken n66;
   Token n67;

   
}
{
   n1=<USE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         (
            n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n8=<DEBUGGING> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         (
            n11=<ON> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n3.addNode(n9); }
         (
            (
               (
                  n14=ProcedureName()
                  { n13.addNode(n14); }
               )+
               { n13.nodes.trimToSize(); }
               { n12 = new NodeChoice(n13, 0); }
            |
               { n15 = new NodeSequence(2); }
               n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
               n19=<PROCEDURES> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15.addNode(n18); }
               { n12 = new NodeChoice(n15, 1); }
            )
            
         )
         { n3.addNode(n12); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n20 = new NodeSequence(7); }
         (
            n23=<GLOBAL> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
         )?
         { n20.addNode(n21); }
         n25=<AFTER> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n20.addNode(n24); }
         (
            n28=<STANDARD> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
         )?
         { n20.addNode(n26); }
         (
            (
               (
                  (
                     n32=<EXCEPTION> { n31 = JTBToolkit.makeNodeToken(n32); }
                     { n30 = new NodeChoice(n31, 0); }
                  |
                     n34=<ERROR> { n33 = JTBToolkit.makeNodeToken(n34); }
                     { n30 = new NodeChoice(n33, 1); }
                  )
                  
               )
               { n29 = new NodeChoice(n30, 0); }
            |
               { n35 = new NodeSequence(3); }
               (
                  (
                     (
                        n39=<BEGINNING> { n38 = JTBToolkit.makeNodeToken(n39); }
                        { n37 = new NodeChoice(n38, 0); }
                     |
                        n41=<ENDING> { n40 = JTBToolkit.makeNodeToken(n41); }
                        { n37 = new NodeChoice(n40, 1); }
                     )
                     
                  )
                  { n36.addNode(n37); }
               )?
               { n35.addNode(n36); }
               (
                  (
                     (
                        n45=<FILE> { n44 = JTBToolkit.makeNodeToken(n45); }
                        { n43 = new NodeChoice(n44, 0); }
                     |
                        n47=<REEL> { n46 = JTBToolkit.makeNodeToken(n47); }
                        { n43 = new NodeChoice(n46, 1); }
                     |
                        n49=<UNIT> { n48 = JTBToolkit.makeNodeToken(n49); }
                        { n43 = new NodeChoice(n48, 2); }
                     )
                     
                  )
                  { n42.addNode(n43); }
               )?
               { n35.addNode(n42); }
               n51=<LABEL> { n50 = JTBToolkit.makeNodeToken(n51); }
               { n35.addNode(n50); }
               { n29 = new NodeChoice(n35, 1); }
            )
            
         )
         { n20.addNode(n29); }
         n53=<PROCEDURE> { n52 = JTBToolkit.makeNodeToken(n53); }
         { n20.addNode(n52); }
         (
            n56=<ON> { n55 = JTBToolkit.makeNodeToken(n56); }
            { n54.addNode(n55); }
         )?
         { n20.addNode(n54); }
         (
            (
               (
                  n59=FileName()
                  { n58.addNode(n59); }
               )+
               { n58.nodes.trimToSize(); }
               { n57 = new NodeChoice(n58, 0); }
            |
               n61=<INPUT> { n60 = JTBToolkit.makeNodeToken(n61); }
               { n57 = new NodeChoice(n60, 1); }
            |
               n63=<OUTPUT> { n62 = JTBToolkit.makeNodeToken(n63); }
               { n57 = new NodeChoice(n62, 2); }
            |
               n65=<I_O> { n64 = JTBToolkit.makeNodeToken(n65); }
               { n57 = new NodeChoice(n64, 3); }
            |
               n67=<EXTEND> { n66 = JTBToolkit.makeNodeToken(n67); }
               { n57 = new NodeChoice(n66, 4); }
            )
            
         )
         { n20.addNode(n57); }
         { n2 = new NodeChoice(n20, 1); }
      )
      
   )
   
   { return new UseStatement(n0,n2); }
}

WriteStatement WriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   QualifiedDataName n7;
   NodeOptional n8 = new NodeOptional();
   AdvancingPhrase n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   StatementList n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   StatementList n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   StatementList n41;
   NodeOptional n42 = new NodeOptional();
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48;
   NodeToken n49;
   Token n50;
   StatementList n51;
   NodeOptional n52 = new NodeOptional();
   NodeToken n53;
   Token n54;

   
}
{
   n1=<WRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=QualifiedDataName()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      n9=AdvancingPhrase()
      { n8.addNode(n9); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n11 = new NodeSequence(4); }
      (
         n14=<AT> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n11.addNode(n12); }
      (
         (
            n17=<END_OF_PAGE> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15 = new NodeChoice(n16, 0); }
         |
            n19=<EOP> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n15 = new NodeChoice(n18, 1); }
         )
         
      )
      { n11.addNode(n15); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n20=StatementList()
      { n11.addNode(n20); }
      { n10.addNode(n11); }
   )?
   (
      { n25 = new NodeOptional(); }
      { n22 = new NodeSequence(5); }
      n24=<NOT> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      (
         n27=<AT> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n22.addNode(n25); }
      (
         (
            n30=<END_OF_PAGE> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28 = new NodeChoice(n29, 0); }
         |
            n32=<EOP> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n28 = new NodeChoice(n31, 1); }
         )
         
      )
      { n22.addNode(n28); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n33=StatementList()
      { n22.addNode(n33); }
      { n21.addNode(n22); }
   )?
   (
      { n38 = new NodeOptional(); }
      { n35 = new NodeSequence(4); }
      n37=<INVALID> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      (
         n40=<KEY> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n35.addNode(n38); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n41=StatementList()
      { n35.addNode(n41); }
      { n34.addNode(n35); }
   )?
   (
      { n48 = new NodeOptional(); }
      { n43 = new NodeSequence(5); }
      n45=<NOT> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      n47=<INVALID> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n43.addNode(n46); }
      (
         n50=<KEY> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
      )?
      { n43.addNode(n48); }
      
      {
         nodeCounter.incrementBranchCounter();
      }
      
      n51=StatementList()
      { n43.addNode(n51); }
      { n42.addNode(n43); }
   )?
   (
      n54=<END_WRITE> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n52.addNode(n53); }
   )?
   
   { return new WriteStatement(n0,n2,n3,n8,n10,n21,n34,n42,n52); }
}

AdvancingPhrase AdvancingPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeChoice n12;
   Identifier n13;
   IntegerConstant n14;
   NodeOptional n15 = new NodeOptional();
   NodeChoice n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   MnemonicName n21;

   
}
{
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<ADVANCING> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n10=<PAGE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         { n11 = new NodeSequence(2); }
         (
            (
               n13=Identifier()
               { n12 = new NodeChoice(n13, 0); }
            |
               n14=IntegerConstant()
               { n12 = new NodeChoice(n14, 1); }
            )
            
         )
         { n11.addNode(n12); }
         (
            (
               (
                  n18=<LINE> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n16 = new NodeChoice(n17, 0); }
               |
                  n20=<LINES> { n19 = JTBToolkit.makeNodeToken(n20); }
                  { n16 = new NodeChoice(n19, 1); }
               )
               
            )
            { n15.addNode(n16); }
         )?
         { n11.addNode(n15); }
         { n8 = new NodeChoice(n11, 1); }
      |
         n21=MnemonicName()
         { n8 = new NodeChoice(n21, 2); }
      )
      
   )
   
   { return new AdvancingPhrase(n0,n5,n8); }
}

ExecCICSStatement ExecCICSStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   Identifier n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   Identifier n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   Literal n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   Identifier n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeChoice n58;
   Literal n59;
   CobolWord n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeToken n70;
   Token n71;
   NodeChoice n72;
   Literal n73;
   CobolWord n74;
   NodeToken n75;
   Token n76;
   NodeSequence n77;
   NodeToken n78;
   Token n79;
   NodeToken n80;
   Token n81;
   NodeToken n82;
   Token n83;
   NodeChoice n84;
   Literal n85;
   CobolWord n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeChoice n93;
   Literal n94;
   CobolWord n95;
   NodeToken n96;
   Token n97;
   NodeToken n98;
   Token n99;
   NodeToken n100;
   Token n101;
   NodeChoice n102;
   Literal n103;
   CobolWord n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeChoice n111;
   Literal n112;
   CobolWord n113;
   NodeToken n114;
   Token n115;
   NodeToken n116;
   Token n117;

   
}
{
   n1=<EXEC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<CICS> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n7=<RETURN> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n8 = new NodeSequence(6); }
         n10=<HANDLE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<ABEND> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         n14=<LABEL> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n8.addNode(n13); }
         n16="(" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n8.addNode(n15); }
         n17=Identifier()
         { n8.addNode(n17); }
         n19=")" { n18 = JTBToolkit.makeNodeToken(n19); }
         { n8.addNode(n18); }
         { n5 = new NodeChoice(n8, 1); }
      |
         { n20 = new NodeSequence(5); }
         n22=<ASSIGN> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         (
            (
               n25=<ABCODE> { n24 = JTBToolkit.makeNodeToken(n25); }
               { n23 = new NodeChoice(n24, 0); }
            |
               n27=<APPLID> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n23 = new NodeChoice(n26, 1); }
            )
            
         )
         { n20.addNode(n23); }
         n29="(" { n28 = JTBToolkit.makeNodeToken(n29); }
         { n20.addNode(n28); }
         n30=Identifier()
         { n20.addNode(n30); }
         n32=")" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n20.addNode(n31); }
         { n5 = new NodeChoice(n20, 2); }
      |
         { n33 = new NodeSequence(5); }
         n35=<LINK> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         n37=<PROGRAM> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n33.addNode(n36); }
         n39="(" { n38 = JTBToolkit.makeNodeToken(n39); }
         { n33.addNode(n38); }
         n40=Literal()
         { n33.addNode(n40); }
         n42=")" { n41 = JTBToolkit.makeNodeToken(n42); }
         { n33.addNode(n41); }
         { n5 = new NodeChoice(n33, 3); }
      |
         n44=<SYNCPOINT> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n5 = new NodeChoice(n43, 4); }
      |
         { n45 = new NodeSequence(4); }
         n47=<COMMAREA> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n45.addNode(n46); }
         n49="(" { n48 = JTBToolkit.makeNodeToken(n49); }
         { n45.addNode(n48); }
         n50=Identifier()
         { n45.addNode(n50); }
         n52=")" { n51 = JTBToolkit.makeNodeToken(n52); }
         { n45.addNode(n51); }
         { n5 = new NodeChoice(n45, 5); }
      |
         { n53 = new NodeSequence(4); }
         n55=<LENGTH> { n54 = JTBToolkit.makeNodeToken(n55); }
         { n53.addNode(n54); }
         n57="(" { n56 = JTBToolkit.makeNodeToken(n57); }
         { n53.addNode(n56); }
         (
            (
               n59=Literal()
               { n58 = new NodeChoice(n59, 0); }
            |
               n60=CobolWord()
               { n58 = new NodeChoice(n60, 1); }
            )
            
         )
         { n53.addNode(n58); }
         n62=")" { n61 = JTBToolkit.makeNodeToken(n62); }
         { n53.addNode(n61); }
         { n5 = new NodeChoice(n53, 6); }
      |
         n64=<ASKTIME> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n5 = new NodeChoice(n63, 7); }
      |
         { n65 = new NodeSequence(5); }
         n67=<ABEND> { n66 = JTBToolkit.makeNodeToken(n67); }
         { n65.addNode(n66); }
         n69=<ABCODE> { n68 = JTBToolkit.makeNodeToken(n69); }
         { n65.addNode(n68); }
         n71="(" { n70 = JTBToolkit.makeNodeToken(n71); }
         { n65.addNode(n70); }
         (
            (
               n73=Literal()
               { n72 = new NodeChoice(n73, 0); }
            |
               n74=CobolWord()
               { n72 = new NodeChoice(n74, 1); }
            )
            
         )
         { n65.addNode(n72); }
         n76=")" { n75 = JTBToolkit.makeNodeToken(n76); }
         { n65.addNode(n75); }
         { n5 = new NodeChoice(n65, 8); }
      |
         { n77 = new NodeSequence(17); }
         n79=<START> { n78 = JTBToolkit.makeNodeToken(n79); }
         { n77.addNode(n78); }
         n81=<TRANSID> { n80 = JTBToolkit.makeNodeToken(n81); }
         { n77.addNode(n80); }
         n83="(" { n82 = JTBToolkit.makeNodeToken(n83); }
         { n77.addNode(n82); }
         (
            (
               n85=Literal()
               { n84 = new NodeChoice(n85, 0); }
            |
               n86=CobolWord()
               { n84 = new NodeChoice(n86, 1); }
            )
            
         )
         { n77.addNode(n84); }
         n88=")" { n87 = JTBToolkit.makeNodeToken(n88); }
         { n77.addNode(n87); }
         n90=<REQID> { n89 = JTBToolkit.makeNodeToken(n90); }
         { n77.addNode(n89); }
         n92="(" { n91 = JTBToolkit.makeNodeToken(n92); }
         { n77.addNode(n91); }
         (
            (
               n94=Literal()
               { n93 = new NodeChoice(n94, 0); }
            |
               n95=CobolWord()
               { n93 = new NodeChoice(n95, 1); }
            )
            
         )
         { n77.addNode(n93); }
         n97=")" { n96 = JTBToolkit.makeNodeToken(n97); }
         { n77.addNode(n96); }
         n99=<FROM> { n98 = JTBToolkit.makeNodeToken(n99); }
         { n77.addNode(n98); }
         n101="(" { n100 = JTBToolkit.makeNodeToken(n101); }
         { n77.addNode(n100); }
         (
            (
               n103=Literal()
               { n102 = new NodeChoice(n103, 0); }
            |
               n104=CobolWord()
               { n102 = new NodeChoice(n104, 1); }
            )
            
         )
         { n77.addNode(n102); }
         n106=")" { n105 = JTBToolkit.makeNodeToken(n106); }
         { n77.addNode(n105); }
         n108=<LENGTH> { n107 = JTBToolkit.makeNodeToken(n108); }
         { n77.addNode(n107); }
         n110="(" { n109 = JTBToolkit.makeNodeToken(n110); }
         { n77.addNode(n109); }
         (
            (
               n112=Literal()
               { n111 = new NodeChoice(n112, 0); }
            |
               n113=CobolWord()
               { n111 = new NodeChoice(n113, 1); }
            )
            
         )
         { n77.addNode(n111); }
         n115=")" { n114 = JTBToolkit.makeNodeToken(n115); }
         { n77.addNode(n114); }
         { n5 = new NodeChoice(n77, 9); }
      )
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n117=<END_EXEC> { n116 = JTBToolkit.makeNodeToken(n117); }
   
   { return new ExecCICSStatement(n0,n2,n4,n116); }
}

ExecSQLStatement ExecSQLStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   ExecSQLStatementDeclare n5;
   ExecSQLStatementUpdate n6;
   ExecSQLStatementInsert n7;
   ExecSQLStatementInclude n8;
   ExecSQLStatementSelect n9;
   ExecSQLStatementDelete n10;
   ExecSQLStatementSet n11;
   ExecSQLStatementLock n12;
   ExecSQLStatementBegin n13;
   ExecSQLStatementEnd n14;
   ExecSQLStatementCommit n15;
   ExecSQLStatementWhenever n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLIdentifier n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   SQLIdentifier n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   CobolWord n28;
   NodeToken n29;
   Token n30;
   NodeList n31 = new NodeList();
   NodeSequence n32;
   SQLParameter n33;
   NodeOptional n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeChoice n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;

   
}
{
   n1=<EXEC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SQL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n5=ExecSQLStatementDeclare()
         { n4 = new NodeChoice(n5, 0); }
      |
         n6=ExecSQLStatementUpdate()
         { n4 = new NodeChoice(n6, 1); }
      |
         n7=ExecSQLStatementInsert()
         { n4 = new NodeChoice(n7, 2); }
      |
         n8=ExecSQLStatementInclude()
         { n4 = new NodeChoice(n8, 3); }
      |
         n9=ExecSQLStatementSelect()
         { n4 = new NodeChoice(n9, 4); }
      |
         n10=ExecSQLStatementDelete()
         { n4 = new NodeChoice(n10, 5); }
      |
         n11=ExecSQLStatementSet()
         { n4 = new NodeChoice(n11, 6); }
      |
         n12=ExecSQLStatementLock()
         { n4 = new NodeChoice(n12, 7); }
      |
         n13=ExecSQLStatementBegin()
         { n4 = new NodeChoice(n13, 8); }
      |
         n14=ExecSQLStatementEnd()
         { n4 = new NodeChoice(n14, 9); }
      |
         n15=ExecSQLStatementCommit()
         { n4 = new NodeChoice(n15, 10); }
      |
         n16=ExecSQLStatementWhenever()
         { n4 = new NodeChoice(n16, 11); }
      |
         (
            { n17 = new NodeSequence(2); }
            n19=<CLOSE> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            n20=SQLIdentifier()
            { n17.addNode(n20); }
            
         )
         { n4 = new NodeChoice(n17, 12); }
      |
         (
            { n21 = new NodeSequence(2); }
            n23=<OPEN> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
            n24=SQLIdentifier()
            { n21.addNode(n24); }
            
         )
         { n4 = new NodeChoice(n21, 13); }
      |
         (
            { n25 = new NodeSequence(4); }
            n27=<FETCH> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
            n28=CobolWord()
            { n25.addNode(n28); }
            n30=<INTO> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n25.addNode(n29); }
            (
               { n34 = new NodeOptional(); }
               { n32 = new NodeSequence(2); }
               n33=SQLParameter()
               { n32.addNode(n33); }
               (
                  n36=<COMMACHAR> { n35 = JTBToolkit.makeNodeToken(n36); }
                  { n34.addNode(n35); }
               )?
               { n32.addNode(n34); }
               { n31.addNode(n32); }
            )+
            { n31.nodes.trimToSize(); }
            { n25.addNode(n31); }
            
         )
         { n4 = new NodeChoice(n25, 14); }
      |
         (
            { n37 = new NodeSequence(3); }
            n39=<WHENEVER> { n38 = JTBToolkit.makeNodeToken(n39); }
            { n37.addNode(n38); }
            (
               (
                  n42=<SQLERROR> { n41 = JTBToolkit.makeNodeToken(n42); }
                  { n40 = new NodeChoice(n41, 0); }
               |
                  n44=<SQLWARNING> { n43 = JTBToolkit.makeNodeToken(n44); }
                  { n40 = new NodeChoice(n43, 1); }
               |
                  (
                     { n45 = new NodeSequence(2); }
                     n47=<NOT> { n46 = JTBToolkit.makeNodeToken(n47); }
                     { n45.addNode(n46); }
                     n49=<FOUND> { n48 = JTBToolkit.makeNodeToken(n49); }
                     { n45.addNode(n48); }
                     
                  )
                  { n40 = new NodeChoice(n45, 2); }
               )
               
            )
            { n37.addNode(n40); }
            n51=<CONTINUE> { n50 = JTBToolkit.makeNodeToken(n51); }
            { n37.addNode(n50); }
            
         )
         { n4 = new NodeChoice(n37, 15); }
      )
      
   )
   n53=<END_EXEC> { n52 = JTBToolkit.makeNodeToken(n53); }
   
   { return new ExecSQLStatement(n0,n2,n4,n52); }
}

ExecSQLStatementUpdate ExecSQLStatementUpdate() :
{
   NodeToken n0;
   Token n1;
   SQLIdentifier n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeSequence n6;
   SQLIdentifier n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   SQLIdentifier n11;
   NodeOptional n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   CobolWord n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   SQLSelectWhere n21;

   
}
{
   n1=<UPDATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLIdentifier()
   n4=<SET> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      { n12 = new NodeOptional(); }
      { n17 = new NodeOptional(); }
      { n6 = new NodeSequence(4); }
      n7=SQLIdentifier()
      { n6.addNode(n7); }
      n9=<EQUALCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n6.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         n11=SQLIdentifier()
         { n10.addNode(n11); }
         (
            { n13 = new NodeSequence(2); }
            n15=<COLONCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
            n16=CobolWord()
            { n13.addNode(n16); }
            { n12.addNode(n13); }
         )?
         { n10.addNode(n12); }
         
      )
      { n6.addNode(n10); }
      (
         n19=<COMMACHAR> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
      )?
      { n6.addNode(n17); }
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   (
      n21=SQLSelectWhere()
      { n20.addNode(n21); }
   )?
   
   { return new ExecSQLStatementUpdate(n0,n2,n3,n5,n20); }
}

ExecSQLStatementInsert ExecSQLStatementInsert() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   CobolWord n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   SQLIdentifier n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeList n21 = new NodeList();
   NodeSequence n22;
   SQLIdentifier n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;

   
}
{
   n1=<INSERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INTO> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=CobolWord()
   (
      { n5 = new NodeSequence(3); }
      n7=<LPARENCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      (
         { n11 = new NodeOptional(); }
         { n9 = new NodeSequence(2); }
         n10=SQLIdentifier()
         { n9.addNode(n10); }
         (
            n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
         )?
         { n9.addNode(n11); }
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n5.addNode(n8); }
      n15=<RPARENCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n5.addNode(n14); }
      
   )
   n17=<VALUES> { n16 = JTBToolkit.makeNodeToken(n17); }
   (
      { n18 = new NodeSequence(3); }
      n20=<LPARENCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      (
         { n24 = new NodeOptional(); }
         { n22 = new NodeSequence(2); }
         n23=SQLIdentifier()
         { n22.addNode(n23); }
         (
            n26=<COMMACHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24.addNode(n25); }
         )?
         { n22.addNode(n24); }
         { n21.addNode(n22); }
      )+
      { n21.nodes.trimToSize(); }
      { n18.addNode(n21); }
      n28=<RPARENCHAR> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n18.addNode(n27); }
      
   )
   
   { return new ExecSQLStatementInsert(n0,n2,n4,n5,n16,n18); }
}

ExecSQLStatementDelete ExecSQLStatementDelete() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLIdentifier n4;
   NodeOptional n5 = new NodeOptional();
   SQLIdentifier n6;
   NodeOptional n7 = new NodeOptional();
   SQLSelectWhere n8;

   
}
{
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FROM> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLIdentifier()
   (
      n6=SQLIdentifier()
      { n5.addNode(n6); }
   )?
   (
      n8=SQLSelectWhere()
      { n7.addNode(n8); }
   )?
   
   { return new ExecSQLStatementDelete(n0,n2,n4,n5,n7); }
}

ExecSQLStatementInclude ExecSQLStatementInclude() :
{
   NodeToken n0;
   Token n1;
   SQLIdentifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   SQLSelectFrom n8;
   SQLSelectWhere n9;
   NodeOptional n10 = new NodeOptional();
   SQLSelectInnerJoin n11;
   NodeOptional n12 = new NodeOptional();
   SQLSelectWhere n13;
   NodeOptional n14 = new NodeOptional();
   SQLSelectGroupBy n15;
   NodeOptional n16 = new NodeOptional();
   SQLSelectHaving n17;
   NodeOptional n18 = new NodeOptional();
   SQLSelectOrderBy n19;
   NodeOptional n20 = new NodeOptional();
   SQLSelectForUpdate n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   SQLIdentifier n34;

   
}
{
   n1=<INCLUDE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLIdentifier()
   (
      { n4 = new NodeSequence(2); }
      n6=<END_EXEC> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         (
            n8=SQLSelectFrom()
            { n7 = new NodeChoice(n8, 0); }
         |
            n9=SQLSelectWhere()
            { n7 = new NodeChoice(n9, 1); }
         )
         
      )
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      n11=SQLSelectInnerJoin()
      { n10.addNode(n11); }
   )?
   (
      n13=SQLSelectWhere()
      { n12.addNode(n13); }
   )?
   (
      n15=SQLSelectGroupBy()
      { n14.addNode(n15); }
   )?
   (
      n17=SQLSelectHaving()
      { n16.addNode(n17); }
   )?
   (
      n19=SQLSelectOrderBy()
      { n18.addNode(n19); }
   )?
   (
      n21=SQLSelectForUpdate()
      { n20.addNode(n21); }
   )?
   (
      { n23 = new NodeSequence(3); }
      n25=<FOR> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      n27=<FETCH> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n23.addNode(n26); }
      n29=<ONLY> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n23.addNode(n28); }
      { n22.addNode(n23); }
   )?
   (
      { n31 = new NodeSequence(2); }
      n33=<WITH> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n34=SQLIdentifier()
      { n31.addNode(n34); }
      { n30.addNode(n31); }
   )?
   
   { return new ExecSQLStatementInclude(n0,n2,n3,n10,n12,n14,n16,n18,n20,n22,n30); }
}

ExecSQLStatementDeclare ExecSQLStatementDeclare() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   ExecSQLStatementSelect n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeList n22 = new NodeList();
   NodeSequence n23;
   CobolWord n24;
   NodeChoice n25;
   Identifier n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   IntegerConstant n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeOptional n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;

   
}
{
   n1=<DECLARE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      (
         (
            { n4 = new NodeSequence(5); }
            n6=<CURSOR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            (
               n9=<WITH> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n7.addNode(n8); }
            )?
            { n4.addNode(n7); }
            (
               n12=<HOLD> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10.addNode(n11); }
            )?
            { n4.addNode(n10); }
            (
               n15=<FOR> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n13.addNode(n14); }
            )?
            { n4.addNode(n13); }
            n16=ExecSQLStatementSelect()
            { n4.addNode(n16); }
            
         )
         { n3 = new NodeChoice(n4, 0); }
      |
         (
            { n17 = new NodeSequence(4); }
            n19=<TABLE> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            n21=<LPARENCHAR> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17.addNode(n20); }
            (
               { n37 = new NodeOptional(); }
               { n43 = new NodeOptional(); }
               { n23 = new NodeSequence(4); }
               n24=CobolWord()
               { n23.addNode(n24); }
               (
                  (
                     n26=Identifier()
                     { n25 = new NodeChoice(n26, 0); }
                  |
                     { n27 = new NodeSequence(4); }
                     n29=<CHAR> { n28 = JTBToolkit.makeNodeToken(n29); }
                     { n27.addNode(n28); }
                     n31=<LPARENCHAR> { n30 = JTBToolkit.makeNodeToken(n31); }
                     { n27.addNode(n30); }
                     n32=IntegerConstant()
                     { n27.addNode(n32); }
                     n34=<RPARENCHAR> { n33 = JTBToolkit.makeNodeToken(n34); }
                     { n27.addNode(n33); }
                     { n25 = new NodeChoice(n27, 1); }
                  |
                     n36=<DATE> { n35 = JTBToolkit.makeNodeToken(n36); }
                     { n25 = new NodeChoice(n35, 2); }
                  )
                  
               )
               { n23.addNode(n25); }
               (
                  { n38 = new NodeSequence(2); }
                  n40=<NOT> { n39 = JTBToolkit.makeNodeToken(n40); }
                  { n38.addNode(n39); }
                  n42=<NULL> { n41 = JTBToolkit.makeNodeToken(n42); }
                  { n38.addNode(n41); }
                  { n37.addNode(n38); }
               )?
               { n23.addNode(n37); }
               (
                  n45=<COMMACHAR> { n44 = JTBToolkit.makeNodeToken(n45); }
                  { n43.addNode(n44); }
               )?
               { n23.addNode(n43); }
               { n22.addNode(n23); }
            )+
            { n22.nodes.trimToSize(); }
            { n17.addNode(n22); }
            n47=<RPARENCHAR> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n17.addNode(n46); }
            
         )
         { n3 = new NodeChoice(n17, 1); }
      )
      
   )
   
   { return new ExecSQLStatementDeclare(n0,n2,n3); }
}

ExecSQLStatementSelect ExecSQLStatementSelect() :
{
   SQLSelectSimple n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   SQLSelectSimple n8;

   
}
{
   n0=SQLSelectSimple()
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<UNION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n7=<ALL> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      n8=SQLSelectSimple()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExecSQLStatementSelect(n0,n1); }
}

ExecSQLStatementSet ExecSQLStatementSet() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   CobolWord n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   CobolWord n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<ATCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<COLONCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   n8=CobolWord()
   n10=<EQUALCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      (
         n12=CobolWord()
         { n11 = new NodeChoice(n12, 0); }
      |
         { n13 = new NodeSequence(2); }
         n15=<CURRENT> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n17=<TIMESTAMP> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13.addNode(n16); }
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   
   { return new ExecSQLStatementSet(n0,n2,n8,n9,n11); }
}

ExecSQLStatementLock ExecSQLStatementLock() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   CobolWord n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<LOCK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=CobolWord()
   n6=<IN> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<EXCLUSIVE> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<MODE> { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ExecSQLStatementLock(n0,n2,n4,n5,n7,n9); }
}

ExecSQLStatementBegin ExecSQLStatementBegin() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<BEGIN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DECLARE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SECTION> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ExecSQLStatementBegin(n0,n2,n4); }
}

ExecSQLStatementEnd ExecSQLStatementEnd() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<END> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DECLARE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SECTION> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ExecSQLStatementEnd(n0,n2,n4); }
}

ExecSQLStatementCommit ExecSQLStatementCommit() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<COMMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<WORK> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExecSQLStatementCommit(n0,n2); }
}

ExecSQLStatementWhenever ExecSQLStatementWhenever() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   CobolWord n20;

   
}
{
   n1=<WHENEVER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<FOUND> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         n9=<CONTINUE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n10 = new NodeSequence(4); }
         (
            (
               n13=<SQLWARNING> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n15=<SQLERROR> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n11 = new NodeChoice(n14, 1); }
            )
            
         )
         { n10.addNode(n11); }
         n17=<GO> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n10.addNode(n16); }
         n19=<TO> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n10.addNode(n18); }
         n20=CobolWord()
         { n10.addNode(n20); }
         { n2 = new NodeChoice(n10, 1); }
      )
      
   )
   
   { return new ExecSQLStatementWhenever(n0,n2); }
}

SQLLiteral SQLLiteral() :
{
   Literal n0;

   
}
{
   n0=Literal()
   
   { return new SQLLiteral(n0); }
}

SQLSelectSimple SQLSelectSimple() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   NodeSequence n8;
   SQLIdentifier n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeList n17;
   NodeSequence n18;
   SQLParameter n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   SQLSelectFrom n25;
   NodeOptional n26 = new NodeOptional();
   SQLSelectInnerJoin n27;
   NodeOptional n28 = new NodeOptional();
   SQLSelectWhere n29;
   NodeOptional n30 = new NodeOptional();
   SQLSelectGroupBy n31;
   NodeOptional n32 = new NodeOptional();
   SQLSelectHaving n33;
   NodeOptional n34 = new NodeOptional();
   SQLSelectOrderBy n35;
   NodeOptional n36 = new NodeOptional();
   SQLSelectForUpdate n37;
   NodeOptional n38 = new NodeOptional();
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46 = new NodeOptional();
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   SQLIdentifier n50;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            { n3 = new NodeSequence(3); }
            (
               n6=<DISTINCT> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4.addNode(n5); }
            )?
            { n3.addNode(n4); }
            (
               { n10 = new NodeOptional(); }
               { n8 = new NodeSequence(2); }
               n9=SQLIdentifier()
               { n8.addNode(n9); }
               (
                  n12=<COMMACHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
                  { n10.addNode(n11); }
               )?
               { n8.addNode(n10); }
               { n7.addNode(n8); }
            )+
            { n7.nodes.trimToSize(); }
            { n3.addNode(n7); }
            (
               { n17 = new NodeList(); }
               { n14 = new NodeSequence(2); }
               n16=<INTO> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
               (
                  { n20 = new NodeOptional(); }
                  { n18 = new NodeSequence(2); }
                  n19=SQLParameter()
                  { n18.addNode(n19); }
                  (
                     n22=<COMMACHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
                     { n20.addNode(n21); }
                  )?
                  { n18.addNode(n20); }
                  { n17.addNode(n18); }
               )+
               { n17.nodes.trimToSize(); }
               { n14.addNode(n17); }
               { n13.addNode(n14); }
            )?
            { n3.addNode(n13); }
            
         )
         { n2 = new NodeChoice(n3, 0); }
      |
         n24=<ASTERISKCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n2 = new NodeChoice(n23, 1); }
      )
      
   )
   n25=SQLSelectFrom()
   (
      n27=SQLSelectInnerJoin()
      { n26.addNode(n27); }
   )?
   (
      n29=SQLSelectWhere()
      { n28.addNode(n29); }
   )?
   (
      n31=SQLSelectGroupBy()
      { n30.addNode(n31); }
   )?
   (
      n33=SQLSelectHaving()
      { n32.addNode(n33); }
   )?
   (
      n35=SQLSelectOrderBy()
      { n34.addNode(n35); }
   )?
   (
      n37=SQLSelectForUpdate()
      { n36.addNode(n37); }
   )?
   (
      { n39 = new NodeSequence(3); }
      n41=<FOR> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n39.addNode(n40); }
      n43=<FETCH> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n39.addNode(n42); }
      n45=<ONLY> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n39.addNode(n44); }
      { n38.addNode(n39); }
   )?
   (
      { n47 = new NodeSequence(2); }
      n49=<WITH> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n47.addNode(n48); }
      n50=SQLIdentifier()
      { n47.addNode(n50); }
      { n46.addNode(n47); }
   )?
   
   { return new SQLSelectSimple(n0,n2,n25,n26,n28,n30,n32,n34,n36,n38,n46); }
}

SQLIdentifier SQLIdentifier() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   Literal n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   SQLSimpleIdentifier n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   SQLIdentifier n25;

   
}
{
   (
      (
         LOOKAHEAD(4)
         (
            { n1 = new NodeSequence(2); }
            (
               (
                  n3=Literal()
                  { n2 = new NodeChoice(n3, 0); }
               |
                  { n4 = new NodeSequence(2); }
                  n6=<COLONCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4.addNode(n5); }
                  n7=Identifier()
                  { n4.addNode(n7); }
                  { n2 = new NodeChoice(n4, 1); }
               )
               
            )
            { n1.addNode(n2); }
            (
               (
                  n10=<YEARS> { n9 = JTBToolkit.makeNodeToken(n10); }
                  { n8 = new NodeChoice(n9, 0); }
               |
                  n12=<MONTHS> { n11 = JTBToolkit.makeNodeToken(n12); }
                  { n8 = new NodeChoice(n11, 1); }
               |
                  n14=<DAYS> { n13 = JTBToolkit.makeNodeToken(n14); }
                  { n8 = new NodeChoice(n13, 2); }
               )
               
            )
            { n1.addNode(n8); }
            
         )
         { n0 = new NodeChoice(n1, 0); }
      |
         n15=SQLSimpleIdentifier()
         { n0 = new NodeChoice(n15, 1); }
      )
      
   )
   (
      { n17 = new NodeSequence(2); }
      (
         (
            n20=<PLUSCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18 = new NodeChoice(n19, 0); }
         |
            n22=<MINUSCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n18 = new NodeChoice(n21, 1); }
         |
            n24=<DOUBLEEXCLAMATIONMARK> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n18 = new NodeChoice(n23, 2); }
         )
         
      )
      { n17.addNode(n18); }
      n25=SQLIdentifier()
      { n17.addNode(n25); }
      { n16.addNode(n17); }
   )?
   
   { return new SQLIdentifier(n0,n16); }
}

SQLSimpleIdentifier SQLSimpleIdentifier() :
{
   NodeChoice n0;
   NodeSequence n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   SQLParameter n8;
   SQLLiteral n9;
   sqlOneParamFunction n10;
   sqlSubstrFunction n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Identifier()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         n6=<DOTCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Identifier()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n8=SQLParameter()
      { n0 = new NodeChoice(n8, 1); }
   |
      n9=SQLLiteral()
      { n0 = new NodeChoice(n9, 2); }
   |
      n10=sqlOneParamFunction()
      { n0 = new NodeChoice(n10, 3); }
   |
      n11=sqlSubstrFunction()
      { n0 = new NodeChoice(n11, 4); }
   |
      (
         { n12 = new NodeSequence(2); }
         n14=<CURRENT> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         (
            (
               n17=<DATE> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               n19=<TIMESTAMP> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 1); }
            )
            
         )
         { n12.addNode(n15); }
         
      )
      { n0 = new NodeChoice(n12, 5); }
   )
   
   { return new SQLSimpleIdentifier(n0); }
}

SQLParameter SQLParameter() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   
}
{
   n1=<COLONCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      n6=<DOTCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new SQLParameter(n0,n2,n3); }
}

sqlOneParamFunction sqlOneParamFunction() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   SQLIdentifier n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      (
         n2=<CHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<YEAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<MONTH> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<DIGITS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<DATE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<MIN> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<MAX> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<SUM> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<COUNT> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      )
      
   )
   n20=<LPARENCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
   (
      (
         n22=SQLIdentifier()
         { n21 = new NodeChoice(n22, 0); }
      |
         n24=<ASTERISKCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n21 = new NodeChoice(n23, 1); }
      )
      
   )
   n26=<RPARENCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
   
   { return new sqlOneParamFunction(n0,n19,n21,n25); }
}

sqlSubstrFunction sqlSubstrFunction() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLIdentifier n4;
   NodeToken n5;
   Token n6;
   SQLIdentifier n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLIdentifier n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<SUBSTR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLIdentifier()
   n6=<COMMACHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLIdentifier()
   (
      (
         n10=<RPARENCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         { n11 = new NodeSequence(3); }
         n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=SQLIdentifier()
         { n11.addNode(n14); }
         n16=<RPARENCHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n11.addNode(n15); }
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   
   { return new sqlSubstrFunction(n0,n2,n4,n5,n7,n8); }
}

sqlSelectIN sqlSelectIN() :
{
   SQLIdentifier n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeList n9 = new NodeList();
   NodeSequence n10;
   SQLLiteral n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   SQLSelectSimple n15;
   NodeToken n16;
   Token n17;

   
}
{
   n0=SQLIdentifier()
   (
      n3=<NOT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   n5=<IN> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<LPARENCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      (
         (
            { n12 = new NodeOptional(); }
            { n10 = new NodeSequence(2); }
            n11=SQLLiteral()
            { n10.addNode(n11); }
            (
               n14=<COMMACHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
            )?
            { n10.addNode(n12); }
            { n9.addNode(n10); }
         )+
         { n9.nodes.trimToSize(); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n15=SQLSelectSimple()
         { n8 = new NodeChoice(n15, 1); }
      )
      
   )
   n17=<RPARENCHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new sqlSelectIN(n0,n1,n4,n6,n8,n16); }
}

SQLSelectFrom SQLSelectFrom() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   SQLFromIdentifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=SQLFromIdentifier()
      { n3.addNode(n4); }
      (
         n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new SQLSelectFrom(n0,n2); }
}

SQLSelectWhere SQLSelectWhere() :
{
   NodeToken n0;
   Token n1;
   SQLCondition n2;

   
}
{
   n1=<WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLCondition()
   
   { return new SQLSelectWhere(n0,n2); }
}

SQLCondition SQLCondition() :
{
   CombinableSQLCondition n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   CombinableSQLCondition n8;

   
}
{
   n0=CombinableSQLCondition()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<AND> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=CombinableSQLCondition()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLCondition(n0,n1); }
}

CombinableSQLCondition CombinableSQLCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   SimpleSQLCondition n3;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=SimpleSQLCondition()
   
   { return new CombinableSQLCondition(n0,n3); }
}

SimpleSQLCondition SimpleSQLCondition() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLCondition n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   SQLIdentifier n8;
   SQLRelationalOperator n9;
   SQLIdentifier n10;
   NodeSequence n11;
   SQLIdentifier n12;
   NodeToken n13;
   Token n14;
   SQLIdentifier n15;
   NodeToken n16;
   Token n17;
   SQLIdentifier n18;
   sqlSelectIN n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   SQLSelectSimple n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   SQLIdentifier n33;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SQLCondition()
      { n1.addNode(n4); }
      n6=<RPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(3); }
      n8=SQLIdentifier()
      { n7.addNode(n8); }
      n9=SQLRelationalOperator()
      { n7.addNode(n9); }
      n10=SQLIdentifier()
      { n7.addNode(n10); }
      { n0 = new NodeChoice(n7, 1); }
   |
      { n11 = new NodeSequence(5); }
      n12=SQLIdentifier()
      { n11.addNode(n12); }
      n14=<BETWEEN> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n11.addNode(n13); }
      n15=SQLIdentifier()
      { n11.addNode(n15); }
      n17=<AND> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11.addNode(n16); }
      n18=SQLIdentifier()
      { n11.addNode(n18); }
      { n0 = new NodeChoice(n11, 2); }
   |
      n19=sqlSelectIN()
      { n0 = new NodeChoice(n19, 3); }
   |
      { n20 = new NodeSequence(4); }
      n22=<EXISTS> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n24=<LPARENCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n20.addNode(n23); }
      n25=SQLSelectSimple()
      { n20.addNode(n25); }
      n27=<RPARENCHAR> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n20.addNode(n26); }
      { n0 = new NodeChoice(n20, 4); }
   |
      { n28 = new NodeSequence(3); }
      n30=<CURRENT> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n28.addNode(n29); }
      n32=<OF> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n28.addNode(n31); }
      n33=SQLIdentifier()
      { n28.addNode(n33); }
      { n0 = new NodeChoice(n28, 5); }
   )
   
   { return new SimpleSQLCondition(n0); }
}

SQLRelationalOperator SQLRelationalOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="<" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=">" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="<=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=">=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="<>" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      { n13 = new NodeSequence(2); }
      (
         n16=<NOT> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
      )?
      { n13.addNode(n14); }
      n18=<LIKE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n13.addNode(n17); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new SQLRelationalOperator(n0); }
}

SQLFromIdentifier SQLFromIdentifier() :
{
   SQLIdentifier n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLFromIdentifierAlias n5;

   
}
{
   n0=SQLIdentifier()
   (
      n3=<ATCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      n5=SQLFromIdentifierAlias()
      { n4.addNode(n5); }
   )?
   
   { return new SQLFromIdentifier(n0,n1,n4); }
}

SQLFromIdentifierAlias SQLFromIdentifierAlias() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new SQLFromIdentifierAlias(n0); }
}

SQLSelectInnerJoin SQLSelectInnerJoin() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLIdentifier n4;
   NodeOptional n5 = new NodeOptional();
   SQLFromIdentifierAlias n6;
   NodeToken n7;
   Token n8;
   SQLCondition n9;

   
}
{
   n1=<INNER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<JOIN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLIdentifier()
   (
      n6=SQLFromIdentifierAlias()
      { n5.addNode(n6); }
   )?
   n8=<ON> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=SQLCondition()
   
   { return new SQLSelectInnerJoin(n0,n2,n4,n5,n7,n9); }
}

SQLSelectGroupBy SQLSelectGroupBy() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SQLIdentifier n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<GROUP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeOptional(); }
      { n5 = new NodeSequence(2); }
      n6=SQLIdentifier()
      { n5.addNode(n6); }
      (
         n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
   { return new SQLSelectGroupBy(n0,n2,n4); }
}

SQLSelectHaving SQLSelectHaving() :
{
   NodeToken n0;
   Token n1;
   SQLCondition n2;

   
}
{
   n1=<HAVING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLCondition()
   
   { return new SQLSelectHaving(n0,n2); }
}

SQLSelectForUpdate SQLSelectForUpdate() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   SQLIdentifier n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<UPDATE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<OF> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      n8=SQLIdentifier()
      { n7.addNode(n8); }
      (
         n11=<COMMACHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )+
   { n6.nodes.trimToSize(); }
   
   { return new SQLSelectForUpdate(n0,n2,n4,n6); }
}

SQLSelectOrderBy SQLSelectOrderBy() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SQLIdentifier n6;
   NodeOptional n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<ORDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n5 = new NodeSequence(3); }
      n6=SQLIdentifier()
      { n5.addNode(n6); }
      (
         (
            n10=<ASC> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESC> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      (
         n15=<COMMACHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n5.addNode(n13); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
   { return new SQLSelectOrderBy(n0,n2,n4); }
}
