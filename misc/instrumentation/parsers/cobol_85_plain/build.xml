<!--
 !
 ! You need javacc 4.0 in "..\..\lib\javacc-4.0\bin\lib\javacc.jar"
 ! You can get it from: https://javacc.dev.java.net/
 !
 !-->
<project default="all">

    <property name="jtb-src" value="cobol.jj"/>
    <property name="jtb-out" value="cobol_jtb.out.jj"/>
    <property name="javacc-src" value="${jtb-out}"/>

    <target name="all">
        <antcall target="jtb"/>
        <antcall target="javacc"/>
	<antcall target="replacing"/>
	<antcall target="copying"/>
    </target>

    <target name="jtb">
	<delete file ="visitor/TreeFormatter.java" />
        <java jar ="..\..\lib\jtb132.jar"
              failonerror="true"
              fork="yes"
              clonevm="yes">

            <!-- package for the syntaxtree and visitor -->
            <arg line="-p org.codecover.instrumentation.cobol85" />
            <!-- target grammar -->
            <arg line="-o ${jtb-out}" />
            <!-- produce treedumper -->
            <arg line="-printer" />
            <!-- A Scheme tree building visitor -->
            <!-- <arg line="-scheme" /> -->
            <!-- Generate JavaDoc-friendly comments in the nodes and visitor. -->
            <arg line="-jd" />
            <!-- Generate parent pointers in all node classes. -->
            <arg line="-pp" />
            <!-- Generate special tokens into the tree. -->
            <arg line="-tk" />
            <!-- source grammar -->
            <arg line="${jtb-src}" />
        </java>
    </target>

    <target name="javacc">
        <delete>
            <fileset dir="." includes="org/codecover/instrumentation/java15/parser/*.java"/>
        </delete>

        <java classname="javacc"
              failonerror="true"
              fork="yes"
              clonevm="yes"
              classpath="..\..\lib\javacc-4.0\bin\lib\javacc.jar">

            <!-- Parser is nonstatic -->
            <arg line="-static=false" />
            <!-- move created files to this dir and use as package declaration -->
            <arg line="-output_directory=parser/" />
            <!-- we have our own char stream -->
            <arg line="-user_char_stream=true" />
            <!-- source grammar -->
            <arg line="${javacc-src}" />
        </java>
    </target>

    <target name="replacing">
	    <replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParser.java"/>
            <replacetoken>public class CobolParser implements CobolParserConstants</replacetoken>
            <replacevalue><![CDATA[/**
 * @author Generated By JavaCC: CobolParser.java
 * @author Christoph Müller / Stefan Franke:<br>
 * - add position handling to {@link JTBToolkit}<br>
 *
 * @version 1.0 ($Id: CobolParser.java 1643 2007-07-10 18:44:49Z muellecr $)
 */
@SuppressWarnings("all")
public class CobolParser implements CobolParserConstants]]></replacevalue>
        </replace>
        <replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParser.java"/>
            <replacetoken>static private final class LookaheadSuccess extends java.lang.Error</replacetoken>
            <replacevalue>static final class LookaheadSuccess extends java.lang.Error</replacevalue>
        </replace>
	<replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParser.java"/>
            <replacetoken>new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn)</replacetoken>
            <replacevalue>new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn, t.startOffset, t.endOffset)</replacevalue>
        </replace>
	<replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParserTokenManager.java"/>
            <replacetoken>public class CobolParserTokenManager implements CobolParserConstants</replacetoken>
            <replacevalue><![CDATA[/**
*
* @author Generated By JavaCC: CobolParserTokenManager.java
* @author Christoph Müller / Stefan Franke:<br>
* added position handling in: {@link #jjFillToken()}.
*
* @version 1.0 ($Id: CobolParserTokenManager.java 1642 2007-07-10 18:32:58Z muellecr $)
*/
@SuppressWarnings("all")
public class CobolParserTokenManager implements CobolParserConstants]]></replacevalue>
        </replace>
	<replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParserTokenManager.java"/>
            <replacetoken>t.endColumn = input_stream.getEndColumn();</replacetoken>
            <replacevalue><![CDATA[t.endColumn = input_stream.getEndColumn();
   t.startOffset = input_stream.getBeginPosition();
   t.endOffset = input_stream.getEndPosition();]]></replacevalue>
        </replace>
	<replace dir="parser" encoding="UTF-8">
      	    <include name="CobolParserConstants.java"/>
            <replacetoken>public interface CobolParserConstants</replacetoken>
            <replacevalue><![CDATA[@SuppressWarnings("all")
public interface CobolParserConstants]]></replacevalue>
        </replace>
    </target>

    <target name="copying">
         <copy file="parser/CobolParser.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/parser" />
         <copy file="parser/CobolParserConstants.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/parser" />
         <copy file="parser/CobolParserTokenManager.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/parser" />
         <copy file="visitor/DepthFirstVisitor.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJDepthFirst.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJNoArguDepthFirst.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJNoArguVisitor.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJVisitor.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJVoidDepthFirst.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/GJVoidVisitor.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/TreeFormatter.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
         <copy file="visitor/Visitor.java" overwrite="yes" todir="../../../../code/instrumentation-cobol/src/org/codecover/instrumentation/cobol85/visitor" />
    </target>
</project>