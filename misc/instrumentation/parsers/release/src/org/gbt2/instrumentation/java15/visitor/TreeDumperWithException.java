///////////////////////////////////////////////////////////////////////////////
//
// $Id: TreeDumperWithException.java 1 2007-12-12 17:37:26Z t-scheller $
// 
// created by: Christoph Müller
// created at: 24.02.2007 17:30:00
//
///////////////////////////////////////////////////////////////////////////////

//
// Generated by JTB 1.3.2
//
package org.gbt2.instrumentation.java15.visitor;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

import org.gbt2.instrumentation.java15.syntaxtree.NodeToken;

/**
 * Dumps the syntax tree to a Writer using the location information in each
 * NodeToken.
 */
public class TreeDumperWithException extends DepthFirstVisitorWithException {
    /** The sepeerator for lines: '\n' */
    public static final String LINE_SEPERATOR = "\n";

    private static final int STRING_WRITER_INITIAL_SIZE = 144;

    protected Writer targetNow;

    protected StringWriter tempWriter;

    protected Writer originalWriter;

    private int curLine = 1;

    private int curColumn = 1;

    private int savedCurLine;

    private int savedCurColumn;

    public TreeDumperWithException(Writer writer) {
        this.originalWriter = writer;
        this.targetNow = this.originalWriter;
    }

    /**
     * Sets the output to a {@link StringWriter} and saves the current position.
     */
    protected void switchToTempMode() {
        this.tempWriter = new StringWriter(STRING_WRITER_INITIAL_SIZE);
        this.targetNow = this.tempWriter;
        this.savedCurLine = this.curLine;
        this.savedCurColumn = this.curColumn;
    }

    /**
     * Resets the current line and column to the saved ones and sets the output
     * to the target writer.
     * 
     * @return A String containing all the data written while in temp mode.
     */
    protected String backFromTempMode() {
        this.targetNow = this.originalWriter;
        this.curLine = this.savedCurLine;
        this.curColumn = this.savedCurColumn;
        
        return this.tempWriter.toString();
    }
    
    /**
     * Dumps the current NodeToken to the output stream being used.
     * 
     * @throws IOException
     *             When there occures an exception when writing:
     *             {@link Writer#write(char[])}.
     */
    public void visit(NodeToken n) throws IOException {
        if (n.beginLine == -1 || n.beginColumn == -1) {
            printToken(n.tokenImage);
            return;
        }

        //
        // Handle special tokens
        //
        if (n.numSpecials() > 0) {
            for (NodeToken nt : n.specialTokens) {
                visit(nt);
            }
        }

        //
        // Move output "cursor" to proper location, then print the token
        //
        if (this.curLine < n.beginLine) {
            this.curColumn = 1;
            for (; this.curLine < n.beginLine; ++this.curLine) {
                this.targetNow.write(LINE_SEPERATOR);
            }
        }

        for (; this.curColumn < n.beginColumn; ++this.curColumn) {
            this.targetNow.write(' ');
        }

        printToken(n.tokenImage);
    }

    private void printToken(String s) throws IOException {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '\n') {
                ++this.curLine;
                this.curColumn = 1;
            } else
                this.curColumn++;

            this.targetNow.write(s.charAt(i));
        }
    }
}
