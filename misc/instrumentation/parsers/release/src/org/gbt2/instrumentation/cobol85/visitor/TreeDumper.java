///////////////////////////////////////////////////////////////////////////////
//
// $Id: TreeDumper.java 1 2007-12-12 17:37:26Z t-scheller $
// 
///////////////////////////////////////////////////////////////////////////////

//
// Generated by JTB 1.3.2
//
package org.gbt2.instrumentation.cobol85.visitor;

import org.gbt2.instrumentation.cobol85.syntaxtree.*;
import java.util.*;
import java.io.*;

/**
 * Dumps the syntax tree to a Writer using the location information in
 * each NodeToken.
 */
public class TreeDumper extends DepthFirstVisitor {
   protected PrintWriter out;

   /**
    * The default constructor uses System.out as its output location.
    * You may specify your own Writer or OutputStream using one of the
    * other constructors.
    */
   public TreeDumper()       { out = new PrintWriter(System.out, true); }
   public TreeDumper(Writer o)        { out = new PrintWriter(o, true); }
   public TreeDumper(OutputStream o)  { out = new PrintWriter(o, true); }

   /**
    * Flushes the OutputStream or Writer that this TreeDumper is using.
    */
   public void flushWriter()        { out.flush(); }

   /**
    * Dumps the current NodeToken to the output stream being used.
    * 
    * @throws  IllegalStateException   if the token position is invalid
    *   relative to the current position, i.e. its location places it
    *   before the previous token.
    *   
    * The grammar used contains all the whitespaces in the tokens. Therefore,
    * we don't need to reconstruct the column and line positions.<br>
    * &rarr; removed exception<br>
    * &rarr; removed additional whitespace productions
    */
   public void visit(NodeToken n) {
      if ( n.beginLine == -1 || n.beginColumn == -1 ) {
         printToken(n.tokenImage);
         return;
      }

      //
      // Handle special tokens
      //
      printSpecials(n);

      printToken(n.tokenImage);
   }
   
   protected void printSpecials(NodeToken n) {
     if ( n.numSpecials() > 0 )
       for ( Enumeration<NodeToken> e = n.specialTokens.elements(); e.hasMoreElements(); )
          visit(e.nextElement());
   }

   private void printToken(String s) {
      this.out.print(s);
      this.out.flush();
   }
}
