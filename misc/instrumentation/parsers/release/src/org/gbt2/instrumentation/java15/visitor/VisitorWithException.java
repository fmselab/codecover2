///////////////////////////////////////////////////////////////////////////////
//
// $Id: VisitorWithException.java 1 2007-12-12 17:37:26Z t-scheller $
// 
// created by: Christoph Müller
// created at: 24.02.2007 17:30:00
//
///////////////////////////////////////////////////////////////////////////////

//
// Generated by JTB 1.3.2
//

package org.gbt2.instrumentation.java15.visitor;

import java.io.IOException;

import org.gbt2.instrumentation.java15.syntaxtree.*;

/**
 * All void visitors must implement this interface.
 */

public interface VisitorWithException {

    //
    // void Auto class visitors
    //

    public void visit(NodeList n) throws IOException;

    public void visit(NodeListOptional n) throws IOException;

    public void visit(NodeOptional n) throws IOException;

    public void visit(NodeSequence n) throws IOException;

    public void visit(NodeToken n) throws IOException;

    //
    // User-generated visitor methods below
    //

    /**
     * <PRE>
     * 
     * f0 -> [ PackageDeclaration() ] f1 -> ( ImportDeclaration() )* f2 -> (
     * TypeDeclaration() )* f3 -> ( &lt;"\u001a"&gt; )? f4 -> (
     * &lt;STUFF_TO_IGNORE: ~[]&gt; )? f5 -> &lt;EOF&gt;
     * 
     * </PRE>
     */
    public void visit(CompilationUnit n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Modifiers() f1 -> "package" f2 -> Name() f3 -> ";"
     * 
     * </PRE>
     */
    public void visit(PackageDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "import" f1 -> [ "static" ] f2 -> Name() f3 -> [ "." "*" ] f4 ->
     * ";"
     * 
     * </PRE>
     */
    public void visit(ImportDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( ( "public" | "static" | "protected" | "private" | "final" |
     * "abstract" | "synchronized" | "native" | "transient" | "volatile" |
     * "strictfp" | Annotation() ) )*
     * 
     * </PRE>
     */
    public void visit(Modifiers n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ";" | Modifiers() ( ClassOrInterfaceDeclaration() |
     * EnumDeclaration() | AnnotationTypeDeclaration() )
     * 
     * </PRE>
     */
    public void visit(TypeDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "class" | "interface" ) f1 -> &lt;IDENTIFIER&gt; f2 -> [
     * TypeParameters() ] f3 -> [ ExtendsList(isInterface) ] f4 -> [
     * ImplementsList(isInterface) ] f5 -> ClassOrInterfaceBody(isInterface)
     * 
     * </PRE>
     */
    public void visit(ClassOrInterfaceDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "extends" f1 -> ClassOrInterfaceType() f2 -> ( ","
     * ClassOrInterfaceType() )*
     * 
     * </PRE>
     */
    public void visit(ExtendsList n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "implements" f1 -> ClassOrInterfaceType() f2 -> ( ","
     * ClassOrInterfaceType() )*
     * 
     * </PRE>
     */
    public void visit(ImplementsList n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "enum" f1 -> &lt;IDENTIFIER&gt; f2 -> [ ImplementsList(false) ] f3 ->
     * EnumBody()
     * 
     * </PRE>
     */
    public void visit(EnumDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> [ EnumConstant() ( "," EnumConstant() )* ] f2 -> [ "," ]
     * f3 -> [ ";" ( ClassOrInterfaceBodyDeclaration(false) )* ] f4 -> "}"
     * 
     * </PRE>
     */
    public void visit(EnumBody n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Modifiers() f1 -> &lt;IDENTIFIER&gt; f2 -> [ Arguments() ] f3 -> [
     * ClassOrInterfaceBody(false) ]
     * 
     * </PRE>
     */
    public void visit(EnumConstant n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "&lt;" f1 -> TypeParameter() f2 -> ( "," TypeParameter() )* f3 ->
     * "&gt;"
     * 
     * </PRE>
     */
    public void visit(TypeParameters n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> [ TypeBound() ]
     * 
     * </PRE>
     */
    public void visit(TypeParameter n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "extends" f1 -> ClassOrInterfaceType() f2 -> ( "&"
     * ClassOrInterfaceType() )*
     * 
     * </PRE>
     */
    public void visit(TypeBound n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> ( ClassOrInterfaceBodyDeclaration(isInterface) )* f2 ->
     * "}"
     * 
     * </PRE>
     */
    public void visit(ClassOrInterfaceBody n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Initializer() | Modifiers() ( ClassOrInterfaceDeclaration() |
     * EnumDeclaration() | ConstructorDeclaration() | FieldDeclaration() |
     * MethodDeclaration() ) | ";"
     * 
     * </PRE>
     */
    public void visit(ClassOrInterfaceBodyDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Type() f1 -> VariableDeclarator() f2 -> ( "," VariableDeclarator() )*
     * f3 -> ";"
     * 
     * </PRE>
     */
    public void visit(FieldDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> VariableDeclaratorId() f1 -> [ "=" VariableInitializer() ]
     * 
     * </PRE>
     */
    public void visit(VariableDeclarator n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> ( "[" "]" )*
     * 
     * </PRE>
     */
    public void visit(VariableDeclaratorId n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ArrayInitializer() | Expression()
     * 
     * </PRE>
     */
    public void visit(VariableInitializer n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> [ VariableInitializer() ( "," VariableInitializer() )* ]
     * f2 -> [ "," ] f3 -> "}"
     * 
     * </PRE>
     */
    public void visit(ArrayInitializer n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> [ TypeParameters() ] f1 -> ResultType() f2 -> MethodDeclarator() f3 -> [
     * "throws" NameList() ] f4 -> ( Block() | ";" )
     * 
     * </PRE>
     */
    public void visit(MethodDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> FormalParameters() f2 -> ( "[" "]" )*
     * 
     * </PRE>
     */
    public void visit(MethodDeclarator n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "(" f1 -> [ FormalParameter() ( "," FormalParameter() )* ] f2 ->
     * ")"
     * 
     * </PRE>
     */
    public void visit(FormalParameters n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Modifiers() f1 -> Type() f2 -> [ "..." ] f3 ->
     * VariableDeclaratorId()
     * 
     * </PRE>
     */
    public void visit(FormalParameter n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> [ TypeParameters() ] f1 -> &lt;IDENTIFIER&gt; f2 ->
     * FormalParameters() f3 -> [ "throws" NameList() ] f4 -> "{" f5 -> [
     * ExplicitConstructorInvocation() ] f6 -> ( BlockStatement() )* f7 -> "}"
     * 
     * </PRE>
     */
    public void visit(ConstructorDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( &lt;IDENTIFIER&gt; "." )* f1 -> [ "this" "." ] f2 -> [
     * TypeArguments() ] f3 -> ( "this" | "super" ) f4 -> Arguments() f5 -> ";"
     * 
     * </PRE>
     */
    public void visit(ExplicitConstructorInvocation n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> [ "static" ] f1 -> Block()
     * 
     * </PRE>
     */
    public void visit(Initializer n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ReferenceType() | PrimitiveType()
     * 
     * </PRE>
     */
    public void visit(Type n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> PrimitiveType() ( "[" "]" )+ | ( ClassOrInterfaceType() ) ( "[" "]" )*
     * 
     * </PRE>
     */
    public void visit(ReferenceType n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> [ TypeArguments() ] f2 -> ( "."
     * &lt;IDENTIFIER&gt; [ TypeArguments() ] )*
     * 
     * </PRE>
     */
    public void visit(ClassOrInterfaceType n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "&lt;" f1 -> TypeArgument() f2 -> ( "," TypeArgument() )* f3 ->
     * "&gt;"
     * 
     * </PRE>
     */
    public void visit(TypeArguments n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ReferenceType() | "?" [ WildcardBounds() ]
     * 
     * </PRE>
     */
    public void visit(TypeArgument n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "extends" ReferenceType() | "super" ReferenceType()
     * 
     * </PRE>
     */
    public void visit(WildcardBounds n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" |
     * "double"
     * 
     * </PRE>
     */
    public void visit(PrimitiveType n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "void" | Type()
     * 
     * </PRE>
     */
    public void visit(ResultType n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> ( "." &lt;IDENTIFIER&gt; )*
     * 
     * </PRE>
     */
    public void visit(Name n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Name() f1 -> ( "," Name() )*
     * 
     * </PRE>
     */
    public void visit(NameList n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ConditionalExpression() f1 -> [ AssignmentOperator() Expression() ]
     * 
     * </PRE>
     */
    public void visit(Expression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&lt;&lt;=" | "&gt;&gt;=" |
     * "&gt;&gt;&gt;=" | "&=" | "^=" | "|="
     * 
     * </PRE>
     */
    public void visit(AssignmentOperator n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ConditionalOrExpression() f1 -> [ "?" Expression() ":" Expression() ]
     * 
     * </PRE>
     */
    public void visit(ConditionalExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ConditionalAndExpression() f1 -> ( "||" ConditionalAndExpression() )*
     * 
     * </PRE>
     */
    public void visit(ConditionalOrExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> InclusiveOrExpression() f1 -> ( "&&" InclusiveOrExpression() )*
     * 
     * </PRE>
     */
    public void visit(ConditionalAndExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ExclusiveOrExpression() f1 -> ( "|" ExclusiveOrExpression() )*
     * 
     * </PRE>
     */
    public void visit(InclusiveOrExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> AndExpression() f1 -> ( "^" AndExpression() )*
     * 
     * </PRE>
     */
    public void visit(ExclusiveOrExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> EqualityExpression() f1 -> ( "&" EqualityExpression() )*
     * 
     * </PRE>
     */
    public void visit(AndExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> InstanceOfExpression() f1 -> ( ( "==" | "!=" )
     * InstanceOfExpression() )*
     * 
     * </PRE>
     */
    public void visit(EqualityExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> RelationalExpression() f1 -> [ "instanceof" Type() ]
     * 
     * </PRE>
     */
    public void visit(InstanceOfExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ShiftExpression() f1 -> ( ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" )
     * ShiftExpression() )*
     * 
     * </PRE>
     */
    public void visit(RelationalExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> AdditiveExpression() f1 -> ( ( "&lt;&lt;" | RSIGNEDSHIFT() |
     * RUNSIGNEDSHIFT() ) AdditiveExpression() )*
     * 
     * </PRE>
     */
    public void visit(ShiftExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> MultiplicativeExpression() f1 -> ( ( "+" | "-" )
     * MultiplicativeExpression() )*
     * 
     * </PRE>
     */
    public void visit(AdditiveExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> UnaryExpression() f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
     * 
     * </PRE>
     */
    public void visit(MultiplicativeExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "+" | "-" ) UnaryExpression() | PreIncrementExpression() |
     * PreDecrementExpression() | UnaryExpressionNotPlusMinus()
     * 
     * </PRE>
     */
    public void visit(UnaryExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "++" f1 -> PrimaryExpression()
     * 
     * </PRE>
     */
    public void visit(PreIncrementExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "--" f1 -> PrimaryExpression()
     * 
     * </PRE>
     */
    public void visit(PreDecrementExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "~" | "!" ) UnaryExpression() | CastExpression() |
     * PostfixExpression()
     * 
     * </PRE>
     */
    public void visit(UnaryExpressionNotPlusMinus n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "(" PrimitiveType() | "(" Type() "[" "]" | "(" Type() ")" ( "~" |
     * "!" | "(" | &lt;IDENTIFIER&gt; | "this" | "super" | "new" | Literal() )
     * 
     * </PRE>
     */
    public void visit(CastLookahead n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> PrimaryExpression() f1 -> [ "++" | "--" ]
     * 
     * </PRE>
     */
    public void visit(PostfixExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "(" Type() ")" UnaryExpression() | "(" Type() ")"
     * UnaryExpressionNotPlusMinus()
     * 
     * </PRE>
     */
    public void visit(CastExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> PrimaryPrefix() f1 -> ( PrimarySuffix() )*
     * 
     * </PRE>
     */
    public void visit(PrimaryExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "." f1 -> TypeArguments() f2 -> &lt;IDENTIFIER&gt;
     * 
     * </PRE>
     */
    public void visit(MemberSelector n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Literal() | ( &lt;IDENTIFIER&gt; "." )* "this" | "super" "."
     * &lt;IDENTIFIER&gt; | "(" Expression() ")" | AllocationExpression() |
     * ResultType() "." "class" | Name()
     * 
     * </PRE>
     */
    public void visit(PrimaryPrefix n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "." "super" | "." "this" | "." AllocationExpression() |
     * MemberSelector() | "[" Expression() "]" | "." &lt;IDENTIFIER&gt; |
     * Arguments()
     * 
     * </PRE>
     */
    public void visit(PrimarySuffix n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;INTEGER_LITERAL&gt; | &lt;FLOATING_POINT_LITERAL&gt; |
     * &lt;CHARACTER_LITERAL&gt; | &lt;STRING_LITERAL&gt; | BooleanLiteral() |
     * NullLiteral()
     * 
     * </PRE>
     */
    public void visit(Literal n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "true" | "false"
     * 
     * </PRE>
     */
    public void visit(BooleanLiteral n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "null"
     * 
     * </PRE>
     */
    public void visit(NullLiteral n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "(" f1 -> [ ArgumentList() ] f2 -> ")"
     * 
     * </PRE>
     */
    public void visit(Arguments n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Expression() f1 -> ( "," Expression() )*
     * 
     * </PRE>
     */
    public void visit(ArgumentList n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "new" PrimitiveType() ArrayDimsAndInits() | "new"
     * ClassOrInterfaceType() [ TypeArguments() ] ( ArrayDimsAndInits() |
     * Arguments() [ ClassOrInterfaceBody(false) ] )
     * 
     * </PRE>
     */
    public void visit(AllocationExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "[" Expression() "]" )+ ( "[" "]" )* | ( "[" "]" )+
     * ArrayInitializer()
     * 
     * </PRE>
     */
    public void visit(ArrayDimsAndInits n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> LabeledStatement() | AssertStatement() | Block() | EmptyStatement() |
     * StatementExpression() ";" | SwitchStatement() | IfStatement() |
     * WhileStatement() | DoStatement() | ForStatement() | BreakStatement() |
     * ContinueStatement() | ReturnStatement() | ThrowStatement() |
     * SynchronizedStatement() | TryStatement()
     * 
     * </PRE>
     * 
     * @throws IOException
     */
    public void visit(Statement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "assert" f1 -> Expression() f2 -> [ ":" Expression() ] f3 -> ";"
     * 
     * </PRE>
     */
    public void visit(AssertStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> ":" f2 -> Statement()
     * 
     * </PRE>
     */
    public void visit(LabeledStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> ( BlockStatement() )* f2 -> "}"
     * 
     * </PRE>
     */
    public void visit(Block n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> LocalVariableDeclaration() ";" | Statement() |
     * ClassOrInterfaceDeclaration()
     * 
     * </PRE>
     */
    public void visit(BlockStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Modifiers() f1 -> Type() f2 -> VariableDeclarator() f3 -> ( ","
     * VariableDeclarator() )*
     * 
     * </PRE>
     */
    public void visit(LocalVariableDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ";"
     * 
     * </PRE>
     */
    public void visit(EmptyStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> PreIncrementExpression() | PreDecrementExpression() |
     * PrimaryExpression() [ "++" | "--" | AssignmentOperator() Expression() ]
     * 
     * </PRE>
     */
    public void visit(StatementExpression n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "switch" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> "{" f5 -> (
     * SwitchLabel() ( BlockStatement() )* )* f6 -> "}"
     * 
     * </PRE>
     */
    public void visit(SwitchStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "case" Expression() ":" | "default" ":"
     * 
     * </PRE>
     */
    public void visit(SwitchLabel n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 -> [
     * "else" Statement() ]
     * 
     * </PRE>
     */
    public void visit(IfStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
     * 
     * </PRE>
     */
    public void visit(WhileStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "do" f1 -> Statement() f2 -> "while" f3 -> "(" f4 -> Expression()
     * f5 -> ")" f6 -> ";"
     * 
     * </PRE>
     */
    public void visit(DoStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "for" f1 -> "(" f2 -> ( Modifiers() Type() &lt;IDENTIFIER&gt; ":"
     * Expression() | [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] )
     * f3 -> ")" f4 -> Statement()
     * 
     * </PRE>
     */
    public void visit(ForStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> LocalVariableDeclaration() | StatementExpressionList()
     * 
     * </PRE>
     */
    public void visit(ForInit n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> StatementExpression() f1 -> ( "," StatementExpression() )*
     * 
     * </PRE>
     */
    public void visit(StatementExpressionList n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> StatementExpressionList()
     * 
     * </PRE>
     */
    public void visit(ForUpdate n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "break" f1 -> [ &lt;IDENTIFIER&gt; ] f2 -> ";"
     * 
     * </PRE>
     */
    public void visit(BreakStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "continue" f1 -> [ &lt;IDENTIFIER&gt; ] f2 -> ";"
     * 
     * </PRE>
     */
    public void visit(ContinueStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "return" f1 -> [ Expression() ] f2 -> ";"
     * 
     * </PRE>
     */
    public void visit(ReturnStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "throw" f1 -> Expression() f2 -> ";"
     * 
     * </PRE>
     */
    public void visit(ThrowStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "synchronized" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Block()
     * 
     * </PRE>
     */
    public void visit(SynchronizedStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "try" f1 -> Block() f2 -> ( "catch" "(" FormalParameter() ")"
     * Block() )* f3 -> [ "finally" Block() ]
     * 
     * </PRE>
     */
    public void visit(TryStatement n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "&gt;" "&gt;" "&gt;" )
     * 
     * </PRE>
     */
    public void visit(RUNSIGNEDSHIFT n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> ( "&gt;" "&gt;" )
     * 
     * </PRE>
     */
    public void visit(RSIGNEDSHIFT n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> NormalAnnotation() | SingleMemberAnnotation() | MarkerAnnotation()
     * 
     * </PRE>
     */
    public void visit(Annotation n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "@" f1 -> Name() f2 -> "(" f3 -> [ MemberValuePairs() ] f4 -> ")"
     * 
     * </PRE>
     */
    public void visit(NormalAnnotation n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "@" f1 -> Name()
     * 
     * </PRE>
     */
    public void visit(MarkerAnnotation n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "@" f1 -> Name() f2 -> "(" f3 -> MemberValue() f4 -> ")"
     * 
     * </PRE>
     */
    public void visit(SingleMemberAnnotation n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> MemberValuePair() f1 -> ( "," MemberValuePair() )*
     * 
     * </PRE>
     */
    public void visit(MemberValuePairs n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> &lt;IDENTIFIER&gt; f1 -> "=" f2 -> MemberValue()
     * 
     * </PRE>
     */
    public void visit(MemberValuePair n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Annotation() | MemberValueArrayInitializer() |
     * ConditionalExpression()
     * 
     * </PRE>
     */
    public void visit(MemberValue n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> MemberValue() f2 -> ( "," MemberValue() )* f3 -> [ "," ]
     * f4 -> "}"
     * 
     * </PRE>
     */
    public void visit(MemberValueArrayInitializer n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "@" f1 -> "interface" f2 -> &lt;IDENTIFIER&gt; f3 ->
     * AnnotationTypeBody()
     * 
     * </PRE>
     */
    public void visit(AnnotationTypeDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "{" f1 -> ( AnnotationTypeMemberDeclaration() )* f2 -> "}"
     * 
     * </PRE>
     */
    public void visit(AnnotationTypeBody n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> Modifiers() ( Type() &lt;IDENTIFIER&gt; "(" ")" [ DefaultValue() ]
     * ";" | ClassOrInterfaceDeclaration() | EnumDeclaration() |
     * AnnotationTypeDeclaration() | FieldDeclaration() ) | ( ";" )
     * 
     * </PRE>
     */
    public void visit(AnnotationTypeMemberDeclaration n) throws IOException;

    /**
     * <PRE>
     * 
     * f0 -> "default" f1 -> MemberValue()
     * 
     * </PRE>
     */
    public void visit(DefaultValue n) throws IOException;

}
