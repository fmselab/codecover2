///////////////////////////////////////////////////////////////////////////////
//
// $Id: NodeChoice.java 1 2007-12-12 17:37:26Z t-scheller $
// 
// created by: Christoph Müller
// created at: 24.02.2007 17:30:00
//
///////////////////////////////////////////////////////////////////////////////

//
// Generated by JTB 1.3.2
//

package org.gbt2.instrumentation.java15.syntaxtree;

import java.io.IOException;

import org.gbt2.instrumentation.java15.visitor.GJNoArguVisitor;
import org.gbt2.instrumentation.java15.visitor.GJVisitor;
import org.gbt2.instrumentation.java15.visitor.GJVoidVisitor;
import org.gbt2.instrumentation.java15.visitor.Visitor;
import org.gbt2.instrumentation.java15.visitor.VisitorWithException;

/**
 * Represents a grammar choice, e.g. ( A | B )
 */
public class NodeChoice implements Node {
    public NodeChoice(Node node) {
        this(node, -1);
    }

    public NodeChoice(Node node, int whichChoice) {
        choice = node;
        choice.setParent(this);
        which = whichChoice;
    }

    public void accept(VisitorWithException v) throws IOException {
        choice.accept(v);
    }

    public void accept(Visitor v) {
        choice.accept(v);
    }

    public <R, A> R accept(GJVisitor<R, A> v, A argu) {
        return choice.accept(v, argu);
    }

    public <R> R accept(GJNoArguVisitor<R> v) {
        return choice.accept(v);
    }

    public <A> void accept(GJVoidVisitor<A> v, A argu) {
        choice.accept(v, argu);
    }

    public void setParent(Node n) {
        parent = n;
    }

    public Node getParent() {
        return parent;
    }

    private Node parent;

    public Node choice;

    public int which;
}
