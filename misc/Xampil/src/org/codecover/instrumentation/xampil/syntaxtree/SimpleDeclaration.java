//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.xampil.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> ( &lt;BOOLEAN&gt; | &lt;INTEGER&gt; | &lt;STRING&gt; )
 * f1 -> &lt;IDENTIFIER&gt;
 * f2 -> ( &lt;ASSIGN&gt; ( &lt;INTEGER_LITERAL&gt; | &lt;STRING_LITERAL&gt; | &lt;TRUE&gt; | &lt;FALSE&gt; ) )?
 * f3 -> &lt;EOL&gt;
 * </PRE>
 */
public class SimpleDeclaration implements Node {
   private Node parent;
   public NodeChoice f0;
   public NodeToken f1;
   public NodeOptional f2;
   public NodeToken f3;

   public SimpleDeclaration(NodeChoice n0, NodeToken n1, NodeOptional n2, NodeToken n3) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
   }

   public void accept(org.codecover.instrumentation.xampil.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.xampil.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.xampil.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.xampil.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

