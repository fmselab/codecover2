//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.xampil.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;IF&gt;
 * f1 -> Expression(basicBooleanCounter)
 * f2 -> &lt;THEN&gt;
 * f3 -> &lt;EOL&gt;
 * f4 -> ( Statement() )*
 * f5 -> ( &lt;ELSE&gt; &lt;EOL&gt; ( Statement() )* )?
 * f6 -> &lt;ENDIF&gt;
 * f7 -> &lt;EOL&gt;
 * </PRE>
 */
public class IfStatement implements Node {
   public String statementID;
   private Node parent;
   public NodeToken f0;
   public Expression f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeListOptional f4;
   public NodeOptional f5;
   public NodeToken f6;
   public NodeToken f7;

   public IfStatement(NodeToken n0, Expression n1, NodeToken n2, NodeToken n3, NodeListOptional n4, NodeOptional n5, NodeToken n6, NodeToken n7) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
      f4 = n4;
      if ( f4 != null ) f4.setParent(this);
      f5 = n5;
      if ( f5 != null ) f5.setParent(this);
      f6 = n6;
      if ( f6 != null ) f6.setParent(this);
      f7 = n7;
      if ( f7 != null ) f7.setParent(this);
   }

   public IfStatement(Expression n0, NodeToken n1, NodeListOptional n2, NodeOptional n3, NodeToken n4) {
      f0 = new NodeToken("IF");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = new NodeToken("THEN");
      if ( f2 != null ) f2.setParent(this);
      f3 = n1;
      if ( f3 != null ) f3.setParent(this);
      f4 = n2;
      if ( f4 != null ) f4.setParent(this);
      f5 = n3;
      if ( f5 != null ) f5.setParent(this);
      f6 = new NodeToken("ENDIF");
      if ( f6 != null ) f6.setParent(this);
      f7 = n4;
      if ( f7 != null ) f7.setParent(this);
   }

   public void accept(org.codecover.instrumentation.xampil.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.xampil.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.xampil.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.xampil.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

