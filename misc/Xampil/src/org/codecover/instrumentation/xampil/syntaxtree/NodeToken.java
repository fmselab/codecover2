/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

package org.codecover.instrumentation.xampil.syntaxtree;

import java.util.Vector;

/**
 * Represents a single token in the grammar.
 * 
 * @author Generated by JTB 1.3.2
 * @author Christoph Müller / Stefan Franke:<br>
 *         added offset handling
 * 
 * @version 1.0 ($Id: NodeToken.java 1 2007-12-12 17:37:26Z t-scheller $)
 */
@SuppressWarnings("all")
public class NodeToken implements Node {
    
    private Node parent;
    
    public String tokenImage;
    
    // Stores a list of NodeTokens
    public Vector<NodeToken> specialTokens;
    
    // -1 for these ints means no position info is available.
    public int beginLine, endLine, beginColumn, endColumn, startOffset, endOffset;
    
    // Equal to the JavaCC token "kind" integer.
    // -1 if not available.
    public int kind;

    public NodeToken(String s) {
        this(s, -1, -1, -1, -1, -1, -1, -1);
    }

    public NodeToken(String s,
                     int kind,
                     int beginLine,
                     int endLine,
                     int beginColumn,
                     int endColumn,
                     int beginOffset,
                     int endOffset) {
        this.tokenImage = s;
        this.specialTokens = null;
        this.kind = kind;
        this.beginLine = beginLine;
        this.endLine = endLine;
        this.beginColumn = beginColumn;
        this.endColumn = endColumn;
        this.startOffset = beginOffset;
        this.endOffset = endOffset;
    }

    public NodeToken getSpecialAt(int i) {
        if (this.specialTokens == null) {
            throw new java.util.NoSuchElementException("No specials in token");
        }
        return this.specialTokens.elementAt(i);
    }

    public int numSpecials() {
        if (this.specialTokens == null) {
            return 0;
        }
        return this.specialTokens.size();
    }

    public void addSpecial(NodeToken s) {
        if (this.specialTokens == null) {
            this.specialTokens = new Vector<NodeToken>();
        }
        this.specialTokens.addElement(s);

        s.setParent(this);
    }

    public void trimSpecials() {
        if (this.specialTokens == null) {
            return;
        }
        this.specialTokens.trimToSize();
    }

    public String toString() {
        return this.tokenImage;
    }

    public String withSpecials() {
        if (this.specialTokens == null) {
            return this.tokenImage;
        }

        StringBuilder buf = new StringBuilder();

        for (NodeToken thisToken : this.specialTokens) {
            buf.append(thisToken.toString());
        }

        buf.append(this.tokenImage);
        return buf.toString();
    }

    public void accept(org.codecover.instrumentation.xampil.visitor.Visitor v) {
        v.visit(this);
    }

    public <R, A> R accept(
            org.codecover.instrumentation.xampil.visitor.GJVisitor<R, A> v,
            A argu) {
        return v.visit(this, argu);
    }

    public <R> R accept(
            org.codecover.instrumentation.xampil.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    public <A> void accept(
            org.codecover.instrumentation.xampil.visitor.GJVoidVisitor<A> v,
            A argu) {
        v.visit(this, argu);
    }
    
    public Node getParent() {
        return this.parent;
    }

    public void setParent(Node n) {
        this.parent = n;
    }
}
