//
// Generated by JTB 1.3.2
//
package org.codecover.instrumentation.xampil.visitor;

import org.codecover.instrumentation.xampil.syntaxtree.*;
import java.util.*;

/**
 * A skeleton output formatter for your language grammar.  Using the
 * add() method along with force(), indent(), and outdent(), you can
 * easily specify how this visitor will format the given syntax tree.
 * See the JTB documentation for more details.
 *
 * Pass your syntax tree to this visitor, and then to the TreeDumper
 * visitor in order to "pretty print" your tree.
 */
public class TreeFormatter extends DepthFirstVisitor {
   private Vector<FormatCommand> cmdQueue = new Vector<FormatCommand>();
   private boolean lineWrap;
   private int wrapWidth;
   private int indentAmt;
   private int curLine = 1;
   private int curColumn = 1;
   private int curIndent = 0;

   /**
    * The default constructor assumes an indentation amount of 3 spaces
    * and no line-wrap.  You may alternately use the other constructor to
    * specify your own indentation amount and line width.
    */
   public TreeFormatter() { this(3, 0); }

   /**
    * This constructor accepts an indent amount and a line width which is
    * used to wrap long lines.  If a token's beginColumn value is greater
    * than the specified wrapWidth, it will be moved to the next line and
    * indented one extra level.  To turn off line-wrapping, specify a
    * wrapWidth of 0.
    *
    * @param   indentAmt   Amount of spaces per indentation level.
    * @param   wrapWidth   Wrap lines longer than wrapWidth.  0 for no wrap.
    */
   public TreeFormatter(int indentAmt, int wrapWidth) {
      this.indentAmt = indentAmt;
      this.wrapWidth = wrapWidth;

      if ( wrapWidth > 0 )
         lineWrap = true;
      else
         lineWrap = false;
   }

   /**
    * Accepts a NodeListInterface object and performs an optional format
    * command between each node in the list (but not after the last node).
    */
   protected void processList(NodeListInterface n) {
      processList(n, null);
   }

   protected void processList(NodeListInterface n, FormatCommand cmd) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         if ( cmd != null && e.hasMoreElements() )
            cmdQueue.addElement(cmd);
      }
   }

   /**
    * A Force command inserts a line break and indents the next line to
    * the current indentation level.  Use "add(force());".
    */
   protected FormatCommand force() { return force(1); }
   protected FormatCommand force(int i) {
      return new FormatCommand(FormatCommand.FORCE, i);
   }

   /**
    * An Indent command increases the indentation level by one (or a
    * user-specified amount).  Use "add(indent());".
    */
   protected FormatCommand indent() { return indent(1); }
   protected FormatCommand indent(int i) {
      return new FormatCommand(FormatCommand.INDENT, i);
   }

   /**
    * An Outdent command is the reverse of the Indent command: it reduces
    * the indentation level.  Use "add(outdent());".
    */
   protected FormatCommand outdent() { return outdent(1); }
   protected FormatCommand outdent(int i) {
      return new FormatCommand(FormatCommand.OUTDENT, i);
   }

   /**
    * A Space command simply adds one or a user-specified number of
    * spaces between tokens.  Use "add(space());".
    */
   protected FormatCommand space() { return space(1); }
   protected FormatCommand space(int i) {
      return new FormatCommand(FormatCommand.SPACE, i);
   }

   /**
    * Use this method to add FormatCommands to the command queue to be
    * executed when the next token in the tree is visited.
    */
   protected void add(FormatCommand cmd) {
      cmdQueue.addElement(cmd);
   }

   /**
    * Executes the commands waiting in the command queue, then inserts the
    * proper location information into the current NodeToken.
    *
    * If there are any special tokens preceding this token, they will be
    * given the current location information.  The token will follow on
    * the next line, at the proper indentation level.  If this is not the
    * behavior you want from special tokens, feel free to modify this
    * method.
    */
   public void visit(NodeToken n) {
      for ( Enumeration<FormatCommand> e = cmdQueue.elements(); e.hasMoreElements(); ) {
         FormatCommand cmd = e.nextElement();
         switch ( cmd.getCommand() ) {
         case FormatCommand.FORCE :
            curLine += cmd.getNumCommands();
            curColumn = curIndent + 1;
            break;
         case FormatCommand.INDENT :
            curIndent += indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.OUTDENT :
            if ( curIndent >= indentAmt )
               curIndent -= indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.SPACE :
            curColumn += cmd.getNumCommands();
            break;
         default :
            throw new TreeFormatterException(
               "Invalid value in command queue.");
         }
      }

      cmdQueue.removeAllElements();

      //
      // Handle all special tokens preceding this NodeToken
      //
      if ( n.numSpecials() > 0 )
         for ( Enumeration<NodeToken> e = n.specialTokens.elements();
               e.hasMoreElements(); ) {
            NodeToken special = e.nextElement();

            //
            // -Place the token.
            // -Move cursor to next line after the special token.
            // -Don't update curColumn--want to keep current indent level.
            //
            placeToken(special, curLine, curColumn);
            curLine = special.endLine + 1;
         }

      placeToken(n, curLine, curColumn);
      curLine = n.endLine;
      curColumn = n.endColumn;
   }

   /**
    * Inserts token location (beginLine, beginColumn, endLine, endColumn)
    * information into the NodeToken.  Takes into account line-wrap.
    * Does not update curLine and curColumn.
    */
   private void placeToken(NodeToken n, int line, int column) {
      int length = n.tokenImage.length();

      //
      // Find beginning of token.  Only line-wrap for single-line tokens
      //
      if ( !lineWrap || n.tokenImage.indexOf('\n') != -1 ||
           column + length <= wrapWidth )
         n.beginColumn = column;
      else {
         ++line;
         column = curIndent + indentAmt + 1;
         n.beginColumn = column;
      }

      n.beginLine = line;

      //
      // Find end of token; don't count \n if it's the last character
      //
      for ( int i = 0; i < length; ++i ) {
         if ( n.tokenImage.charAt(i) == '\n' && i < length - 1 ) {
            ++line;
            column = 1;
         }
         else
            ++column;
      }

      n.endLine = line;
      n.endColumn = column;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> Declaration()
    * f1 -> Program()
    * f2 -> ( &lt;EOL&gt; )?
    * f3 -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(CompilationUnit n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;DECLARATION&gt;
    * f1 -> &lt;EOL&gt;
    * f2 -> ( SimpleDeclaration() )*
    * </PRE>
    */
   public void visit(Declaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
   }

   /**
    * <PRE>
    * f0 -> ( &lt;BOOLEAN&gt; | &lt;INTEGER&gt; | &lt;STRING&gt; )
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> ( &lt;ASSIGN&gt; ( &lt;INTEGER_LITERAL&gt; | &lt;STRING_LITERAL&gt; | &lt;TRUE&gt; | &lt;FALSE&gt; ) )?
    * f3 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(SimpleDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;PROGRAM&gt;
    * f1 -> &lt;EOL&gt;
    * f2 -> ( Statement() )*
    * f3 -> &lt;ENDPROGRAM&gt;
    * </PRE>
    */
   public void visit(Program n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | SwitchStatement()
    *       | FileStatement()
    * </PRE>
    */
   public void visit(Statement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> &lt;ASSIGN&gt;
    * f2 -> Expression(DUMMY_CONTAINER)
    * f3 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(AssignmentStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IF&gt;
    * f1 -> Expression(basicBooleanCounter)
    * f2 -> &lt;THEN&gt;
    * f3 -> &lt;EOL&gt;
    * f4 -> ( Statement() )*
    * f5 -> ( &lt;ELSE&gt; &lt;EOL&gt; ( Statement() )* )?
    * f6 -> &lt;ENDIF&gt;
    * f7 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(IfStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if ( n.f4.present() ) {
         processList(n.f4);
      }
      if ( n.f5.present() ) {
         n.f5.accept(this);
      }
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;WHILE&gt;
    * f1 -> Expression(basicBooleanCounter)
    * f2 -> &lt;DO&gt;
    * f3 -> &lt;EOL&gt;
    * f4 -> ( Statement() )*
    * f5 -> &lt;ENDWHILE&gt;
    * f6 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(WhileStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if ( n.f4.present() ) {
         processList(n.f4);
      }
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;SWITCH&gt;
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> &lt;EOL&gt;
    * f3 -> ( &lt;CASE&gt; Expression(DUMMY_CONTAINER) &lt;COLON&gt; ( &lt;EOL&gt; )? ( Statement() )* &lt;ENDCASE&gt; &lt;EOL&gt; )+
    * f4 -> ( &lt;CASE_DEFAULT&gt; &lt;COLON&gt; ( &lt;EOL&gt; )? ( Statement() )* &lt;ENDCASE&gt; &lt;EOL&gt; )?
    * f5 -> &lt;ENDSWITCH&gt;
    * f6 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(SwitchStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      processList(n.f3);
      if ( n.f4.present() ) {
         n.f4.accept(this);
      }
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;FILE&gt;
    * f1 -> ( &lt;OVERWRITE&gt; | &lt;APPEND&gt; )
    * f2 -> ( &lt;STRING_LITERAL&gt; | &lt;IDENTIFIER&gt; )
    * f3 -> Expression(DUMMY_CONTAINER)
    * f4 -> &lt;EOL&gt;
    * </PRE>
    */
   public void visit(FileStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> OrExpression(basicBooleanCounter)
    * </PRE>
    */
   public void visit(Expression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AndExpression(basicBooleanCounter)
    * f1 -> ( &lt;OR&gt; AndExpression(basicBooleanCounter) )*
    * </PRE>
    */
   public void visit(OrExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> NotExpression(basicBooleanCounter)
    * f1 -> ( &lt;AND&gt; NotExpression(basicBooleanCounter) )*
    * </PRE>
    */
   public void visit(AndExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> ( &lt;NOT&gt; )?
    * f1 -> EqualityExpression(basicBooleanCounter)
    * </PRE>
    */
   public void visit(NotExpression n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> RelationalExpression(basicBooleanCounter)
    * f1 -> ( ( &lt;EQ&gt; | &lt;NEQ&gt; ) RelationalExpression(basicBooleanCounter) )?
    * </PRE>
    */
   public void visit(EqualityExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression(basicBooleanCounter)
    * f1 -> ( ( &lt;LT&gt; | &lt;GT&gt; | &lt;LE&gt; | &lt;GE&gt; ) AdditiveExpression(basicBooleanCounter) )?
    * </PRE>
    */
   public void visit(RelationalExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression(basicBooleanCounter)
    * f1 -> ( ( &lt;PLUS&gt; | &lt;MINUS&gt; ) MultiplicativeExpression(basicBooleanCounter) )*
    * </PRE>
    */
   public void visit(AdditiveExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> BasicExpression(basicBooleanCounter)
    * f1 -> ( ( &lt;STAR&gt; | &lt;SLASH&gt; ) BasicExpression(basicBooleanCounter) )*
    * </PRE>
    */
   public void visit(MultiplicativeExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    *       | &lt;INTEGER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | &lt;TRUE&gt;
    *       | &lt;FALSE&gt;
    *       | &lt;LPAREN&gt; Expression(basicBooleanCounter) &lt;RPAREN&gt;
    * </PRE>
    */
   public void visit(BasicExpression n) {
      n.f0.accept(this);
   }

}

class FormatCommand {
   public static final int FORCE = 0;
   public static final int INDENT = 1;
   public static final int OUTDENT = 2;
   public static final int SPACE = 3;

   private int command;
   private int numCommands;

   FormatCommand(int command, int numCommands) {
      this.command = command;
      this.numCommands = numCommands;
   }

   public int getCommand()             { return command; }
   public int getNumCommands()         { return numCommands; }
   public void setCommand(int i)       { command = i; }
   public void setNumCommands(int i)   { numCommands = i; }
}

class TreeFormatterException extends RuntimeException {
   TreeFormatterException()         { super(); }
   TreeFormatterException(String s) { super(s); }
}
