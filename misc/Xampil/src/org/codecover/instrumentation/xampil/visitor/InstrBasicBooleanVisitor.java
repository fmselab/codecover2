/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

// Generated by JTB 1.3.2
package org.codecover.instrumentation.xampil.visitor;

import java.io.StringWriter;

import org.codecover.instrumentation.booleanterms.InstrBasicBooleanTerm;
import org.codecover.instrumentation.xampil.syntaxtree.Node;
import org.codecover.instrumentation.xampil.syntaxtree.NodeToken;

/**
 * Converts a {@link Node} to an {@link InstrBasicBooleanTerm} by capturing all
 * {@link NodeToken}s and the {@link NodeToken#startOffset} and
 * {@link NodeToken#endOffset}.
 * 
 * @see #convertToInstrBasicBoolean(Node)
 */
public class InstrBasicBooleanVisitor extends DepthFirstVisitor {
    private StringWriter writer;

    private int foundStartOffset = -1;

    private int foundEndOffset = -1;

    /**
     * Constructor.
     */
    private InstrBasicBooleanVisitor() {
        this.writer = new StringWriter();
    }

    /**
     * Dumps the current NodeToken to the {@link #writer}.
     */
    @Override
    public void visit(NodeToken n) {
        if (n.numSpecials() > 0) {
            for (NodeToken nt : n.specialTokens) {
                this.writer.write(nt.tokenImage);
            }
        }

        this.writer.write(n.tokenImage);
        if (this.foundStartOffset == -1) {
            this.foundStartOffset = n.startOffset;
        }
        this.foundEndOffset = n.endOffset;
    }

    /**
     * This method converts a {@link Node} to an {@link InstrBasicBooleanTerm}
     * by capturing all {@link NodeToken}s and the
     * {@link NodeToken#startOffset} and {@link NodeToken#endOffset}.<br>
     * <br>
     * This method calls:
     * 
     * <pre>
     * InstrBasicBooleanVisitor treeStringDumper = new InstrBasicBooleanVisitor();
     * n.accept(treeStringDumper);
     * return new InstrBasicBooleanTerm(treeStringDumper.writer.toString(),
     *         treeStringDumper.foundStartOffset,
     *         treeStringDumper.foundEndOffset);
     * </pre>
     * 
     * @param n
     *            The Node to convert.
     * @return The captured {@link InstrBasicBooleanTerm}.
     */
    public static InstrBasicBooleanTerm convertToInstrBasicBoolean(Node n) {
        InstrBasicBooleanVisitor treeStringDumper = new InstrBasicBooleanVisitor();
        n.accept(treeStringDumper);

        return new InstrBasicBooleanTerm(treeStringDumper.writer.toString().trim(),
                treeStringDumper.foundStartOffset,
                treeStringDumper.foundEndOffset);
    }
}
