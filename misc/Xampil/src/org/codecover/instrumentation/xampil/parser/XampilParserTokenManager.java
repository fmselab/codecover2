/* Generated By:JavaCC: Do not edit this line. XampilParserTokenManager.java */
package org.codecover.instrumentation.xampil.parser;
import org.codecover.instrumentation.xampil.syntaxtree.*;
import java.util.Vector;

public class XampilParserTokenManager implements XampilParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffffff0L) != 0L)
         {
            jjmatchedKind = 44;
            return 13;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 1;
         if ((active0 & 0x20000000000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x4008400L) != 0L)
            return 13;
         if ((active0 & 0x3bff7bf0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 13;
         }
         return -1;
      case 2:
         if ((active0 & 0x31ff7bf0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 13;
         }
         if ((active0 & 0xa000000L) != 0L)
            return 13;
         return -1;
      case 3:
         if ((active0 & 0x21bb63f0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0x10441800L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0x20006000L) != 0L)
            return 13;
         if ((active0 & 0x1bb03f0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 13;
         }
         return -1;
      case 5:
         if ((active0 & 0xb901f0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0x1020200L) != 0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0xa10050L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x1801a0L) != 0L)
            return 13;
         return -1;
      case 7:
         if ((active0 & 0xa00050L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x10000L) != 0L)
            return 13;
         return -1;
      case 8:
         if ((active0 & 0x50L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 13;
         }
         if ((active0 & 0xa00000L) != 0L)
            return 13;
         return -1;
      case 9:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 13;
         }
         if ((active0 & 0x40L) != 0L)
            return 13;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         return jjStopAtPos(0, 42);
      case 43:
         return jjStopAtPos(0, 40);
      case 45:
         return jjStartNfaWithStates_0(0, 41, 15);
      case 47:
         return jjStartNfaWithStates_0(0, 43, 1);
      case 58:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 60:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x4800000000L);
      case 61:
         return jjStopAtPos(0, 34);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x88010L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x313040L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x20400000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x500L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x4800000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20200L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x10000800L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010L);
      case 70:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 13);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2312140L);
      case 79:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 13);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000080L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 82:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 13);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000020L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 68:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x312040L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x41000L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 13);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 13);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 13);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000100L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x4090L);
      case 78:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 13);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x100010L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 13);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 70:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 13);
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000200L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x60L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 13);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 71:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 13);
         break;
      case 72:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 13);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x210000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x800010L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 69:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 13);
         break;
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 77:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 13);
         break;
      case 78:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 13);
         break;
      case 82:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 13);
         break;
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 13);
         break;
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x800010L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 69:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 13);
         break;
      case 72:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 13);
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 13);
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 4, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(16);
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddTwoStates(8, 10);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 48)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 10)
                     jjCheckNAdd(9);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 13 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(8, 10);
                  break;
               case 8:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(8, 10);
                  break;
               case 9:
                  if (curChar != 13)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(8, 10);
                  break;
               case 10:
                  if (curChar == 10)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if (curChar == 10)
                     jjCheckNAdd(9);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 48 && kind > 45)
                     kind = 45;
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 22:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(13);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(3, 5);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(13);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(3, 5);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   19, 20, 22, 2, 3, 5, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\104\105\103\114\101\122\101\124\111\117\116", 
"\120\122\117\107\122\101\115", "\105\116\104\120\122\117\107\122\101\115", "\102\117\117\114\105\101\116", 
"\111\116\124\105\107\105\122", "\123\124\122\111\116\107", "\111\106", "\124\110\105\116", 
"\105\114\123\105", "\105\116\104\111\106", "\127\110\111\114\105", "\104\117", 
"\105\116\104\127\110\111\114\105", "\123\127\111\124\103\110", "\103\101\123\105", 
"\104\105\106\101\125\114\124", "\105\116\104\103\101\123\105", "\105\116\104\123\127\111\124\103\110", 
"\106\111\114\105", "\117\126\105\122\127\122\111\124\105", "\101\120\120\105\116\104", 
"\101\116\104", "\117\122", "\116\117\124", "\124\122\125\105", "\106\101\114\123\105", "\50", 
"\51", "\72", "\72\75", "\75", "\74\76", "\74", "\76", "\74\75", "\76\75", "\53", 
"\55", "\52", "\57", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static final long[] jjtoSpecial = {
   0x6L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[23];
private final int[] jjstateSet = new int[46];
protected char curChar;
public XampilParserTokenManager(CharStream stream){
   input_stream = stream;
}
public XampilParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
  t.beginOffset = input_stream.getBeginOffset();
  t.endOffset = input_stream.getEndOffset();
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
