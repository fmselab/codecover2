//
// Generated by JTB 1.3.2
//

options {
   UNICODE_INPUT = true;
   ERROR_REPORTING = true;
   USER_CHAR_STREAM = true;
   STATIC = false;
   JDK_VERSION = "1.5";
   FORCE_LA_CHECK = true;
}

PARSER_BEGIN(XampilParser)
package org.codecover.instrumentation.xampil.parser;

import org.codecover.instrumentation.xampil.syntaxtree.*;
import java.util.Vector;


public class XampilParser 
{
   private InstrumentableItemCounter counter = new InstrumentableItemCounter();
   static interface IntegerContainer 
   {
      public void set(int value)
      ;
      public int get()
      ;
   }
   static class RealIntegerContainer implements IntegerContainer
   {
      int value = 0;
      public void set(int value)
      {
         this.value = value;
      }
      public int get()
      {
         return this.value;
      }
   }
   static class DummyIntegerContainer implements IntegerContainer
   {
      public void set(int value)
      {
      }
      public int get()
      {
         return 0;
      }
   }
   static final DummyIntegerContainer DUMMY_CONTAINER = new DummyIntegerContainer();
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(XampilParser)

SPECIAL_TOKEN :
{
   <SPACE_CHAR: " " | "\t" | "\f">
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\n\r")?>
}

TOKEN :
{
   <EOL: ("\n" | "\r" | "\n\r") ("\n" | "\r" | "\n\r" | " " | "\t" | "\f")*>
}

TOKEN :
{
   <DECLARATION: "DECLARATION">
   | <PROGRAM: "PROGRAM">
   | <ENDPROGRAM: "ENDPROGRAM">
   | <BOOLEAN: "BOOLEAN">
   | <INTEGER: "INTEGER">
   | <STRING: "STRING">
   | <IF: "IF">
   | <THEN: "THEN">
   | <ELSE: "ELSE">
   | <ENDIF: "ENDIF">
   | <WHILE: "WHILE">
   | <DO: "DO">
   | <ENDWHILE: "ENDWHILE">
   | <SWITCH: "SWITCH">
   | <CASE: "CASE">
   | <CASE_DEFAULT: "DEFAULT">
   | <ENDCASE: "ENDCASE">
   | <ENDSWITCH: "ENDSWITCH">
   | <FILE: "FILE">
   | <OVERWRITE: "OVERWRITE">
   | <APPEND: "APPEND">
   | <AND: "AND">
   | <OR: "OR">
   | <NOT: "NOT">
   | <TRUE: "TRUE">
   | <FALSE: "FALSE">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <COLON: ":">
   | <ASSIGN: ":=">
   | <EQ: "=">
   | <NEQ: "<>">
   | <LT: "<">
   | <GT: ">">
   | <LE: "<=">
   | <GE: ">=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <SLASH: "/">
}

TOKEN :
{
   <IDENTIFIER: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>
}

TOKEN :
{
   <INTEGER_LITERAL: ((<MINUS>)? ["1"-"9"] (["0"-"9"])*) | "0">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" ["n", "t", "b", "r", "f", "\\", "'", "\""]))* "\"">
}

CompilationUnit CompilationUnit(InstrumentableItemCounter counter) :
{
   Declaration n0;
   Program n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   this.counter = counter;
}
{
   n0=Declaration()
   n1=Program()
   (
      n4=<EOL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<EOF> { 
      n6.beginColumn++; n6.endColumn++;
      n5 = JTBToolkit.makeNodeToken(n6);
   }
   
   {
      this.counter = new InstrumentableItemCounter();
   }
   
   
   { return new CompilationUnit(n0,n1,n2,n5); }
}

Declaration Declaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   SimpleDeclaration n5;

   
}
{
   n1=<DECLARATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<EOL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=SimpleDeclaration()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new Declaration(n0,n2,n4); }
}

SimpleDeclaration SimpleDeclaration() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;

   
}
{
   (
      (
         n2=<BOOLEAN> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTEGER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<STRING> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      { n10 = new NodeSequence(2); }
      n12=<ASSIGN> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      (
         (
            n15=<INTEGER_LITERAL> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13 = new NodeChoice(n14, 0); }
         |
            n17=<STRING_LITERAL> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n13 = new NodeChoice(n16, 1); }
         |
            n19=<TRUE> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n13 = new NodeChoice(n18, 2); }
         |
            n21=<FALSE> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n13 = new NodeChoice(n20, 3); }
         )
         
      )
      { n10.addNode(n13); }
      { n9.addNode(n10); }
   )?
   n23=<EOL> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new SimpleDeclaration(n0,n7,n9,n22); }
}

Program Program() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<PROGRAM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<EOL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=Statement()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7=<ENDPROGRAM> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Program(n0,n2,n4,n6); }
}

Statement Statement() :
{
   NodeChoice n0;
   AssignmentStatement n1;
   IfStatement n2;
   WhileStatement n3;
   SwitchStatement n4;
   FileStatement n5;

   this.counter.incrementStatementCount();
}
{
   (
      n1=AssignmentStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IfStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=WhileStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=SwitchStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FileStatement()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new Statement(n0); }
}

AssignmentStatement AssignmentStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ASSIGN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression(DUMMY_CONTAINER)
   n6=<EOL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AssignmentStatement(n0,n2,n4,n5); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeListOptional n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   RealIntegerContainer basicBooleanCounter = new RealIntegerContainer();
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression(basicBooleanCounter)
   
   {
      this.counter.incrementConditionCount(basicBooleanCounter.get());
   }
   
   n4=<THEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<EOL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   {
      this.counter.incrementBranchCount();
   }
   
   (
      n8=Statement()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   (
      { n15 = new NodeListOptional(); }
      { n10 = new NodeSequence(4); }
      n12=<ELSE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n14=<EOL> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n10.addNode(n13); }
      
      {
         this.counter.incrementBranchCount();
      }
      
      (
         n16=Statement()
         { n15.addNode(n16); }
      )*
      { n15.nodes.trimToSize(); }
      { n10.addNode(n15); }
      { n9.addNode(n10); }
   )?
   n18=<ENDIF> { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=<EOL> { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new IfStatement(n0,n2,n3,n5,n7,n9,n17,n19); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   this.counter.incrementLoopCount();RealIntegerContainer basicBooleanCounter = new RealIntegerContainer();
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression(basicBooleanCounter)
   
   {
      this.counter.incrementConditionCount(basicBooleanCounter.get());
   }
   
   n4=<DO> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<EOL> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=Statement()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10=<ENDWHILE> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<EOL> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new WhileStatement(n0,n2,n3,n5,n7,n9,n11); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16;
   Statement n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeListOptional n31;
   Statement n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;

   
}
{
   n1=<SWITCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<EOL> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n13 = new NodeOptional(); }
      { n16 = new NodeListOptional(); }
      { n7 = new NodeSequence(8); }
      n9=<CASE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=Expression(DUMMY_CONTAINER)
      { n7.addNode(n10); }
      n12=<COLON> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n7.addNode(n11); }
      (
         n15=<EOL> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n7.addNode(n13); }
      
      {
         this.counter.incrementBranchCount();
      }
      
      (
         n17=Statement()
         { n16.addNode(n17); }
      )*
      { n16.nodes.trimToSize(); }
      { n7.addNode(n16); }
      n19=<ENDCASE> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n7.addNode(n18); }
      n21=<EOL> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n7.addNode(n20); }
      { n6.addNode(n7); }
   )+
   { n6.nodes.trimToSize(); }
   (
      { n28 = new NodeOptional(); }
      { n31 = new NodeListOptional(); }
      { n23 = new NodeSequence(7); }
      n25=<CASE_DEFAULT> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      n27=<COLON> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n23.addNode(n26); }
      (
         n30=<EOL> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n23.addNode(n28); }
      
      {
         this.counter.incrementBranchCount();
      }
      
      (
         n32=Statement()
         { n31.addNode(n32); }
      )*
      { n31.nodes.trimToSize(); }
      { n23.addNode(n31); }
      n34=<ENDCASE> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n23.addNode(n33); }
      n36=<EOL> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n23.addNode(n35); }
      { n22.addNode(n23); }
   )?
   n38=<ENDSWITCH> { n37 = JTBToolkit.makeNodeToken(n38); }
   n40=<EOL> { n39 = JTBToolkit.makeNodeToken(n40); }
   
   { return new SwitchStatement(n0,n2,n4,n6,n22,n37,n39); }
}

FileStatement FileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<FILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<OVERWRITE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<APPEND> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   (
      (
         n9=<STRING_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<IDENTIFIER> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      )
      
   )
   n12=Expression(DUMMY_CONTAINER)
   n14=<EOL> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new FileStatement(n0,n2,n7,n12,n13); }
}

Expression Expression(IntegerContainer basicBooleanCounter) :
{
   OrExpression n0;

   
}
{
   n0=OrExpression(basicBooleanCounter)
   
   { return new Expression(n0); }
}

OrExpression OrExpression(IntegerContainer basicBooleanCounter) :
{
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AndExpression n5;

   
}
{
   n0=AndExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(2); }
      n4=<OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AndExpression(basicBooleanCounter)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OrExpression(n0,n1); }
}

AndExpression AndExpression(IntegerContainer basicBooleanCounter) :
{
   NotExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NotExpression n5;

   
}
{
   n0=NotExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(2); }
      n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=NotExpression(basicBooleanCounter)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AndExpression(n0,n1); }
}

NotExpression NotExpression(IntegerContainer basicBooleanCounter) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   EqualityExpression n3;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=EqualityExpression(basicBooleanCounter)
   
   { return new NotExpression(n0,n3); }
}

EqualityExpression EqualityExpression(IntegerContainer basicBooleanCounter) :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   RelationalExpression n8;

   int basicBooleanCountBefore = basicBooleanCounter.get();
}
{
   n0=RelationalExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(3); }
      (
         (
            n5=<EQ> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<NEQ> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=RelationalExpression(basicBooleanCounter)
      { n2.addNode(n8); }
      
      {
         basicBooleanCounter.set(basicBooleanCountBefore + 1);
      }
      
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

RelationalExpression RelationalExpression(IntegerContainer basicBooleanCounter) :
{
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AdditiveExpression n12;

   int basicBooleanCountBefore = basicBooleanCounter.get();
}
{
   n0=AdditiveExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(3); }
      (
         (
            n5=<LT> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<GT> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<LE> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<GE> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         )
         
      )
      { n2.addNode(n3); }
      n12=AdditiveExpression(basicBooleanCounter)
      { n2.addNode(n12); }
      
      {
         basicBooleanCounter.set(basicBooleanCountBefore + 1);
      }
      
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

AdditiveExpression AdditiveExpression(IntegerContainer basicBooleanCounter) :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;

   int basicBooleanCountBefore = basicBooleanCounter.get();
}
{
   n0=MultiplicativeExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(3); }
      (
         (
            n5=<PLUS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<MINUS> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=MultiplicativeExpression(basicBooleanCounter)
      { n2.addNode(n8); }
      
      {
         basicBooleanCounter.set(basicBooleanCountBefore + 1);
      }
      
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression(IntegerContainer basicBooleanCounter) :
{
   BasicExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   BasicExpression n8;

   int basicBooleanCountBefore = basicBooleanCounter.get();
}
{
   n0=BasicExpression(basicBooleanCounter)
   (
      { n2 = new NodeSequence(3); }
      (
         (
            n5=<STAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=BasicExpression(basicBooleanCounter)
      { n2.addNode(n8); }
      
      {
         basicBooleanCounter.set(basicBooleanCountBefore + 1);
      }
      
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

BasicExpression BasicExpression(IntegerContainer basicBooleanCounter) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      
      {
         basicBooleanCounter.set(basicBooleanCounter.get() + 1);
      }
      
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INTEGER_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<TRUE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<FALSE> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      { n11 = new NodeSequence(3); }
      n13=<LPAREN> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=Expression(basicBooleanCounter)
      { n11.addNode(n14); }
      n16=<RPAREN> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n11.addNode(n15); }
      { n0 = new NodeChoice(n11, 5); }
   )
   
   { return new BasicExpression(n0); }
}
