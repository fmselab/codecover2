/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

// Generated by JTB 1.3.2
package org.codecover.instrumentation.xampil.visitor;

import org.codecover.instrumentation.xampil.syntaxtree.Node;
import org.codecover.instrumentation.xampil.syntaxtree.NodeToken;

/**
 * Gets the first {@link NodeToken#startOffset}
 */
public class BeginOffset extends DepthFirstVisitor {
    private int foundStartOffset = -1;

    private BeginOffset() {
        // private constructor
    }

    /**
     * Assigns {@link #foundStartOffset} and throws an {@link RuntimeException}.
     */
    @Override
    public void visit(NodeToken n) {
        this.foundStartOffset = n.beginOffset;
        throw new RuntimeException();
    }

    /**
     * This method seaches in a {@link Node} for the first
     * {@link NodeToken#startOffset}. <br>
     * This method calls:
     * 
     * <pre>
     * StartOffset startOffset = new StartOffset();
     * 
     * try {
     *     n.accept(startOffset);
     * } catch (RuntimeException e) {
     *     // expected
     * }
     * 
     * return startOffset.foundStartOffset;
     * </pre>
     * 
     * @param n
     *            The Node to start the search from.
     * 
     * @return The first {@link NodeToken#startOffset}. <code>-1</code> if
     *         not present.
     */
    public static int getStartOffset(Node n) {
        BeginOffset startOffset = new BeginOffset();

        try {
            n.accept(startOffset);
        } catch (RuntimeException e) {
            // expected
        }

        return startOffset.foundStartOffset;
    }
}
