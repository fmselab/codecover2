//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.cobol85.visitor;
import org.codecover.instrumentation.cobol85.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> &lt;COBOL_WORD&gt;
    * </PRE>
    */
   public R visit(CobolWord n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LEVEL_66&gt;
    *       | &lt;LEVEL_77&gt;
    *       | &lt;LEVEL_88&gt;
    *       | &lt;LEVEL_NUMBER&gt;
    *       | &lt;INTEGER&gt;
    * </PRE>
    */
   public R visit(IntegerConstant n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; )?
    * f1 -> IntegerConstant()
    * f2 -> [ ( &lt;DOTCHAR&gt; | &lt;COMMACHAR&gt; ) IntegerConstant() ]
    * </PRE>
    */
   public R visit(NumericConstant n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LEVEL_NUMBER&gt;
    * </PRE>
    */
   public R visit(LevelNumber n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ZERO&gt;
    *       | &lt;ZEROS&gt;
    *       | &lt;ZEROES&gt;
    *       | &lt;SPACE&gt;
    *       | &lt;SPACES&gt;
    *       | &lt;HIGH_VALUE&gt;
    *       | &lt;HIGH_VALUES&gt;
    *       | &lt;LOW_VALUE&gt;
    *       | &lt;LOW_VALUES&gt;
    *       | &lt;QUOTE&gt;
    *       | &lt;QUOTES&gt;
    *       | &lt;NULL&gt;
    *       | &lt;NULLS&gt;
    * </PRE>
    */
   public R visit(FigurativeConstant n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ( &lt;QUOTEDSTRING&gt; )+ | &lt;HEXNUMBER&gt; )
    * </PRE>
    */
   public R visit(NonNumericConstant n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;ALL&gt; ]
    * f1 -> ( NonNumericConstant() | NumericConstant() | FigurativeConstant() )
    * </PRE>
    */
   public R visit(Literal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CombinableCondition()
    * f1 -> ( ( &lt;AND&gt; | &lt;OR&gt; ) ( CombinableCondition() | AbbreviationRest() ) )*
    * </PRE>
    */
   public R visit(Condition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;NOT&gt; ]
    * f1 -> SimpleCondition()
    * </PRE>
    */
   public R visit(CombinableCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;LPARENCHAR&gt; Condition() &lt;RPARENCHAR&gt; | RelationCondition() | ClassCondition() | ConditionNameCondition() )
    * </PRE>
    */
   public R visit(SimpleCondition n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Identifier()
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> [ &lt;NOT&gt; ]
    * f3 -> ( &lt;NUMERIC&gt; | &lt;ALPHABETIC&gt; | &lt;ALPHABETIC_LOWER&gt; | &lt;ALPHABETIC_UPPER&gt; | ClassName() | &lt;DBCS&gt; | &lt;KANJI&gt; )
    * </PRE>
    */
   public R visit(ClassCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ConditionNameReference()
    * </PRE>
    */
   public R visit(ConditionNameCondition n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ArithmeticExpression()
    * f1 -> ( RelationalOperator() ( ArithmeticExpression() | &lt;LPARENCHAR&gt; ArithmeticExpression() ( ( &lt;AND&gt; | &lt;OR&gt; ) AbbreviationRest() )+ &lt;RPARENCHAR&gt; ) | SignCondition() )
    * </PRE>
    */
   public R visit(RelationCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> [ &lt;NOT&gt; ]
    * f2 -> ( &lt;POSITIVE&gt; | &lt;NEGATIVE&gt; | &lt;ZERO&gt; )
    * </PRE>
    */
   public R visit(SignCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> ( [ &lt;NOT&gt; ] ( &lt;GREATER&gt; [ &lt;THAN&gt; ] | &lt;MORETHANCHAR&gt; | &lt;LESS&gt; [ &lt;THAN&gt; ] | &lt;LESSTHANCHAR&gt; | &lt;EQUAL&gt; [ &lt;TO&gt; ] | &lt;EQUALCHAR&gt; ) | &lt;GREATER&gt; [ &lt;THAN&gt; ] &lt;OR&gt; &lt;EQUAL&gt; [ &lt;TO&gt; ] | &lt;MORETHANOREQUAL&gt; | &lt;LESS&gt; [ &lt;THAN&gt; ] &lt;OR&gt; &lt;EQUAL&gt; [ &lt;TO&gt; ] | &lt;LESSTHANOREQUAL&gt; )
    * </PRE>
    */
   public R visit(RelationalOperator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( [ &lt;NOT&gt; ] [ RelationalOperator() ] AbbreviationLeaf() )+
    * </PRE>
    */
   public R visit(AbbreviationRest n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ArithmeticExpression() | &lt;LPARENCHAR&gt; ArithmeticExpression() AbbreviationRest() &lt;RPARENCHAR&gt; )
    * </PRE>
    */
   public R visit(AbbreviationLeaf n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ParagraphName() [ ( &lt;IN&gt; | &lt;OF&gt; ) SectionName() ] | SectionName() )
    * </PRE>
    */
   public R visit(ProcedureName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( QualifiedDataName() ( &lt;LPARENCHAR&gt; Subscript() &lt;RPARENCHAR&gt; )* [ &lt;LPARENCHAR&gt; LeftmostCharacterPosition() &lt;COLONCHAR&gt; [ Length() ] &lt;RPARENCHAR&gt; ] | &lt;LINAGE_COUNTER&gt; [ ( &lt;IN&gt; | &lt;OF&gt; ) FileName() ] )
    * </PRE>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( DataName() ( ( &lt;IN&gt; | &lt;OF&gt; ) DataName() )* [ ( &lt;IN&gt; | &lt;OF&gt; ) FileName() ] | SpecialRegister() )
    * </PRE>
    */
   public R visit(QualifiedDataName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ArithmeticExpression()
    * </PRE>
    */
   public R visit(Length n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ArithmeticExpression()
    * </PRE>
    */
   public R visit(LeftmostCharacterPosition n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ConditionName()
    * f1 -> ( ( ( &lt;IN&gt; | &lt;OF&gt; ) DataName() )* [ ( &lt;IN&gt; | &lt;OF&gt; ) FileName() ] ( &lt;LPARENCHAR&gt; Subscript() &lt;RPARENCHAR&gt; )* | ( ( &lt;IN&gt; | &lt;OF&gt; ) MnemonicName() )* )
    * </PRE>
    */
   public R visit(ConditionNameReference n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ( IntegerConstant() | QualifiedDataName() [ ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; ) IntegerConstant() ] | IndexName() [ ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; ) IntegerConstant() ] ) [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(Subscript n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(Mode n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(AlphabetName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(ClassName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(ConditionName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(DataName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(FileName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(IndexName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(MnemonicName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> QualifiedDataName()
    * </PRE>
    */
   public R visit(RecordName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(RoutineName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(SymbolicCharacter n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(LibraryName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(ProgramName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(SectionName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(ParagraphName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CobolWord()
    * </PRE>
    */
   public R visit(SystemName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SystemName()
    * </PRE>
    */
   public R visit(ComputerName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SystemName()
    * </PRE>
    */
   public R visit(LanguageName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SystemName()
    * </PRE>
    */
   public R visit(EnvironmentName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SystemName()
    * </PRE>
    */
   public R visit(AssignmentName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ProgramName()
    * </PRE>
    */
   public R visit(BasisName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;ADDRESS&gt; &lt;OF&gt; DataName() | &lt;DEBUG_ITEM&gt; | &lt;LENGTH&gt; &lt;OF&gt; Identifier() | &lt;RETURN_CODE&gt; | &lt;SHIFT_OUT&gt; | &lt;SHIFT_IN&gt; | &lt;SORT_CONTROL&gt; | &lt;SORT_CORE_SIZE&gt; | &lt;SORT_FILE_SIZE&gt; | &lt;SORT_MESSAGE&gt; | &lt;SORT_MODE_SIZE&gt; | &lt;SORT_RETURN&gt; | &lt;TALLY&gt; | &lt;WHEN_COMPILED&gt; )
    * </PRE>
    */
   public R visit(SpecialRegister n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> TimesDiv()
    * f1 -> ( ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; ) TimesDiv() )*
    * </PRE>
    */
   public R visit(ArithmeticExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Power()
    * f1 -> ( ( &lt;ASTERISKCHAR&gt; | &lt;SLASHCHAR&gt; ) Power() )*
    * </PRE>
    */
   public R visit(TimesDiv n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; ) ]
    * f1 -> Basis()
    * f2 -> ( "**" Basis() )*
    * </PRE>
    */
   public R visit(Power n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( Identifier() | Literal() | &lt;LPARENCHAR&gt; ArithmeticExpression() &lt;RPARENCHAR&gt; )
    * </PRE>
    */
   public R visit(Basis n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ( ( &lt;COBOL_WORD_WITH_SLASH&gt; )+ | &lt;QUOTEDSTRING&gt; ) &lt;DOT&gt; )+
    * </PRE>
    */
   public R visit(CommentLine n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ProgramUnit()
    * f1 -> ( NestedProgramUnit() EndProgramStatement() )*
    * f2 -> [ EndProgramStatement() ( CompilationUnit() )* ]
    * f3 -> &lt;EOF&gt;
    * </PRE>
    */
   public R visit(CompilationUnit n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> IdentificationDivision()
    * f1 -> [ EnvironmentDivision() ]
    * f2 -> [ DataDivision() ]
    * f3 -> [ ProcedureDivision() ]
    * </PRE>
    */
   public R visit(ProgramUnit n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> NestedIdentificationDivision()
    * f1 -> [ EnvironmentDivision() ]
    * f2 -> [ DataDivision() ]
    * f3 -> [ ProcedureDivision() ]
    * </PRE>
    */
   public R visit(NestedProgramUnit n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;END&gt;
    * f1 -> &lt;PROGRAM&gt;
    * f2 -> ProgramName()
    * f3 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(EndProgramStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFICATION&gt;
    * f1 -> &lt;DIVISION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ProgramIdParagraph()
    * f4 -> ( IdentificationDivisionParagraph() )*
    * </PRE>
    */
   public R visit(IdentificationDivision n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFICATION&gt; | &lt;ID&gt; )
    * f1 -> &lt;DIVISION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> NestedProgramIdParagraph()
    * f4 -> ( IdentificationDivisionParagraph() )*
    * </PRE>
    */
   public R visit(NestedIdentificationDivision n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AuthorParagraph()
    *       | InstallationParagraph()
    *       | DateWrittenParagraph()
    *       | DateCompiledParagraph()
    *       | SecurityParagraph()
    * </PRE>
    */
   public R visit(IdentificationDivisionParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PROGRAM_ID&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> ProgramName()
    * f3 -> [ [ &lt;IS&gt; ] &lt;INITIAL&gt; [ &lt;PROGRAM&gt; ] ]
    * f4 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(ProgramIdParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PROGRAM_ID&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> ProgramName()
    * f3 -> [ [ &lt;IS&gt; ] InitialOrCommon() [ &lt;PROGRAM&gt; ] ]
    * f4 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(NestedProgramIdParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;INITIAL&gt; [ &lt;COMMON&gt; ] | &lt;COMMON&gt; [ &lt;INITIAL&gt; ] )
    * </PRE>
    */
   public R visit(InitialOrCommon n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;AUTHOR&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(AuthorParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INSTALLATION&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(InstallationParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DATE_WRITTEN&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(DateWrittenParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DATE_COMPILED&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(DateCompiledParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SECURITY&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(SecurityParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ENVIRONMENT&gt;
    * f1 -> &lt;DIVISION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( EnvironmentSection() )*
    * </PRE>
    */
   public R visit(EnvironmentDivision n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ConfigurationSection()
    *       | InputOutputSection()
    * </PRE>
    */
   public R visit(EnvironmentSection n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CONFIGURATION&gt;
    * f1 -> &lt;SECTION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( ConfigurationSectionParagraph() )*
    * </PRE>
    */
   public R visit(ConfigurationSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SourceComputerParagraph()
    *       | ObjectComputerParagraph()
    *       | SpecialNamesParagraph()
    * </PRE>
    */
   public R visit(ConfigurationSectionParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SOURCE_COMPUTER&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> ComputerName()
    * f3 -> [ [ &lt;WITH&gt; ] &lt;DEBUGGING&gt; &lt;MODE&gt; ]
    * f4 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(SourceComputerParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;OBJECT_COMPUTER&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> ComputerName()
    * f3 -> ( ObjectComputerClause() )*
    * f4 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(ObjectComputerParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> MemorySizeClause()
    *       | CollatingSequenceClause()
    *       | SegmentLimitClause()
    *       | CharacterSetClause()
    * </PRE>
    */
   public R visit(ObjectComputerClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;MEMORY&gt;
    * f1 -> [ &lt;SIZE&gt; ]
    * f2 -> IntegerConstant()
    * f3 -> [ &lt;WORDS&gt; | &lt;CHARACTERS&gt; | &lt;MODULES&gt; ]
    * </PRE>
    */
   public R visit(MemorySizeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;PROGRAM&gt; ]
    * f1 -> [ &lt;COLLATING&gt; ]
    * f2 -> &lt;SEQUENCE&gt;
    * f3 -> [ &lt;IS&gt; ]
    * f4 -> AlphabetName()
    * </PRE>
    */
   public R visit(CollatingSequenceClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SEGMENT&gt;
    * f1 -> &lt;LIMIT&gt;
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> IntegerConstant()
    * </PRE>
    */
   public R visit(SegmentLimitClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CHARACTER&gt;
    * f1 -> &lt;SET&gt;
    * f2 -> [ CommentLine() ]
    * </PRE>
    */
   public R visit(CharacterSetClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SPECIAL_NAMES&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ SpecialNameClause() ( SpecialNameClause() )* &lt;DOT&gt; ]
    * </PRE>
    */
   public R visit(SpecialNamesParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AlphabetClause()
    *       | ClassClause()
    *       | CurrencySignClause()
    *       | DecimalPointClause()
    *       | SymbolicCharactersClause()
    *       | EnvironmentNameIsMnemonicNameClause()
    * </PRE>
    */
   public R visit(SpecialNameClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ALPHABET&gt;
    * f1 -> AlphabetName()
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> ( &lt;STANDARD_1&gt; | &lt;STANDARD_2&gt; | &lt;NATIVE&gt; | CobolWord() | ( Literal() [ ( ( &lt;THROUGH&gt; | &lt;THRU&gt; ) Literal() | ( &lt;ALSO&gt; Literal() )+ ) ] )+ )
    * </PRE>
    */
   public R visit(AlphabetClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CLASS&gt;
    * f1 -> ClassName()
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> ( Literal() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) Literal() ] )+
    * </PRE>
    */
   public R visit(ClassClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CURRENCY&gt;
    * f1 -> [ &lt;SIGN&gt; ]
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> Literal()
    * </PRE>
    */
   public R visit(CurrencySignClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DECIMAL_POINT&gt;
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> &lt;COMMA&gt;
    * </PRE>
    */
   public R visit(DecimalPointClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SYMBOLIC&gt;
    * f1 -> [ &lt;CHARACTERS&gt; ]
    * f2 -> ( ( SymbolicCharacter() )+ [ ( &lt;ARE&gt; | &lt;IS&gt; ) ] ( IntegerConstant() )+ )+
    * f3 -> [ &lt;IN&gt; AlphabetName() ]
    * </PRE>
    */
   public R visit(SymbolicCharactersClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( EnvironmentName() [ &lt;IS&gt; ] MnemonicName() [ SpecialNamesParagraphStatusPhrase() ] | SpecialNamesParagraphStatusPhrase() )
    * </PRE>
    */
   public R visit(EnvironmentNameIsMnemonicNameClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;ON&gt; [ &lt;STATUS&gt; ] [ &lt;IS&gt; ] Condition() [ &lt;OFF&gt; [ &lt;STATUS&gt; ] [ &lt;IS&gt; ] Condition() ] | &lt;OFF&gt; [ &lt;STATUS&gt; ] [ &lt;IS&gt; ] Condition() [ &lt;ON&gt; [ &lt;STATUS&gt; ] [ &lt;IS&gt; ] Condition() ] )
    * </PRE>
    */
   public R visit(SpecialNamesParagraphStatusPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INPUT_OUTPUT&gt;
    * f1 -> &lt;SECTION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( InputOutputSectionParagraph() )*
    * </PRE>
    */
   public R visit(InputOutputSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> FileControlParagraph()
    *       | IOControlParagraph()
    * </PRE>
    */
   public R visit(InputOutputSectionParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;FILE_CONTROL&gt;
    * f1 -> ( [ &lt;DOT&gt; ] FileControlEntry() )*
    * f2 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(FileControlParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SelectClause()
    * f1 -> AssignClause()
    * f2 -> ( FileControlClause() )*
    * </PRE>
    */
   public R visit(FileControlEntry n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ReserveClause()
    *       | OrganizationClause()
    *       | PaddingCharacterClause()
    *       | RecordDelimiterClause()
    *       | AccessModeClause()
    *       | AlternateRecordKeyClause()
    *       | FileStatusClause()
    *       | PasswordClause()
    * </PRE>
    */
   public R visit(FileControlClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SELECT&gt;
    * f1 -> [ &lt;OPTIONAL&gt; ]
    * f2 -> FileName()
    * </PRE>
    */
   public R visit(SelectClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ASSIGN&gt;
    * f1 -> [ &lt;TO&gt; ]
    * f2 -> ( AssignmentName() | Literal() )
    * </PRE>
    */
   public R visit(AssignClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RESERVE&gt;
    * f1 -> IntegerConstant()
    * f2 -> ( &lt;AREA&gt; | &lt;AREAS&gt; )
    * </PRE>
    */
   public R visit(ReserveClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;ORGANIZATION&gt; ]
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> ( SequentialOrganizationClause() | LineSequentialOrganizationClause() | RelativeOrganizationClause() | IndexedOrganizationClause() )
    * </PRE>
    */
   public R visit(OrganizationClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SEQUENTIAL&gt;
    * </PRE>
    */
   public R visit(SequentialOrganizationClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LINE&gt;
    * f1 -> &lt;SEQUENTIAL&gt;
    * </PRE>
    */
   public R visit(LineSequentialOrganizationClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SEQUENTIAL&gt;
    * </PRE>
    */
   public R visit(RelativeOrganizationClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INDEXED&gt;
    * </PRE>
    */
   public R visit(IndexedOrganizationClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PADDING&gt;
    * f1 -> [ &lt;CHARACTER&gt; ]
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> ( QualifiedDataName() | Literal() )
    * </PRE>
    */
   public R visit(PaddingCharacterClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RECORD&gt;
    * f1 -> &lt;DELIMITER&gt;
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> ( &lt;STANDARD_1&gt; | &lt;IMPLICIT&gt; | AssignmentName() )
    * </PRE>
    */
   public R visit(RecordDelimiterClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ACCESS&gt;
    * f1 -> [ &lt;MODE&gt; ]
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> ( SequentialAccessMode() | RandomAccessMode() | DynamicAccessMode() )
    * </PRE>
    */
   public R visit(AccessModeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SEQUENTIAL&gt;
    * f1 -> [ RelativeKeyClause() ]
    * </PRE>
    */
   public R visit(SequentialAccessMode n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RANDOM&gt;
    * f1 -> [ RelativeKeyClause() ]
    * </PRE>
    */
   public R visit(RandomAccessMode n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DYNAMIC&gt;
    * f1 -> [ RelativeKeyClause() ]
    * </PRE>
    */
   public R visit(DynamicAccessMode n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RELATIVE&gt;
    * f1 -> [ &lt;KEY&gt; ]
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> QualifiedDataName()
    * </PRE>
    */
   public R visit(RelativeKeyClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ALTERNATE&gt;
    * f1 -> &lt;RECORD&gt;
    * f2 -> [ &lt;KEY&gt; ]
    * f3 -> [ &lt;IS&gt; ]
    * f4 -> QualifiedDataName()
    * f5 -> [ PasswordClause() ]
    * f6 -> [ [ &lt;WITH&gt; ] &lt;DUPLICATES&gt; ]
    * </PRE>
    */
   public R visit(AlternateRecordKeyClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PASSWORD&gt;
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> DataName()
    * </PRE>
    */
   public R visit(PasswordClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;FILE&gt; ]
    * f1 -> &lt;STATUS&gt;
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> QualifiedDataName()
    * f4 -> [ QualifiedDataName() ]
    * </PRE>
    */
   public R visit(FileStatusClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;I_O_CONTROL&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> [ IOControlClause() ( [ &lt;DOT&gt; ] IOControlClause() )* &lt;DOT&gt; ]
    * </PRE>
    */
   public R visit(IOControlParagraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> RerunClause()
    *       | SameAreaClause()
    *       | MultipleFileClause()
    * </PRE>
    */
   public R visit(IOControlClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RERUN&gt;
    * f1 -> [ &lt;ON&gt; ( AssignmentName() | FileName() ) ]
    * f2 -> &lt;EVERY&gt;
    * f3 -> ( Rerun2() | IntegerConstant() [ &lt;CLOCK_UNITS&gt; ] )
    * </PRE>
    */
   public R visit(RerunClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> IntegerConstant() &lt;RECORDS&gt;
    *       | [ &lt;END&gt; ] [ &lt;OF&gt; ] ( &lt;REEL&gt; | &lt;UNIT&gt; ) &lt;OF&gt; FileName()
    * </PRE>
    */
   public R visit(Rerun2 n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SAME&gt;
    * f1 -> ( &lt;RECORD&gt; | &lt;SORT&gt; | &lt;SORT_MERGE&gt; )
    * f2 -> [ &lt;AREA&gt; ]
    * f3 -> [ &lt;FOR&gt; ]
    * f4 -> ( FileName() )+
    * </PRE>
    */
   public R visit(SameAreaClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;MULTIPLE&gt;
    * f1 -> &lt;FILE&gt;
    * f2 -> [ &lt;TAPE&gt; ]
    * f3 -> [ &lt;CONTAINS&gt; ]
    * f4 -> FileName()
    * f5 -> [ &lt;POSITION&gt; ]
    * f6 -> [ IntegerConstant() ]
    * </PRE>
    */
   public R visit(MultipleFileClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DATA&gt;
    * f1 -> &lt;DIVISION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( DataDivisionSection() )*
    * </PRE>
    */
   public R visit(DataDivision n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> FileSection()
    *       | WorkingStorageSection()
    *       | LinkageSection()
    * </PRE>
    */
   public R visit(DataDivisionSection n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;FILE&gt;
    * f1 -> &lt;SECTION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( FileAndSortDescriptionEntry() ( DataDescriptionEntry() )+ )*
    * </PRE>
    */
   public R visit(FileSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;FD&gt; | &lt;SD&gt; )
    * f1 -> FileName()
    * f2 -> ( [ &lt;DOT&gt; ] FileAndSortDescriptionEntryClause() )*
    * f3 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(FileAndSortDescriptionEntry n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ExternalClause()
    *       | GlobalClause()
    *       | BlockContainsClause()
    *       | RecordContainsClause()
    *       | LabelRecordsClause()
    *       | ValueOfClause()
    *       | DataRecordClause()
    *       | LinageClause()
    *       | CodeSetClause()
    *       | ReportClause()
    *       | RecordingModeClause()
    * </PRE>
    */
   public R visit(FileAndSortDescriptionEntryClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> &lt;EXTERNAL&gt;
    * </PRE>
    */
   public R visit(ExternalClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> &lt;GLOBAL&gt;
    * </PRE>
    */
   public R visit(GlobalClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;BLOCK&gt;
    * f1 -> [ &lt;CONTAINS&gt; ]
    * f2 -> [ IntegerConstant() &lt;TO&gt; ]
    * f3 -> IntegerConstant()
    * f4 -> [ &lt;RECORDS&gt; | &lt;CHARACTERS&gt; ]
    * </PRE>
    */
   public R visit(BlockContainsClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RECORD&gt;
    * f1 -> [ &lt;CONTAINS&gt; ]
    * f2 -> ( [ IntegerConstant() &lt;TO&gt; ] IntegerConstant() [ &lt;CHARACTERS&gt; ] | [ &lt;IS&gt; ] &lt;VARYING&gt; [ &lt;IN&gt; ] [ &lt;SIZE&gt; ] [ [ &lt;FROM&gt; ] IntegerConstant() [ &lt;TO&gt; IntegerConstant() ] &lt;CHARACTERS&gt; ] [ &lt;DEPENDING&gt; [ &lt;ON&gt; ] QualifiedDataName() ] )
    * </PRE>
    */
   public R visit(RecordContainsClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LABEL&gt; ( &lt;RECORD&gt; [ &lt;IS&gt; ] | &lt;RECORDS&gt; [ &lt;ARE&gt; ] ) &lt;OMITTED&gt;
    *       | &lt;STANDARD&gt;
    *       | ( DataName() )+
    * </PRE>
    */
   public R visit(LabelRecordsClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;VALUE&gt;
    * f1 -> &lt;OF&gt;
    * f2 -> ( SystemName() &lt;IS&gt; ( QualifiedDataName() | Literal() ) )+
    * </PRE>
    */
   public R visit(ValueOfClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DATA&gt;
    * f1 -> ( &lt;RECORD&gt; [ &lt;IS&gt; ] | &lt;RECORDS&gt; [ &lt;ARE&gt; ] )
    * f2 -> ( DataName() )+
    * </PRE>
    */
   public R visit(DataRecordClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LINAGE&gt;
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> ( DataName() | IntegerConstant() )
    * f3 -> [ &lt;LINES&gt; ]
    * f4 -> ( [ &lt;WITH&gt; ] &lt;FOOTING&gt; [ &lt;AT&gt; ] ( DataName() | IntegerConstant() ) | [ &lt;LINES&gt; ] [ &lt;AT&gt; ] &lt;TOP&gt; ( DataName() | IntegerConstant() ) | [ &lt;LINES&gt; ] [ &lt;AT&gt; ] &lt;BOTTOM&gt; ( DataName() | IntegerConstant() ) )*
    * </PRE>
    */
   public R visit(LinageClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RECORDING&gt;
    * f1 -> [ &lt;MODE&gt; ]
    * f2 -> [ &lt;IS&gt; ]
    * f3 -> Mode()
    * </PRE>
    */
   public R visit(RecordingModeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CODE_SET&gt;
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> AlphabetName()
    * </PRE>
    */
   public R visit(CodeSetClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;REPORT&gt; [ &lt;IS&gt; ] | &lt;REPORTS&gt; [ &lt;ARE&gt; ] )
    * f1 -> ( QualifiedDataName() )+
    * </PRE>
    */
   public R visit(ReportClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( LevelNumber() ( DataName() | [ &lt;FILLER&gt; ] ) ( DataDescriptionEntryClause() )* &lt;DOT&gt; | &lt;LEVEL_66&gt; DataName() RenamesClause() &lt;DOT&gt; | &lt;LEVEL_77&gt; ( DataName() | [ &lt;FILLER&gt; ] ) ( DataDescriptionEntryClause() )* &lt;DOT&gt; | &lt;LEVEL_88&gt; ConditionName() ConditionValueClause() &lt;DOT&gt; )
    *       | ExecSQLStatement() &lt;DOT&gt;
    * </PRE>
    */
   public R visit(DataDescriptionEntry n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> DataPictureClause()
    *       | DataValueClause()
    *       | DataUsageClause()
    *       | DataRedefinesClause()
    *       | DataExternalClause()
    *       | DataGlobalClause()
    *       | DataSignClause()
    *       | DataOccursClause()
    *       | DataSynchronizedClause()
    *       | DataJustifiedClause()
    *       | DataBlankWhenZeroClause()
    * </PRE>
    */
   public R visit(DataDescriptionEntryClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;REDEFINES&gt;
    * f1 -> DataName()
    * </PRE>
    */
   public R visit(DataRedefinesClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;BLANK&gt;
    * f1 -> [ &lt;WHEN&gt; ]
    * f2 -> ( &lt;ZERO&gt; | &lt;ZEROS&gt; | &lt;ZEROES&gt; )
    * </PRE>
    */
   public R visit(DataBlankWhenZeroClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;JUSTIFIED&gt; | &lt;JUST&gt; )
    * f1 -> [ &lt;RIGHT&gt; ]
    * </PRE>
    */
   public R visit(DataJustifiedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;OCCURS&gt;
    * f1 -> [ IntegerConstant() &lt;TO&gt; ]
    * f2 -> IntegerConstant()
    * f3 -> [ &lt;TIMES&gt; ]
    * f4 -> [ &lt;DEPENDING&gt; [ &lt;ON&gt; ] QualifiedDataName() ]
    * f5 -> ( ( &lt;ASCENDING&gt; | &lt;DESCENDING&gt; ) [ &lt;KEY&gt; ] [ &lt;IS&gt; ] ( QualifiedDataName() )+ )*
    * f6 -> [ &lt;INDEXED&gt; [ &lt;BY&gt; ] ( IndexName() )+ ]
    * </PRE>
    */
   public R visit(DataOccursClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;PICTURE&gt; | &lt;PIC&gt; )
    * f1 -> [ &lt;IS&gt; ]
    * f2 -> PictureString()
    * </PRE>
    */
   public R visit(DataPictureClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( [ &lt;PLUSCHAR&gt; ] [ PictureCurrency() ] ( ( PictureChars() )+ [ &lt;LPARENCHAR&gt; IntegerConstant() &lt;RPARENCHAR&gt; ] )+ ( PicturePunctuation() ( ( PictureChars() )+ [ &lt;LPARENCHAR&gt; IntegerConstant() &lt;RPARENCHAR&gt; ] )+ )* [ &lt;COMMACHAR&gt; ( ( PictureChars() )+ [ &lt;LPARENCHAR&gt; IntegerConstant() &lt;RPARENCHAR&gt; ] )+ ] [ &lt;MINUSCHAR&gt; ] )
    *       | ( ( &lt;MINUSCHAR&gt; )+ ( ( PictureChars() )+ [ &lt;LPARENCHAR&gt; IntegerConstant() &lt;RPARENCHAR&gt; ] )+ )
    * </PRE>
    */
   public R visit(PictureString n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SLASHCHAR&gt;
    *       | &lt;DOTCHAR&gt;
    *       | &lt;COLONCHAR&gt;
    * </PRE>
    */
   public R visit(PicturePunctuation n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DOLLARCHAR&gt;
    * </PRE>
    */
   public R visit(PictureCurrency n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER&gt;
    *       | &lt;COBOL_WORD&gt;
    * </PRE>
    */
   public R visit(PictureChars n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> &lt;EXTERNAL&gt;
    * </PRE>
    */
   public R visit(DataExternalClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;IS&gt; ]
    * f1 -> &lt;GLOBAL&gt;
    * </PRE>
    */
   public R visit(DataGlobalClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;USAGE&gt; [ &lt;IS&gt; ] ]
    * f1 -> ( &lt;BINARY&gt; | &lt;COMP&gt; | &lt;COMP_1&gt; | &lt;COMP_2&gt; | &lt;COMP_3&gt; | &lt;COMP_4&gt; | &lt;COMPUTATIONAL&gt; | &lt;COMPUTATIONAL_1&gt; | &lt;COMPUTATIONAL_2&gt; | &lt;COMPUTATIONAL_3&gt; | &lt;COMPUTATIONAL_4&gt; | &lt;DISPLAY&gt; | &lt;DISPLAY_1&gt; | &lt;INDEX&gt; | &lt;PACKED_DECIMAL&gt; | &lt;POINTER&gt; )
    * </PRE>
    */
   public R visit(DataUsageClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;SIGN&gt; [ &lt;IS&gt; ] ]
    * f1 -> ( &lt;LEADING&gt; | &lt;TRAILING&gt; )
    * f2 -> [ &lt;SEPARATE&gt; [ &lt;CHARACTER&gt; ] ]
    * </PRE>
    */
   public R visit(DataSignClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;SYNCHRONIZED&gt; | &lt;SYNC&gt; )
    * f1 -> [ ( &lt;LEFT&gt; | &lt;RIGHT&gt; ) ]
    * </PRE>
    */
   public R visit(DataSynchronizedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;VALUE&gt; [ &lt;IS&gt; ] | &lt;VALUES&gt; [ &lt;ARE&gt; ] )
    * f1 -> ( Literal() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) Literal() ] [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(DataValueClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> DataValueClause()
    * </PRE>
    */
   public R visit(ConditionValueClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RENAMES&gt;
    * f1 -> QualifiedDataName()
    * f2 -> [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) QualifiedDataName() ]
    * </PRE>
    */
   public R visit(RenamesClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;WORKING_STORAGE&gt;
    * f1 -> &lt;SECTION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( DataDescriptionEntry() )*
    * </PRE>
    */
   public R visit(WorkingStorageSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LINKAGE&gt;
    * f1 -> &lt;SECTION&gt;
    * f2 -> &lt;DOT&gt;
    * f3 -> ( DataDescriptionEntry() )*
    * </PRE>
    */
   public R visit(LinkageSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PROCEDURE&gt;
    * f1 -> &lt;DIVISION&gt;
    * f2 -> [ &lt;USING&gt; ( DataName() [ &lt;COMMACHAR&gt; ] )+ ]
    * f3 -> &lt;DOT&gt;
    * f4 -> [ Declaratives() ]
    * f5 -> ProcedureBody()
    * </PRE>
    */
   public R visit(ProcedureDivision n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DECLARATIVES&gt;
    * f1 -> &lt;DOT&gt;
    * f2 -> ( SectionHeader() &lt;DOT&gt; UseStatement() &lt;DOT&gt; Paragraphs() )+
    * f3 -> &lt;END&gt;
    * f4 -> &lt;DECLARATIVES&gt;
    * f5 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(Declaratives n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( Paragraphs() | ProcedureSection() )+
    * </PRE>
    */
   public R visit(ProcedureBody n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SectionHeader()
    * f1 -> &lt;DOT&gt;
    * f2 -> [ Paragraphs() ]
    * f3 -> [ &lt;DOT&gt; ]
    * </PRE>
    */
   public R visit(ProcedureSection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SectionName()
    * f1 -> &lt;SECTION&gt;
    * f2 -> [ IntegerConstant() ]
    * </PRE>
    */
   public R visit(SectionHeader n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( Sentence() )+
    *       | ( Paragraph() )+
    * </PRE>
    */
   public R visit(Paragraphs n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ParagraphName()
    * f1 -> &lt;DOT&gt;
    * f2 -> ( ExitStatement() &lt;DOT&gt; | AlteredGoto() | ( Sentence() )* )
    * </PRE>
    */
   public R visit(Paragraph n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> StatementList()
    * f1 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(Sentence n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( Statement() )+
    * </PRE>
    */
   public R visit(StatementList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( AcceptStatement() | AddStatement() | AlterStatement() | CallStatement() | CancelStatement() | CloseStatement() | ComputeStatement() | ContinueStatement() | DeleteStatement() | DisplayStatement() | DivideStatement() | EntryStatement() | EvaluateStatement() | ExitProgramStatement() | ExitStatement() | GobackStatement() | GotoStatement() | IfStatement() | InitializeStatement() | InspectStatement() | MergeStatement() | MoveStatement() | MultiplyStatement() | OpenStatement() | PerformStatement() | ReadStatement() | ReleaseStatement() | ReturnStatement() | RewriteStatement() | SearchStatement() | SetStatement() | SortStatement() | StartStatement() | StopStatement() | StringStatement() | SubtractStatement() | UnstringStatement() | WriteStatement() | ExecCICSStatement() | ExecSQLStatement() )
    * </PRE>
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ACCEPT&gt;
    * f1 -> Identifier()
    * f2 -> [ &lt;FROM&gt; ( MnemonicName() | EnvironmentName() | &lt;DATE&gt; | &lt;DAY&gt; | &lt;DAY_OF_WEEK&gt; | &lt;TIME&gt; ) ]
    * </PRE>
    */
   public R visit(AcceptStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ADD&gt;
    * f1 -> ( ( ( &lt;CORRESPONDING&gt; | &lt;CORR&gt; ) Identifier() &lt;TO&gt; Identifier() [ &lt;GIVING&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ ] ) | ( Identifier() | Literal() )+ ( [ &lt;TO&gt; ( Identifier() | Literal() ) ] &lt;GIVING&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ | &lt;TO&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ ) )
    * f2 -> [ [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f3 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f4 -> [ &lt;END_ADD&gt; ]
    * </PRE>
    */
   public R visit(AddStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;GO&gt;
    * f1 -> [ &lt;TO&gt; ]
    * f2 -> &lt;DOT&gt;
    * </PRE>
    */
   public R visit(AlteredGoto n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ALTER&gt;
    * f1 -> ( ProcedureName() &lt;TO&gt; [ &lt;PROCEED&gt; &lt;TO&gt; ] ProcedureName() )+
    * </PRE>
    */
   public R visit(AlterStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CALL&gt;
    * f1 -> ( Identifier() | Literal() )
    * f2 -> [ &lt;USING&gt; ( ( [ [ &lt;BY&gt; ] &lt;REFERENCE&gt; ] ( ( Identifier() | &lt;ADDRESS&gt; &lt;OF&gt; Identifier() | FileName() ) [ &lt;COMMACHAR&gt; ] )+ | [ &lt;BY&gt; ] &lt;CONTENT&gt; ( ( [ &lt;LENGTH&gt; &lt;OF&gt; ] Identifier() | &lt;ADDRESS&gt; &lt;OF&gt; Identifier() | Literal() ) [ &lt;COMMACHAR&gt; ] )+ ) )+ ]
    * f3 -> [ [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
    * f4 -> [ [ &lt;ON&gt; ] &lt;EXCEPTION&gt; StatementList() ]
    * f5 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;EXCEPTION&gt; StatementList() ]
    * f6 -> [ &lt;END_CALL&gt; ]
    * </PRE>
    */
   public R visit(CallStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CANCEL&gt;
    * f1 -> ( Identifier() | Literal() )+
    * </PRE>
    */
   public R visit(CancelStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CLOSE&gt;
    * f1 -> ( FileName() [ ( ( &lt;REEL&gt; | &lt;UNIT&gt; ) [ ( [ &lt;FOR&gt; ] &lt;REMOVAL&gt; | [ &lt;WITH&gt; ] &lt;NO&gt; &lt;REWIND&gt; ) ] | [ &lt;WITH&gt; ] ( &lt;NO&gt; &lt;REWIND&gt; | &lt;LOCK&gt; ) ) ] )+
    * </PRE>
    */
   public R visit(CloseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;COMPUTE&gt;
    * f1 -> ( Identifier() [ &lt;ROUNDED&gt; ] )+
    * f2 -> ( &lt;EQUALCHAR&gt; | &lt;EQUAL&gt; )
    * f3 -> ArithmeticExpression()
    * f4 -> [ [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f5 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f6 -> [ &lt;END_COMPUTE&gt; ]
    * </PRE>
    */
   public R visit(ComputeStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CONTINUE&gt;
    * </PRE>
    */
   public R visit(ContinueStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DELETE&gt;
    * f1 -> FileName()
    * f2 -> [ &lt;RECORD&gt; ]
    * f3 -> [ &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f4 -> [ &lt;NOT&gt; &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f5 -> [ &lt;END_DELETE&gt; ]
    * </PRE>
    */
   public R visit(DeleteStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;D&gt; ]
    * f1 -> &lt;DISPLAY&gt;
    * f2 -> ( [ &lt;COMMACHAR&gt; ] ( Identifier() | Literal() ) )+
    * f3 -> [ &lt;UPON&gt; ( MnemonicName() | EnvironmentName() ) ]
    * f4 -> [ [ &lt;WITH&gt; ] &lt;NO&gt; &lt;ADVANCING&gt; ]
    * f5 -> [ &lt;READ&gt; Identifier() ]
    * </PRE>
    */
   public R visit(DisplayStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DIVIDE&gt;
    * f1 -> ( QualifiedDataName() | Literal() )
    * f2 -> ( &lt;INTO&gt; Literal() [ &lt;GIVING&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ ] | &lt;INTO&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ | &lt;BY&gt; ( Identifier() | Literal() ) [ &lt;GIVING&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ ] )
    * f3 -> [ &lt;REMAINDER&gt; Identifier() ]
    * f4 -> [ [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f5 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f6 -> [ &lt;END_DIVIDE&gt; ]
    * </PRE>
    */
   public R visit(DivideStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ENTRY&gt;
    * f1 -> Literal()
    * f2 -> [ &lt;USING&gt; ( Identifier() )+ ]
    * </PRE>
    */
   public R visit(EntryStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;EVALUATE&gt;
    * f1 -> EvaluateValue()
    * f2 -> ( &lt;ALSO&gt; EvaluateValue() )*
    * f3 -> ( ( &lt;WHEN&gt; EvaluatePhrase() ( &lt;ALSO&gt; EvaluatePhrase() )* )+ StatementList() )+
    * f4 -> [ &lt;WHEN&gt; &lt;OTHER&gt; StatementList() ]
    * f5 -> [ &lt;END_EVALUATE&gt; ]
    * </PRE>
    */
   public R visit(EvaluateStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> (  Condition() | Identifier() | ArithmeticExpression() | Literal() | &lt;TRUE&gt; | &lt;FALSE&gt; )
    * </PRE>
    */
   public R visit(EvaluateValue n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;ANY&gt; |  Condition() | ( [ &lt;NOT&gt; ] ( Identifier() | Literal() | ArithmeticExpression() ) [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ( Identifier() | Literal() | ArithmeticExpression() ) ] ) | &lt;TRUE&gt; | &lt;FALSE&gt; )
    * </PRE>
    */
   public R visit(EvaluatePhrase n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;EXIT&gt;
    * </PRE>
    */
   public R visit(ExitStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;EXIT&gt;
    * f1 -> &lt;PROGRAM&gt;
    * </PRE>
    */
   public R visit(ExitProgramStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;GOBACK&gt;
    * </PRE>
    */
   public R visit(GobackStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;GO&gt;
    * f1 -> [ &lt;TO&gt; ]
    * f2 -> ( ProcedureName() [ &lt;DEPENDING&gt; [ &lt;ON&gt; ] QualifiedDataName() ] | &lt;MORE_LABELS&gt; )
    * </PRE>
    */
   public R visit(GotoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;IF&gt;
    * f1 -> Condition()
    * f2 -> [ &lt;THEN&gt; ]
    * f3 -> ( ( Statement() )+ | &lt;NEXT&gt; &lt;SENTENCE&gt; )
    * f4 -> [ &lt;ELSE&gt; ( ( Statement() )+ | &lt;NEXT&gt; &lt;SENTENCE&gt; ) ]
    * f5 -> [ &lt;END_IF&gt; ]
    * </PRE>
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INITIALIZE&gt;
    * f1 -> ( Identifier() ( &lt;COMMACHAR&gt; )* )+
    * f2 -> [ &lt;REPLACING&gt; ( ( &lt;ALPHABETIC&gt; | &lt;ALPHANUMERIC&gt; | &lt;NUMERIC&gt; | &lt;ALPHANUMERIC_EDITED&gt; | &lt;NUMERIC_EDITED&gt; | &lt;DBCS&gt; | &lt;EGCS&gt; ) [ &lt;DATA&gt; ] &lt;BY&gt; ( Identifier() | Literal() ) )+ ]
    * </PRE>
    */
   public R visit(InitializeStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INSPECT&gt;
    * f1 -> QualifiedDataName()
    * f2 -> ( TallyingPhrase() | ConvertingPhrase() | ReplacingPhrase() )
    * </PRE>
    */
   public R visit(InspectStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;TALLYING&gt;
    * f1 -> ( Identifier() &lt;FOR&gt; ( &lt;CHARACTERS&gt; ( BeforeAfterPhrase() )* | ( &lt;ALL&gt; | &lt;LEADING&gt; ) ( ( Identifier() | Literal() ) ( BeforeAfterPhrase() )* )+ )+ )+
    * f2 -> [ ReplacingPhrase() ]
    * </PRE>
    */
   public R visit(TallyingPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;CONVERTING&gt;
    * f1 -> ( Identifier() | Literal() )
    * f2 -> &lt;TO&gt;
    * f3 -> ( Identifier() | Literal() )
    * f4 -> ( BeforeAfterPhrase() )*
    * </PRE>
    */
   public R visit(ConvertingPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;REPLACING&gt;
    * f1 -> ( &lt;CHARACTERS&gt; &lt;BY&gt; ( Identifier() | Literal() ) ( BeforeAfterPhrase() )* | ( &lt;ALL&gt; | &lt;LEADING&gt; | &lt;FIRST&gt; ) ( ( Identifier() | Literal() ) &lt;BY&gt; ( Identifier() | Literal() ) ( BeforeAfterPhrase() )* )+ )+
    * </PRE>
    */
   public R visit(ReplacingPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;BEFORE&gt; | &lt;AFTER&gt; )
    * f1 -> [ &lt;INITIAL&gt; ]
    * f2 -> ( Identifier() | Literal() )
    * </PRE>
    */
   public R visit(BeforeAfterPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;MERGE&gt;
    * f1 -> FileName()
    * f2 -> ( [ &lt;ON&gt; ] ( &lt;ASCENDING&gt; | &lt;DESCENDING&gt; ) [ &lt;KEY&gt; ] ( QualifiedDataName() )+ )+
    * f3 -> [ [ &lt;COLLATING&gt; ] &lt;SEQUENCE&gt; [ &lt;IS&gt; ] AlphabetName() ]
    * f4 -> &lt;USING&gt;
    * f5 -> FileName()
    * f6 -> ( FileName() )+
    * f7 -> ( &lt;OUTPUT&gt; &lt;PROCEDURE&gt; [ &lt;IS&gt; ] ProcedureName() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ] | &lt;GIVING&gt; ( FileName() )+ )
    * </PRE>
    */
   public R visit(MergeStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;MOVE&gt;
    * f1 -> ( ( Identifier() | Literal() ) &lt;TO&gt; ( Identifier() [ &lt;COMMACHAR&gt; ] )+ | ( &lt;CORRESPONDING&gt; | &lt;CORR&gt; ) QualifiedDataName() &lt;TO&gt; ( QualifiedDataName() [ &lt;COMMACHAR&gt; ] )+ )
    * </PRE>
    */
   public R visit(MoveStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;MULTIPLY&gt;
    * f1 -> ( Identifier() | Literal() )
    * f2 -> &lt;BY&gt;
    * f3 -> ( Identifier() | Literal() )
    * f4 -> [ &lt;GIVING&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ ]
    * f5 -> [ [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f6 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f7 -> [ &lt;END_MULTIPLY&gt; ]
    * </PRE>
    */
   public R visit(MultiplyStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;OPEN&gt;
    * f1 -> ( &lt;INPUT&gt; ( FileName() [ ( &lt;REVERSED&gt; | [ &lt;WITH&gt; ] &lt;NO&gt; &lt;REWIND&gt; ) ] )+ | &lt;OUTPUT&gt; ( FileName() [ [ &lt;WITH&gt; ] &lt;NO&gt; &lt;REWIND&gt; ] )+ | &lt;I_O&gt; ( FileName() )+ | &lt;EXTEND&gt; ( FileName() )+ )+
    * </PRE>
    */
   public R visit(OpenStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;PERFORM&gt;
    * f1 -> ( PerformProcedureScopeClause() [ PerformFlavour() ] ( PerformAfterClause() )* | PerformFlavour() (  StatementList() &lt;END_PERFORM&gt; | PerformProcedureScopeClause() ) )
    * </PRE>
    */
   public R visit(PerformStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> PerformTimeClause()
    *       | PerformUntilClause()
    *       | PerformUntilWithTestClause()
    *       | PerformVaryingWithTestClause()
    * </PRE>
    */
   public R visit(PerformFlavour n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( PerformTestPositionClause() PerformUntilClause() | PerformUntilClause() PerformTestPositionClause() )
    * </PRE>
    */
   public R visit(PerformUntilWithTestClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( PerformTestPositionClause() PerformVaryingClause() | PerformVaryingClause() [ PerformTestPositionClause() ] )
    * </PRE>
    */
   public R visit(PerformVaryingWithTestClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;AFTER&gt;
    * f1 -> QualifiedDataName()
    * f2 -> &lt;FROM&gt;
    * f3 -> ( Identifier() | Literal() )
    * f4 -> &lt;BY&gt;
    * f5 -> ( Identifier() | Literal() )
    * f6 -> PerformUntilClause()
    * </PRE>
    */
   public R visit(PerformAfterClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;VARYING&gt;
    * f1 -> QualifiedDataName()
    * f2 -> &lt;FROM&gt;
    * f3 -> ( Identifier() | Literal() )
    * f4 -> &lt;BY&gt;
    * f5 -> ( Identifier() | Literal() )
    * f6 -> PerformUntilClause()
    * </PRE>
    */
   public R visit(PerformVaryingClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;UNTIL&gt;
    * f1 -> Condition()
    * </PRE>
    */
   public R visit(PerformUntilClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;WITH&gt; ]
    * f1 -> &lt;TEST&gt;
    * f2 -> ( &lt;BEFORE&gt; | &lt;AFTER&gt; )
    * </PRE>
    */
   public R visit(PerformTestPositionClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ProcedureName()
    * f1 -> [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ]
    * </PRE>
    */
   public R visit(PerformProcedureScopeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( QualifiedDataName() | IntegerConstant() )
    * f1 -> &lt;TIMES&gt;
    * </PRE>
    */
   public R visit(PerformTimeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;READ&gt;
    * f1 -> FileName()
    * f2 -> [ &lt;NEXT&gt; ]
    * f3 -> [ &lt;RECORD&gt; ]
    * f4 -> [ &lt;INTO&gt; QualifiedDataName() ]
    * f5 -> [ &lt;KEY&gt; [ &lt;IS&gt; ] QualifiedDataName() ]
    * f6 -> [ &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f7 -> [ &lt;NOT&gt; &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f8 -> [ [ &lt;AT&gt; ] &lt;END&gt; StatementList() ]
    * f9 -> [ &lt;NOT&gt; [ &lt;AT&gt; ] &lt;END&gt; StatementList() ]
    * f10 -> [ &lt;END_READ&gt; ]
    * </PRE>
    */
   public R visit(ReadStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RELEASE&gt;
    * f1 -> RecordName()
    * f2 -> [ &lt;FROM&gt; QualifiedDataName() ]
    * </PRE>
    */
   public R visit(ReleaseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;RETURN&gt;
    * f1 -> FileName()
    * f2 -> [ &lt;RECORD&gt; ]
    * f3 -> [ &lt;INTO&gt; QualifiedDataName() ]
    * f4 -> [ &lt;AT&gt; ]
    * f5 -> &lt;END&gt;
    * f6 -> StatementList()
    * f7 -> [ &lt;NOT&gt; [ &lt;AT&gt; ] &lt;END&gt; StatementList() ]
    * f8 -> [ &lt;END_RETURN&gt; ]
    * </PRE>
    */
   public R visit(ReturnStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;REWRITE&gt;
    * f1 -> RecordName()
    * f2 -> [ &lt;FROM&gt; QualifiedDataName() ]
    * f3 -> [ &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f4 -> [ &lt;NOT&gt; &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f5 -> [ &lt;END_REWRITE&gt; ]
    * </PRE>
    */
   public R visit(RewriteStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SEARCH&gt;
    * f1 -> [ &lt;ALL&gt; ]
    * f2 -> QualifiedDataName()
    * f3 -> [ &lt;VARYING&gt; QualifiedDataName() ]
    * f4 -> [ [ &lt;AT&gt; ] &lt;END&gt; StatementList() ]
    * f5 -> ( SearchPhrase() )+
    * f6 -> [ &lt;END_SEARCH&gt; ]
    * </PRE>
    */
   public R visit(SearchStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;WHEN&gt;
    * f1 -> Condition()
    * f2 -> ( StatementList() | &lt;NEXT&gt; &lt;SENTENCE&gt; )
    * </PRE>
    */
   public R visit(SearchPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SET&gt;
    * f1 -> ( Identifier() [ &lt;COMMACHAR&gt; ] )+
    * f2 -> ( &lt;TO&gt; ( Identifier() | &lt;TRUE&gt; | &lt;FALSE&gt; | &lt;ON&gt; | &lt;OFF&gt; | Literal() ) | ( &lt;UP&gt; | &lt;DOWN&gt; ) [ &lt;BY&gt; ] ( Identifier() | Literal() ) )
    * </PRE>
    */
   public R visit(SetStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SORT&gt;
    * f1 -> FileName()
    * f2 -> ( [ &lt;ON&gt; ] ( &lt;ASCENDING&gt; | &lt;DESCENDING&gt; ) [ &lt;KEY&gt; ] ( QualifiedDataName() )+ )+
    * f3 -> [ [ &lt;WITH&gt; ] &lt;DUPLICATES&gt; [ &lt;IN&gt; ] [ &lt;ORDER&gt; ] ]
    * f4 -> [ [ &lt;COLLATING&gt; ] &lt;SEQUENCE&gt; [ &lt;IS&gt; ] AlphabetName() ]
    * f5 -> ( &lt;USING&gt; ( FileName() )+ | &lt;INPUT&gt; &lt;PROCEDURE&gt; [ &lt;IS&gt; ] ProcedureName() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ] )
    * f6 -> ( &lt;GIVING&gt; ( FileName() )+ | &lt;OUTPUT&gt; &lt;PROCEDURE&gt; [ &lt;IS&gt; ] ProcedureName() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ] )
    * </PRE>
    */
   public R visit(SortStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;START&gt;
    * f1 -> FileName()
    * f2 -> [ &lt;KEY&gt; [ &lt;IS&gt; ] ( &lt;EQUAL&gt; [ &lt;TO&gt; ] | &lt;EQUALCHAR&gt; | &lt;GREATER&gt; [ &lt;THAN&gt; ] | &lt;MORETHANCHAR&gt; | &lt;NOT&gt; &lt;LESS&gt; [ &lt;THAN&gt; ] | &lt;NOT&gt; &lt;LESSTHANCHAR&gt; | &lt;GREATER&gt; [ &lt;THAN&gt; ] &lt;OR&gt; &lt;EQUAL&gt; [ &lt;TO&gt; ] | &lt;MORETHANOREQUAL&gt; ) QualifiedDataName() ]
    * f3 -> [ &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f4 -> [ &lt;NOT&gt; &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f5 -> [ &lt;END_START&gt; ]
    * </PRE>
    */
   public R visit(StartStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;STOP&gt;
    * f1 -> ( &lt;RUN&gt; | Literal() )
    * </PRE>
    */
   public R visit(StopStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;STRING&gt;
    * f1 -> ( ( ( Identifier() | QualifiedDataName() | Literal() ) [ &lt;COMMACHAR&gt; ] )+ &lt;DELIMITED&gt; [ &lt;BY&gt; ] ( Identifier() | Literal() | &lt;SIZE&gt; ) )+
    * f2 -> &lt;INTO&gt;
    * f3 -> Identifier()
    * f4 -> [ [ &lt;WITH&gt; ] &lt;POINTER&gt; QualifiedDataName() ]
    * f5 -> [ [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
    * f6 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
    * f7 -> [ &lt;END_STRING&gt; ]
    * </PRE>
    */
   public R visit(StringStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SUBTRACT&gt;
    * f1 -> ( ( Identifier() | Literal() ) &lt;FROM&gt; Identifier() [ &lt;ROUNDED&gt; ] &lt;GIVING&gt; Identifier() | ( Identifier() | Literal() )+ &lt;FROM&gt; ( Identifier() [ &lt;ROUNDED&gt; ] )+ | ( &lt;CORRESPONDING&gt; | &lt;CORR&gt; ) QualifiedDataName() &lt;FROM&gt; QualifiedDataName() )
    * f2 -> [ [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f3 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;SIZE&gt; &lt;ERROR&gt; StatementList() ]
    * f4 -> [ &lt;END_SUBTRACT&gt; ]
    * </PRE>
    */
   public R visit(SubtractStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;UNSTRING&gt;
    * f1 -> QualifiedDataName()
    * f2 -> [ &lt;DELIMITED&gt; [ &lt;BY&gt; ] [ &lt;ALL&gt; ] ( Identifier() | Literal() ) ( &lt;OR&gt; [ &lt;ALL&gt; ] ( Identifier() | Literal() ) )* ]
    * f3 -> &lt;INTO&gt;
    * f4 -> ( Identifier() [ &lt;DELIMITER&gt; [ &lt;IN&gt; ] Identifier() ] [ &lt;COUNT&gt; [ &lt;IN&gt; ] Identifier() ] )+
    * f5 -> [ [ &lt;WITH&gt; ] &lt;POINTER&gt; QualifiedDataName() ]
    * f6 -> [ &lt;TALLYING&gt; [ &lt;IN&gt; ] QualifiedDataName() ]
    * f7 -> [ [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
    * f8 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
    * f9 -> [ &lt;END_UNSTRING&gt; ]
    * </PRE>
    */
   public R visit(UnstringStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;USE&gt;
    * f1 -> ( [ &lt;FOR&gt; ] &lt;DEBUGGING&gt; [ &lt;ON&gt; ] ( ( ProcedureName() )+ | &lt;ALL&gt; &lt;PROCEDURES&gt; ) | [ &lt;GLOBAL&gt; ] &lt;AFTER&gt; [ &lt;STANDARD&gt; ] ( ( &lt;EXCEPTION&gt; | &lt;ERROR&gt; ) | [ ( &lt;BEGINNING&gt; | &lt;ENDING&gt; ) ] [ ( &lt;FILE&gt; | &lt;REEL&gt; | &lt;UNIT&gt; ) ] &lt;LABEL&gt; ) &lt;PROCEDURE&gt; [ &lt;ON&gt; ] ( ( FileName() )+ | &lt;INPUT&gt; | &lt;OUTPUT&gt; | &lt;I_O&gt; | &lt;EXTEND&gt; ) )
    * </PRE>
    */
   public R visit(UseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;WRITE&gt;
    * f1 -> RecordName()
    * f2 -> [ &lt;FROM&gt; QualifiedDataName() ]
    * f3 -> [ AdvancingPhrase() ]
    * f4 -> [ [ &lt;AT&gt; ] ( &lt;END_OF_PAGE&gt; | &lt;EOP&gt; ) StatementList() ]
    * f5 -> [ &lt;NOT&gt; [ &lt;AT&gt; ] ( &lt;END_OF_PAGE&gt; | &lt;EOP&gt; ) StatementList() ]
    * f6 -> [ &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f7 -> [ &lt;NOT&gt; &lt;INVALID&gt; [ &lt;KEY&gt; ] StatementList() ]
    * f8 -> [ &lt;END_WRITE&gt; ]
    * </PRE>
    */
   public R visit(WriteStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;BEFORE&gt; | &lt;AFTER&gt; )
    * f1 -> [ &lt;ADVANCING&gt; ]
    * f2 -> ( &lt;PAGE&gt; | ( Identifier() | IntegerConstant() ) [ ( &lt;LINE&gt; | &lt;LINES&gt; ) ] | MnemonicName() )
    * </PRE>
    */
   public R visit(AdvancingPhrase n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;EXEC&gt;
    * f1 -> &lt;CICS&gt;
    * f2 -> ( &lt;RETURN&gt; | &lt;HANDLE&gt; &lt;ABEND&gt; &lt;LABEL&gt; "(" Identifier() ")" | &lt;ASSIGN&gt; ( &lt;ABCODE&gt; | &lt;APPLID&gt; ) "(" Identifier() ")" | &lt;LINK&gt; &lt;PROGRAM&gt; "(" Literal() ")" | &lt;SYNCPOINT&gt; | &lt;COMMAREA&gt; "(" Identifier() ")" | &lt;LENGTH&gt; "(" ( Literal() | CobolWord() ) ")" | &lt;ASKTIME&gt; | &lt;ABEND&gt; &lt;ABCODE&gt; "(" ( Literal() | CobolWord() ) ")" | &lt;START&gt; &lt;TRANSID&gt; "(" ( Literal() | CobolWord() ) ")" &lt;REQID&gt; "(" ( Literal() | CobolWord() ) ")" &lt;FROM&gt; "(" ( Literal() | CobolWord() ) ")" &lt;LENGTH&gt; "(" ( Literal() | CobolWord() ) ")" )*
    * f3 -> &lt;END_EXEC&gt;
    * </PRE>
    */
   public R visit(ExecCICSStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;EXEC&gt;
    * f1 -> &lt;SQL&gt;
    * f2 -> ( ExecSQLStatementDeclare() | ExecSQLStatementUpdate() | ExecSQLStatementInsert() | ExecSQLStatementInclude() | ExecSQLStatementSelect() | ExecSQLStatementDelete() | ExecSQLStatementSet() | ExecSQLStatementLock() | ExecSQLStatementBegin() | ExecSQLStatementEnd() | ExecSQLStatementCommit() | ExecSQLStatementWhenever() | ( &lt;CLOSE&gt; SQLIdentifier() ) | ( &lt;OPEN&gt; SQLIdentifier() ) | ( &lt;FETCH&gt; CobolWord() &lt;INTO&gt; ( SQLParameter() [ &lt;COMMACHAR&gt; ] )+ ) | ( &lt;WHENEVER&gt; ( &lt;SQLERROR&gt; | &lt;SQLWARNING&gt; | ( &lt;NOT&gt; &lt;FOUND&gt; ) ) &lt;CONTINUE&gt; ) )
    * f3 -> &lt;END_EXEC&gt;
    * </PRE>
    */
   public R visit(ExecSQLStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;UPDATE&gt;
    * f1 -> SQLIdentifier()
    * f2 -> &lt;SET&gt;
    * f3 -> ( SQLIdentifier() &lt;EQUALCHAR&gt; ( SQLIdentifier() [ &lt;COLONCHAR&gt; CobolWord() ] ) [ &lt;COMMACHAR&gt; ] )+
    * f4 -> [ SQLSelectWhere() ]
    * </PRE>
    */
   public R visit(ExecSQLStatementUpdate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INSERT&gt;
    * f1 -> &lt;INTO&gt;
    * f2 -> CobolWord()
    * f3 -> ( &lt;LPARENCHAR&gt; ( SQLIdentifier() [ &lt;COMMACHAR&gt; ] )+ &lt;RPARENCHAR&gt; )
    * f4 -> &lt;VALUES&gt;
    * f5 -> ( &lt;LPARENCHAR&gt; ( SQLIdentifier() [ &lt;COMMACHAR&gt; ] )+ &lt;RPARENCHAR&gt; )
    * </PRE>
    */
   public R visit(ExecSQLStatementInsert n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DELETE&gt;
    * f1 -> &lt;FROM&gt;
    * f2 -> SQLIdentifier()
    * f3 -> [ SQLIdentifier() ]
    * f4 -> [ SQLSelectWhere() ]
    * </PRE>
    */
   public R visit(ExecSQLStatementDelete n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INCLUDE&gt;
    * f1 -> SQLIdentifier()
    * f2 -> [ &lt;END_EXEC&gt; ( SQLSelectFrom() | SQLSelectWhere() ) ]
    * f3 -> [ SQLSelectInnerJoin() ]
    * f4 -> [ SQLSelectWhere() ]
    * f5 -> [ SQLSelectGroupBy() ]
    * f6 -> [ SQLSelectHaving() ]
    * f7 -> [ SQLSelectOrderBy() ]
    * f8 -> [ SQLSelectForUpdate() ]
    * f9 -> [ &lt;FOR&gt; &lt;FETCH&gt; &lt;ONLY&gt; ]
    * f10 -> [ &lt;WITH&gt; SQLIdentifier() ]
    * </PRE>
    */
   public R visit(ExecSQLStatementInclude n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;DECLARE&gt;
    * f1 -> Identifier()
    * f2 -> ( ( &lt;CURSOR&gt; [ &lt;WITH&gt; ] [ &lt;HOLD&gt; ] [ &lt;FOR&gt; ] ExecSQLStatementSelect() ) | ( &lt;TABLE&gt; &lt;LPARENCHAR&gt; ( CobolWord() ( Identifier() | &lt;CHAR&gt; &lt;LPARENCHAR&gt; IntegerConstant() &lt;RPARENCHAR&gt; | &lt;DATE&gt; ) [ &lt;NOT&gt; &lt;NULL&gt; ] [ &lt;COMMACHAR&gt; ] )+ &lt;RPARENCHAR&gt; ) )
    * </PRE>
    */
   public R visit(ExecSQLStatementDeclare n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SQLSelectSimple()
    * f1 -> ( &lt;UNION&gt; [ &lt;ALL&gt; ] SQLSelectSimple() )*
    * </PRE>
    */
   public R visit(ExecSQLStatementSelect n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SET&gt;
    * f1 -> [ &lt;ATCHAR&gt; | &lt;COLONCHAR&gt; ]
    * f2 -> CobolWord()
    * f3 -> &lt;EQUALCHAR&gt;
    * f4 -> ( CobolWord() | &lt;CURRENT&gt; &lt;TIMESTAMP&gt; )
    * </PRE>
    */
   public R visit(ExecSQLStatementSet n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LOCK&gt;
    * f1 -> &lt;TABLE&gt;
    * f2 -> CobolWord()
    * f3 -> &lt;IN&gt;
    * f4 -> &lt;EXCLUSIVE&gt;
    * f5 -> &lt;MODE&gt;
    * </PRE>
    */
   public R visit(ExecSQLStatementLock n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;BEGIN&gt;
    * f1 -> &lt;DECLARE&gt;
    * f2 -> &lt;SECTION&gt;
    * </PRE>
    */
   public R visit(ExecSQLStatementBegin n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;END&gt;
    * f1 -> &lt;DECLARE&gt;
    * f2 -> &lt;SECTION&gt;
    * </PRE>
    */
   public R visit(ExecSQLStatementEnd n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;COMMIT&gt;
    * f1 -> &lt;WORK&gt;
    * </PRE>
    */
   public R visit(ExecSQLStatementCommit n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;WHENEVER&gt;
    * f1 -> ( &lt;NOT&gt; &lt;FOUND&gt; &lt;CONTINUE&gt; | ( &lt;SQLWARNING&gt; | &lt;SQLERROR&gt; ) &lt;GO&gt; &lt;TO&gt; CobolWord() )
    * </PRE>
    */
   public R visit(ExecSQLStatementWhenever n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Literal()
    * </PRE>
    */
   public R visit(SQLLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SELECT&gt;
    * f1 -> ( ( [ &lt;DISTINCT&gt; ] ( SQLIdentifier() [ &lt;COMMACHAR&gt; ] )+ [ &lt;INTO&gt; ( SQLParameter() [ &lt;COMMACHAR&gt; ] )+ ] ) | &lt;ASTERISKCHAR&gt; )
    * f2 -> SQLSelectFrom()
    * f3 -> [ SQLSelectInnerJoin() ]
    * f4 -> [ SQLSelectWhere() ]
    * f5 -> [ SQLSelectGroupBy() ]
    * f6 -> [ SQLSelectHaving() ]
    * f7 -> [ SQLSelectOrderBy() ]
    * f8 -> [ SQLSelectForUpdate() ]
    * f9 -> [ &lt;FOR&gt; &lt;FETCH&gt; &lt;ONLY&gt; ]
    * f10 -> [ &lt;WITH&gt; SQLIdentifier() ]
    * </PRE>
    */
   public R visit(SQLSelectSimple n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ( ( Literal() | &lt;COLONCHAR&gt; Identifier() ) ( &lt;YEARS&gt; | &lt;MONTHS&gt; | &lt;DAYS&gt; ) ) | SQLSimpleIdentifier() )
    * f1 -> [ ( &lt;PLUSCHAR&gt; | &lt;MINUSCHAR&gt; | &lt;DOUBLEEXCLAMATIONMARK&gt; ) SQLIdentifier() ]
    * </PRE>
    */
   public R visit(SQLIdentifier n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Identifier() ( &lt;DOTCHAR&gt; Identifier() )*
    *       | SQLParameter()
    *       | SQLLiteral()
    *       | sqlOneParamFunction()
    *       | sqlSubstrFunction()
    *       | ( &lt;CURRENT&gt; ( &lt;DATE&gt; | &lt;TIMESTAMP&gt; ) )
    * </PRE>
    */
   public R visit(SQLSimpleIdentifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;COLONCHAR&gt;
    * f1 -> Identifier()
    * f2 -> ( &lt;DOTCHAR&gt; Identifier() )*
    * </PRE>
    */
   public R visit(SQLParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( &lt;CHAR&gt; | &lt;YEAR&gt; | &lt;MONTH&gt; | &lt;DIGITS&gt; | &lt;DATE&gt; | &lt;MIN&gt; | &lt;MAX&gt; | &lt;SUM&gt; | &lt;COUNT&gt; )
    * f1 -> &lt;LPARENCHAR&gt;
    * f2 -> ( SQLIdentifier() | &lt;ASTERISKCHAR&gt; )
    * f3 -> &lt;RPARENCHAR&gt;
    * </PRE>
    */
   public R visit(sqlOneParamFunction n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;SUBSTR&gt;
    * f1 -> &lt;LPARENCHAR&gt;
    * f2 -> SQLIdentifier()
    * f3 -> &lt;COMMACHAR&gt;
    * f4 -> SQLIdentifier()
    * f5 -> ( &lt;RPARENCHAR&gt; | &lt;COMMACHAR&gt; SQLIdentifier() &lt;RPARENCHAR&gt; )
    * </PRE>
    */
   public R visit(sqlSubstrFunction n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SQLIdentifier()
    * f1 -> [ &lt;NOT&gt; ]
    * f2 -> &lt;IN&gt;
    * f3 -> &lt;LPARENCHAR&gt;
    * f4 -> ( ( SQLLiteral() [ &lt;COMMACHAR&gt; ] )+ | SQLSelectSimple() )
    * f5 -> &lt;RPARENCHAR&gt;
    * </PRE>
    */
   public R visit(sqlSelectIN n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;FROM&gt;
    * f1 -> ( SQLFromIdentifier() [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(SQLSelectFrom n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;WHERE&gt;
    * f1 -> SQLCondition()
    * </PRE>
    */
   public R visit(SQLSelectWhere n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> CombinableSQLCondition()
    * f1 -> ( ( &lt;AND&gt; | &lt;OR&gt; ) CombinableSQLCondition() )*
    * </PRE>
    */
   public R visit(SQLCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> [ &lt;NOT&gt; ]
    * f1 -> SimpleSQLCondition()
    * </PRE>
    */
   public R visit(CombinableSQLCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;LPARENCHAR&gt; SQLCondition() &lt;RPARENCHAR&gt;
    *       | SQLIdentifier() SQLRelationalOperator() SQLIdentifier()
    *       | SQLIdentifier() &lt;BETWEEN&gt; SQLIdentifier() &lt;AND&gt; SQLIdentifier()
    *       | sqlSelectIN()
    *       | &lt;EXISTS&gt; &lt;LPARENCHAR&gt; SQLSelectSimple() &lt;RPARENCHAR&gt;
    *       | &lt;CURRENT&gt; &lt;OF&gt; SQLIdentifier()
    * </PRE>
    */
   public R visit(SimpleSQLCondition n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "="
    *       | "&lt;"
    *       | "&gt;"
    *       | "&lt;="
    *       | "&gt;="
    *       | "&lt;&gt;"
    *       | [ &lt;NOT&gt; ] &lt;LIKE&gt;
    * </PRE>
    */
   public R visit(SQLRelationalOperator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> SQLIdentifier()
    * f1 -> [ &lt;ATCHAR&gt; ]
    * f2 -> [ SQLFromIdentifierAlias() ]
    * </PRE>
    */
   public R visit(SQLFromIdentifier n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Identifier()
    * </PRE>
    */
   public R visit(SQLFromIdentifierAlias n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INNER&gt;
    * f1 -> &lt;JOIN&gt;
    * f2 -> SQLIdentifier()
    * f3 -> [ SQLFromIdentifierAlias() ]
    * f4 -> &lt;ON&gt;
    * f5 -> SQLCondition()
    * </PRE>
    */
   public R visit(SQLSelectInnerJoin n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;GROUP&gt;
    * f1 -> &lt;BY&gt;
    * f2 -> ( SQLIdentifier() [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(SQLSelectGroupBy n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;HAVING&gt;
    * f1 -> SQLCondition()
    * </PRE>
    */
   public R visit(SQLSelectHaving n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;FOR&gt;
    * f1 -> &lt;UPDATE&gt;
    * f2 -> &lt;OF&gt;
    * f3 -> ( SQLIdentifier() [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(SQLSelectForUpdate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;ORDER&gt;
    * f1 -> &lt;BY&gt;
    * f2 -> ( SQLIdentifier() [ &lt;ASC&gt; | &lt;DESC&gt; ] [ &lt;COMMACHAR&gt; ] )+
    * </PRE>
    */
   public R visit(SQLSelectOrderBy n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}
