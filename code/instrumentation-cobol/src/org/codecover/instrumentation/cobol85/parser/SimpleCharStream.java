/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.0 */
package org.codecover.instrumentation.cobol85.parser;

import org.codecover.instrumentation.cobol85.compilerDirectives.CompilerDirective;
import org.codecover.instrumentation.cobol85.compilerDirectives.CompilerDirectives;
import org.codecover.instrumentation.cobol85.compilerDirectives.CompilerDirectivesManipulator;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 * 
 * @author Generated By JavaCC: SimpleCharStream.java Version 4.0
 * @author Christoph Müller
 * @version 1.1 modified by Christoph Müller<br>
 *          changed the tab size, implemented position getting
 * @version 1.2 modified by Christoph Müller<br> - the first character read is
 *          a <code>\n</code> to allow reading of comments at the beginning
 *          &rarr; the grammar has problems to reflect a correct production<br> -
 *          the last token read is a <code>\n</code> too; otherwise the source
 *          file has to have a linebreak at the end
 */
@SuppressWarnings("all")
public class SimpleCharStream implements CharStream {
    public static final boolean staticFlag = false;

    int bufsize;

    int available;

    int tokenBegin;

    public int bufpos;

    protected int bufline[];

    protected int bufcolumn[];

    protected int bufposition[];

    protected int column = 0;

    protected int line = 1;

    protected int position = 0;

    protected boolean prevCharIsCR = false;

    protected boolean prevCharIsLF = false;

    protected java.io.Reader inputStream;

    protected char[] buffer;

    protected int maxNextCharInd;

    protected int inBuf;

    protected int tabSize = 1;

    protected void setTabSize(int i) {
        tabSize = i;
    }

    protected int getTabSize(int i) {
        return tabSize;
    }

    boolean EOF_reached;

    private CompilerDirectives compilerDirectives;

    private CompilerDirectivesManipulator compilerDirectivesManipulator;

    protected void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + 2048];
        int newbufline[] = new int[bufsize + 2048];
        int newbufcolumn[] = new int[bufsize + 2048];
        int newbufposition[] = new int[bufsize + 2048];

        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize
                        - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin,
                        bufpos);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize
                        - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin,
                        bufpos);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0,
                        bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize
                        - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;

                // MODIFICATION version 1.1
                System.arraycopy(bufposition, tokenBegin, newbufposition, 0,
                        bufsize - tokenBegin);
                System.arraycopy(bufposition, 0, newbufposition, bufsize
                        - tokenBegin, bufpos);
                bufposition = newbufposition;

                maxNextCharInd = (bufpos += (bufsize - tokenBegin));
            } else {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize
                        - tokenBegin);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize
                        - tokenBegin);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0,
                        bufsize - tokenBegin);
                bufcolumn = newbufcolumn;

                // MODIFICATION version 1.1
                System.arraycopy(bufposition, tokenBegin, newbufposition, 0,
                        bufsize - tokenBegin);
                bufposition = newbufposition;

                maxNextCharInd = (bufpos -= tokenBegin);
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }

        bufsize += 2048;
        available = bufsize;
        tokenBegin = 0;
    }

    protected void FillBuff() throws java.io.IOException {
        if (maxNextCharInd == available) {
            if (available == bufsize) {
                if (tokenBegin > 2048) {
                    bufpos = maxNextCharInd = 0;
                    available = tokenBegin;
                } else if (tokenBegin < 0)
                    bufpos = maxNextCharInd = 0;
                else
                    ExpandBuff(false);
            } else if (available > tokenBegin)
                available = bufsize;
            else if ((tokenBegin - available) < 2048)
                ExpandBuff(true);
            else
                available = tokenBegin;
        }

        int i;
        try {
            if ((i = inputStream.read(buffer, maxNextCharInd, available
                    - maxNextCharInd)) == -1) {
                inputStream.close();
                throw new java.io.IOException();
            } else
                maxNextCharInd += i;
            return;
        } catch (java.io.IOException e) {
            // MODIFICATION version 1.2
            if (!EOF_reached) {
                EOF_reached = true;
                buffer[maxNextCharInd] = '\n';
                maxNextCharInd++;
                return;
            }
            --bufpos;
            backup(0);
            if (tokenBegin == -1)
                tokenBegin = bufpos;
            throw e;
        }
    }

    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;

        return c;
    }

    protected void UpdateLineColumn(char c) {
        column++;
        // MODIFICATION version 1.1
        position++;

        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }

        switch (c) {
        case '\r':
            prevCharIsCR = true;
            break;
        case '\n':
            prevCharIsLF = true;
            break;
        case '\t':
            column--;
            column += (tabSize - (column % tabSize));
            break;
        default:
            break;
        }

        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
        bufposition[bufpos] = position;
    }

    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;

            if (++bufpos == bufsize)
                bufpos = 0;

            return buffer[bufpos];
        }

        if (++bufpos >= maxNextCharInd)
            FillBuff();

        char c = buffer[bufpos];

        UpdateLineColumn(c);

        buffer[bufpos] = this.compilerDirectivesManipulator.manipulate(column,
                position, c, compilerDirectives);

        return (c);
    }

    /**
     * @deprecated
     * @see #getEndColumn
     */

    public int getColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * @deprecated
     * @see #getEndLine
     */

    public int getLine() {
        return bufline[bufpos];
    }

    public int getEndColumn() {
        return bufcolumn[bufpos];
    }

    public int getEndLine() {
        return bufline[bufpos];
    }

    /** @since version 1.1 */
    public int getEndPosition() {
        return bufposition[bufpos];
    }

    public int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    public int getBeginLine() {
        return bufline[tokenBegin];
    }

    /** @since version 1.1 */
    public int getBeginPosition() {
        return bufposition[tokenBegin] - 1;
    }

    public void backup(int amount) {

        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    private SimpleCharStream(java.io.Reader dstream, int startline,
            int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        position = -1;
        inBuf = 0;
        bufpos = -1;
        // MODIFICATION version 1.2
        maxNextCharInd = 1;
        EOF_reached = false;

        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
        bufposition = new int[buffersize];

        // MODIFICATION version 1.2
        buffer[0] = '\n';
    }

    public SimpleCharStream(java.io.Reader dstream,
            CompilerDirectivesManipulator compilerDirectivesManipulator) {
        this(dstream, 0, 1, 4096);
        this.compilerDirectivesManipulator = compilerDirectivesManipulator;
        this.compilerDirectives = new CompilerDirectives();
    }

    private void ReInit(java.io.Reader dstream, int startline, int startcolumn,
            int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        position = -1;
        inBuf = 0;
        bufpos = -1;
        tokenBegin = 0;
        prevCharIsLF = prevCharIsCR = false;
        // MODIFICATION version 1.2
        maxNextCharInd = 1;
        EOF_reached = false;

        if (buffer == null || buffersize != buffer.length) {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
            bufposition = new int[buffersize];
        }

        // MODIFICATION version 1.2
        buffer[0] = '\n';
    }

    public void ReInit(java.io.Reader dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin)
                    + new String(buffer, 0, bufpos + 1);
    }

    public char[] GetSuffix(int len) {
        char[] ret = new char[len];

        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len
                    - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }

        return ret;
    }

    public void Done() {
        buffer = null;
        bufline = null;
        bufcolumn = null;
        bufposition = null;
    }

    public CompilerDirectives getCompilerDirectives() {
        return compilerDirectives;
    }

}
