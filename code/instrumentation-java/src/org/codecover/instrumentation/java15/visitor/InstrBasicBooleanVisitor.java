/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

// Generated by JTB 1.3.2
package org.codecover.instrumentation.java15.visitor;

import java.io.StringWriter;

import org.codecover.instrumentation.booleanterms.InstrBasicBooleanTerm;
import org.codecover.instrumentation.java15.parser.JavaParserConstants;
import org.codecover.instrumentation.java15.syntaxtree.AssignmentOperator;
import org.codecover.instrumentation.java15.syntaxtree.Expression;
import org.codecover.instrumentation.java15.syntaxtree.Node;
import org.codecover.instrumentation.java15.syntaxtree.NodeSequence;
import org.codecover.instrumentation.java15.syntaxtree.NodeToken;

/**
 * Converts a {@link Node} to an {@link InstrBasicBooleanTerm} by capturing all
 * {@link NodeToken}s and the {@link NodeToken#startOffset} and
 * {@link NodeToken#endOffset}.
 * 
 * @see #convertToInstrBasicBoolean(Node)
 */
public class InstrBasicBooleanVisitor extends DepthFirstVisitor {
    private StringWriter writer;

    private int foundStartOffset = -1;

    private int foundEndOffset = -1;

    private boolean containsAssignment = false;
    
    /**
     * Constructor.
     */
    private InstrBasicBooleanVisitor() {
        this.writer = new StringWriter();
    }

    /**
     * Dumps the current NodeToken to the {@link #writer}.
     */
    @Override
    public void visit(NodeToken n) {
        if (n.numSpecials() > 0) {
            for (NodeToken nt : n.specialTokens) {
                this.writer.write(nt.getSourceFileImage());
            }
        }

        this.writer.write(n.getSourceFileImage());
        if (this.foundStartOffset == -1) {
            this.foundStartOffset = n.startOffset;
        }
        this.foundEndOffset = n.endOffset;
    }

    /**
     * <PRE>
     * 
     * f0 -> ConditionalExpression()
     * f1 -> [ AssignmentOperator() Expression() ]
     * 
     * </PRE>
     */
    @Override
    public void visit(Expression n)  {
        if (n.f1.present()) {
            NodeSequence f1Sequence = (NodeSequence) n.f1.node;
            AssignmentOperator assignmentOperator = (AssignmentOperator) f1Sequence.nodes.get(0);
            NodeToken operatorToken = (NodeToken) assignmentOperator.f0.choice;

            if (operatorToken.kind == JavaParserConstants.ASSIGN) {
                this.containsAssignment = true;
            }
        }
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * This method converts a {@link Node} to an {@link InstrBasicBooleanTerm}
     * by capturing all {@link NodeToken}s and the
     * {@link NodeToken#startOffset} and {@link NodeToken#endOffset}.<br>
     * <br>
     * This method calls:
     * 
     * <pre>
     * InstrBasicBooleanVisitor basicBooleanVisitor = new InstrBasicBooleanVisitor();
     * n.accept(treeStringDumper);
     * return new InstrBasicBooleanTerm(basicBooleanVisitor.writer.toString(),
     *         basicBooleanVisitor.foundStartOffset,
     *         basicBooleanVisitor.foundEndOffset);
     * </pre>
     * 
     * @param n
     *            The Node to convert.
     * @return The captured {@link InstrBasicBooleanTerm}.
     */
    public static InstrBasicBooleanTerm convertToInstrBasicBoolean(Node n) {
        InstrBasicBooleanVisitor basicBooleanVisitor = new InstrBasicBooleanVisitor();
        n.accept(basicBooleanVisitor);

        InstrBasicBooleanTerm term = new InstrBasicBooleanTerm(basicBooleanVisitor.writer.toString().trim(),
                basicBooleanVisitor.foundStartOffset,
                basicBooleanVisitor.foundEndOffset);
        term.setContainsAssignments(basicBooleanVisitor.containsAssignment);
        return term;
    }
}
