/******************************************************************************
 * Copyright (c) 2007 Stefan Franke, Robert Hanussek, Benjamin Keil,          *
 *                    Steffen Kieß, Johannes Langauf,                         *
 *                    Christoph Marian Müller, Igor Podolskiy,                *
 *                    Tilmann Scheller, Michael Starzmann, Markus Wittlinger  *
 * All rights reserved. This program and the accompanying materials           *
 * are made available under the terms of the Eclipse Public License v1.0      *
 * which accompanies this distribution, and is available at                   *
 * http://www.eclipse.org/legal/epl-v10.html                                  *
 ******************************************************************************/

/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
package org.codecover.instrumentation.java15.parser;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Vector;
import org.codecover.instrumentation.java15.syntaxtree.*;
import org.codecover.model.utils.file.FileTool;
import java.util.Vector;


/**
 * @author Generated By: JavaCC. JavaParser.java
 * @author Christoph Müller:<br>
 * - adapted to new NodeToken
 *
 * @version 1.0 ($Id: JavaParser.java 1 2007-12-12 17:37:26Z t-scheller $)
 */
@SuppressWarnings("all")
public class JavaParser implements JavaParserConstants {
   private String sourceFileContent;
   public JavaParser(File sourceFile,Charset charset)throws IOException
   {
      this(FileTool.getContentFromFile(sourceFile,charset));

   }
   public JavaParser(String sourceFileContent)
   {
      this(new JavaCharStream(sourceFileContent));
      this.sourceFileContent = sourceFileContent;
   }
   public void ReInit(String sourceFileContent)
   {
      ReInit(new JavaCharStream(sourceFileContent));
      this.sourceFileContent = sourceFileContent;
   }

  final public CompilationUnit CompilationUnit() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   PackageDeclaration n1;
   NodeListOptional n2 = new NodeListOptional();
   ImportDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   TypeDeclaration n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    if (jj_2_1(2147483647)) {
      n1 = PackageDeclaration();
        n0.addNode(n1);
    } else {
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n3 = ImportDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      n5 = TypeDeclaration();
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 123:
      n8 = jj_consume_token(123);
                      n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      n11 = jj_consume_token(STUFF_TO_IGNORE);
                                  n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n13 = jj_consume_token(0);
      n13.beginColumn++; n13.endColumn++;
      n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new CompilationUnit(n0,n2,n4,n6,n9,n12);}
    throw new Error("Missing return statement in function");
  }

  final public PackageDeclaration PackageDeclaration() throws ParseException {
   Modifiers n0;
   NodeToken n1;
   Token n2;
   Name n3;
   NodeToken n4;
   Token n5;
    n0 = Modifiers();
    n2 = jj_consume_token(PACKAGE);
                  n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Name();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new PackageDeclaration(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ImportDeclaration ImportDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Name n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n4 = jj_consume_token(STATIC);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n5 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(DOT);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(STAR);
                n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n6.addNode(n7);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n13 = jj_consume_token(SEMICOLON);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ImportDeclaration(n0,n2,n5,n6,n12);}
    throw new Error("Missing return statement in function");
  }

  final public Modifiers Modifiers() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Annotation n24;
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        n3 = jj_consume_token(PUBLIC);
                          n2 = JTBToolkit.makeNodeToken(n3);
              n1 = new NodeChoice(n2, 0);
        break;
      case STATIC:
        n5 = jj_consume_token(STATIC);
                          n4 = JTBToolkit.makeNodeToken(n5);
              n1 = new NodeChoice(n4, 1);
        break;
      case PROTECTED:
        n7 = jj_consume_token(PROTECTED);
                             n6 = JTBToolkit.makeNodeToken(n7);
              n1 = new NodeChoice(n6, 2);
        break;
      case PRIVATE:
        n9 = jj_consume_token(PRIVATE);
                           n8 = JTBToolkit.makeNodeToken(n9);
              n1 = new NodeChoice(n8, 3);
        break;
      case FINAL:
        n11 = jj_consume_token(FINAL);
                          n10 = JTBToolkit.makeNodeToken(n11);
              n1 = new NodeChoice(n10, 4);
        break;
      case ABSTRACT:
        n13 = jj_consume_token(ABSTRACT);
                             n12 = JTBToolkit.makeNodeToken(n13);
              n1 = new NodeChoice(n12, 5);
        break;
      case SYNCHRONIZED:
        n15 = jj_consume_token(SYNCHRONIZED);
                                 n14 = JTBToolkit.makeNodeToken(n15);
              n1 = new NodeChoice(n14, 6);
        break;
      case NATIVE:
        n17 = jj_consume_token(NATIVE);
                           n16 = JTBToolkit.makeNodeToken(n17);
              n1 = new NodeChoice(n16, 7);
        break;
      case TRANSIENT:
        n19 = jj_consume_token(TRANSIENT);
                              n18 = JTBToolkit.makeNodeToken(n19);
              n1 = new NodeChoice(n18, 8);
        break;
      case VOLATILE:
        n21 = jj_consume_token(VOLATILE);
                             n20 = JTBToolkit.makeNodeToken(n21);
              n1 = new NodeChoice(n20, 9);
        break;
      case STRICTFP:
        n23 = jj_consume_token(STRICTFP);
                             n22 = JTBToolkit.makeNodeToken(n23);
              n1 = new NodeChoice(n22, 10);
        break;
      case AT:
        n24 = Annotation();
              n1 = new NodeChoice(n24, 11);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new Modifiers(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Modifiers n4;
   NodeChoice n5;
   ClassOrInterfaceDeclaration n6;
   EnumDeclaration n7;
   AnnotationTypeDeclaration n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n2 = jj_consume_token(SEMICOLON);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
        n3 = new NodeSequence(2);
      n4 = Modifiers();
        n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        n6 = ClassOrInterfaceDeclaration();
              n5 = new NodeChoice(n6, 0);
        break;
      case ENUM:
        n7 = EnumDeclaration();
              n5 = new NodeChoice(n7, 1);
        break;
      case AT:
        n8 = AnnotationTypeDeclaration();
              n5 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   TypeParameters n8;
   NodeOptional n9 = new NodeOptional();
   ExtendsList n10;
   NodeOptional n11 = new NodeOptional();
   ImplementsList n12;
   ClassOrInterfaceBody n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      n2 = jj_consume_token(CLASS);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTERFACE:
      n4 = jj_consume_token(INTERFACE);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(IDENTIFIER);
                     n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n8 = TypeParameters();
        n7.addNode(n8);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n10 = ExtendsList();
        n9.addNode(n10);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n12 = ImplementsList();
        n11.addNode(n12);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n13 = ClassOrInterfaceBody();
     {if (true) return new ClassOrInterfaceDeclaration(n0,n5,n7,n9,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  final public ExtendsList ExtendsList() throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;
    n1 = jj_consume_token(EXTENDS);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new ExtendsList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ImplementsList ImplementsList() throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;
    n1 = jj_consume_token(IMPLEMENTS);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new ImplementsList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration EnumDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ImplementsList n5;
   EnumBody n6;
    n1 = jj_consume_token(ENUM);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n5 = ImplementsList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n6 = EnumBody();
     {if (true) return new EnumDeclaration(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public EnumBody EnumBody() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   EnumConstant n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   EnumConstant n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17;
   ClassOrInterfaceBodyDeclaration n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = EnumConstant();
        n3.addNode(n4);
      label_6:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_6;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = EnumConstant();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n12 = jj_consume_token(COMMA);
                n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
        n17 = new NodeListOptional();
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(SEMICOLON);
                n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        n18 = ClassOrInterfaceBodyDeclaration();
           n17.addNode(n18);
      }
        n17.nodes.trimToSize();
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    n20 = jj_consume_token(RBRACE);
             n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new EnumBody(n0,n2,n10,n13,n19);}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstant EnumConstant() throws ParseException {
   Modifiers n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   Arguments n4;
   NodeOptional n5 = new NodeOptional();
   ClassOrInterfaceBody n6;
    n0 = Modifiers();
    n2 = jj_consume_token(IDENTIFIER);
                     n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n4 = Arguments();
        n3.addNode(n4);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n6 = ClassOrInterfaceBody();
        n5.addNode(n6);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
     {if (true) return new EnumConstant(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameters TypeParameters() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeParameter n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeParameter n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeParameter();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = TypeParameter();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new TypeParameters(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeBound n3;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n3 = TypeBound();
        n2.addNode(n3);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
     {if (true) return new TypeParameter(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public TypeBound TypeBound() throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;
    n1 = jj_consume_token(EXTENDS);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(BIT_AND);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new TypeBound(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBody ClassOrInterfaceBody() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   ClassOrInterfaceBodyDeclaration n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      n3 = ClassOrInterfaceBodyDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ClassOrInterfaceBody(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration() throws ParseException {
   NodeChoice n0;
   Initializer n1;
   NodeSequence n2;
   Modifiers n3;
   NodeChoice n4;
   ClassOrInterfaceDeclaration n5;
   EnumDeclaration n6;
   AnnotationTypeDeclaration n7;
   ConstructorDeclaration n8;
   FieldDeclaration n9;
   MethodDeclaration n10;
   NodeToken n11;
   Token n12;
    if (jj_2_6(2)) {
      n1 = Initializer();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        n2 = new NodeSequence(2);
        n3 = Modifiers();
        n2.addNode(n3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          n5 = ClassOrInterfaceDeclaration();
              n4 = new NodeChoice(n5, 0);
          break;
        case ENUM:
          n6 = EnumDeclaration();
              n4 = new NodeChoice(n6, 1);
          break;
        case AT:
          n7 = AnnotationTypeDeclaration();
              n4 = new NodeChoice(n7, 2);
          break;
        default:
          jj_la1[26] = jj_gen;
          if (jj_2_4(2147483647)) {
            n8 = ConstructorDeclaration();
              n4 = new NodeChoice(n8, 3);
          } else if (jj_2_5(2147483647)) {
            n9 = FieldDeclaration();
              n4 = new NodeChoice(n9, 4);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LT:
              n10 = MethodDeclaration();
              n4 = new NodeChoice(n10, 5);
              break;
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
        break;
      case SEMICOLON:
        n12 = jj_consume_token(SEMICOLON);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 2);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassOrInterfaceBodyDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration() throws ParseException {
   Type n0;
   VariableDeclarator n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   VariableDeclarator n6;
   NodeToken n7;
   Token n8;
    n0 = Type();
    n1 = VariableDeclarator();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = VariableDeclarator();
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FieldDeclaration(n0,n1,n2,n7);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
   VariableDeclaratorId n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   VariableInitializer n5;
    n0 = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = VariableInitializer();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
     {if (true) return new VariableDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(LBRACKET);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(RBRACKET);
               n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new VariableDeclaratorId(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public VariableInitializer VariableInitializer() throws ParseException {
   NodeChoice n0;
   ArrayInitializer n1;
   Expression n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = ArrayInitializer();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n2 = Expression();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new VariableInitializer(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   VariableInitializer n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   VariableInitializer n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = VariableInitializer();
        n3.addNode(n4);
      label_13:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_13;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = VariableInitializer();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n12 = jj_consume_token(COMMA);
                n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    n14 = jj_consume_token(RBRACE);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new ArrayInitializer(n0,n2,n10,n13);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   ResultType n2;
   MethodDeclarator n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NameList n8;
   NodeChoice n9;
   Block n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n1 = TypeParameters();
        n0.addNode(n1);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    n2 = ResultType();
    n3 = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(THROWS);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = NameList();
        n5.addNode(n8);
        n4.addNode(n5);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n10 = Block();
           n9 = new NodeChoice(n10, 0);
      break;
    case SEMICOLON:
      n12 = jj_consume_token(SEMICOLON);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n9 = new NodeChoice(n11, 1);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MethodDeclaration(n0,n2,n3,n4,n9);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarator MethodDeclarator() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameters n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameters();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(LBRACKET);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(RBRACKET);
               n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new MethodDeclarator(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameters FormalParameters() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   FormalParameter n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = FormalParameter();
        n3.addNode(n4);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_15;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = FormalParameter();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new FormalParameters(n0,n2,n10);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
   Modifiers n0;
   Type n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   VariableDeclaratorId n5;
    n0 = Modifiers();
    n1 = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      n4 = jj_consume_token(ELLIPSIS);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    n5 = VariableDeclaratorId();
     {if (true) return new FormalParameter(n0,n1,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   NodeToken n2;
   Token n3;
   FormalParameters n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NameList n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   ExplicitConstructorInvocation n13;
   NodeListOptional n14 = new NodeListOptional();
   BlockStatement n15;
   NodeToken n16;
   Token n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n1 = TypeParameters();
        n0.addNode(n1);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n4 = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(THROWS);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = NameList();
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    n11 = jj_consume_token(LBRACE);
             n10 = JTBToolkit.makeNodeToken(n11);
    if (jj_2_8(2147483647)) {
      n13 = ExplicitConstructorInvocation();
        n12.addNode(n13);
    } else {
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_16;
      }
      n15 = BlockStatement();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RBRACE);
             n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new ConstructorDeclaration(n0,n2,n4,n5,n10,n12,n14,n16);}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   ExplicitConstructorPrefix n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   TypeArguments n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Arguments n12;
   NodeToken n13;
   Token n14;
    label_17:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_17;
      }
        n1 = new NodeSequence(2);
      n2 = ExplicitConstructorPrefix();
        n1.addNode(n2);
      n4 = jj_consume_token(DOT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n6 = TypeArguments();
        n5.addNode(n6);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      n9 = jj_consume_token(THIS);
                     n8 = JTBToolkit.makeNodeToken(n9);
           n7 = new NodeChoice(n8, 0);
      break;
    case SUPER:
      n11 = jj_consume_token(SUPER);
                       n10 = JTBToolkit.makeNodeToken(n11);
           n7 = new NodeChoice(n10, 1);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n12 = Arguments();
    n14 = jj_consume_token(SEMICOLON);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new ExplicitConstructorInvocation(n0,n5,n7,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorPrefix ExplicitConstructorPrefix() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Arguments n4;
   NodeToken n5;
   Token n6;
   AllocationExpression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expression n15;
   NodeToken n16;
   Token n17;
    if (jj_2_10(2)) {
           n1 = new NodeSequence(2);
      n3 = jj_consume_token(IDENTIFIER);
                           n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = Arguments();
           n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n6 = jj_consume_token(IDENTIFIER);
                        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 1);
        break;
      case NEW:
        n7 = AllocationExpression();
        n0 = new NodeChoice(n7, 2);
        break;
      default:
        jj_la1[47] = jj_gen;
        if (jj_2_11(2147483647)) {
          n9 = jj_consume_token(THIS);
                  n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 3);
        } else if (jj_2_12(2147483647)) {
          n11 = jj_consume_token(SUPER);
                    n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 4);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
           n12 = new NodeSequence(3);
            n14 = jj_consume_token(LPAREN);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n12.addNode(n13);
            n15 = Expression();
           n12.addNode(n15);
            n17 = jj_consume_token(RPAREN);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n12.addNode(n16);
        n0 = new NodeChoice(n12, 5);
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return new ExplicitConstructorPrefix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Block n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n2 = jj_consume_token(STATIC);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    n3 = Block();
     {if (true) return new Initializer(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   ReferenceType n1;
   PrimitiveType n2;
    if (jj_2_13(2)) {
      n1 = ReferenceType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        n2 = PrimitiveType();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ReferenceType ReferenceType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   PrimitiveType n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   ClassOrInterfaceType n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
        n1 = new NodeSequence(2);
      n2 = PrimitiveType();
        n1.addNode(n2);
      label_18:
      while (true) {
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(LBRACKET);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n8 = jj_consume_token(RBRACKET);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n3.addNode(n4);
        if (jj_2_14(2)) {
          ;
        } else {
          break label_18;
        }
      }
        n3.nodes.trimToSize();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case IDENTIFIER:
           n9 = new NodeSequence(2);
      n10 = ClassOrInterfaceType();
           n9.addNode(n10);
      label_19:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_19;
        }
              n12 = new NodeSequence(2);
        n14 = jj_consume_token(LBRACKET);
                      n13 = JTBToolkit.makeNodeToken(n14);
              n12.addNode(n13);
        n16 = jj_consume_token(RBRACKET);
                      n15 = JTBToolkit.makeNodeToken(n16);
              n12.addNode(n15);
              n11.addNode(n12);
      }
           n11.nodes.trimToSize();
           n9.addNode(n11);
        n0 = new NodeChoice(n9, 1);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReferenceType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeArguments n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   TypeArguments n11;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_16(2)) {
      n3 = TypeArguments();
        n2.addNode(n3);
    } else {
      ;
    }
    label_20:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_20;
      }
        n10 = new NodeOptional();
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(DOT);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(IDENTIFIER);
                        n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
      if (jj_2_18(2)) {
        n11 = TypeArguments();
           n10.addNode(n11);
      } else {
        ;
      }
        n5.addNode(n10);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new ClassOrInterfaceType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArguments TypeArguments() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeArgument n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeArgument n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeArgument();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_21;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = TypeArgument();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new TypeArguments(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArgument TypeArgument() throws ParseException {
   NodeChoice n0;
   ReferenceType n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   WildcardBounds n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n1 = ReferenceType();
        n0 = new NodeChoice(n1, 0);
      break;
    case HOOK:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(HOOK);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        n6 = WildcardBounds();
           n5.addNode(n6);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeArgument(n0);}
    throw new Error("Missing return statement in function");
  }

  final public WildcardBounds WildcardBounds() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ReferenceType n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   ReferenceType n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(EXTENDS);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ReferenceType();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case SUPER:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(SUPER);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = ReferenceType();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new WildcardBounds(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      n2 = jj_consume_token(BOOLEAN);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
      n4 = jj_consume_token(CHAR);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case BYTE:
      n6 = jj_consume_token(BYTE);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case SHORT:
      n8 = jj_consume_token(SHORT);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case INT:
      n10 = jj_consume_token(INT);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LONG:
      n12 = jj_consume_token(LONG);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case FLOAT:
      n14 = jj_consume_token(FLOAT);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case DOUBLE:
      n16 = jj_consume_token(DOUBLE);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimitiveType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ResultType ResultType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Type n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n2 = jj_consume_token(VOID);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n3 = Type();
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ResultType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_22:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_22;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(DOT);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new Name(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public NameList NameList() throws ParseException {
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;
    n0 = Name();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_23;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new NameList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
   ConditionalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   AssignmentOperator n3;
   Expression n4;
    n0 = ConditionalExpression();
    if (jj_2_20(2)) {
        n2 = new NodeSequence(2);
      n3 = AssignmentOperator();
        n2.addNode(n3);
      n4 = Expression();
        n2.addNode(n4);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = jj_consume_token(ASSIGN);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case STARASSIGN:
      n4 = jj_consume_token(STARASSIGN);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case SLASHASSIGN:
      n6 = jj_consume_token(SLASHASSIGN);
                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case REMASSIGN:
      n8 = jj_consume_token(REMASSIGN);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case PLUSASSIGN:
      n10 = jj_consume_token(PLUSASSIGN);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case MINUSASSIGN:
      n12 = jj_consume_token(MINUSASSIGN);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case LSHIFTASSIGN:
      n14 = jj_consume_token(LSHIFTASSIGN);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case RSIGNEDSHIFTASSIGN:
      n16 = jj_consume_token(RSIGNEDSHIFTASSIGN);
                  n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      n18 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case ANDASSIGN:
      n20 = jj_consume_token(ANDASSIGN);
                 n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case XORASSIGN:
      n22 = jj_consume_token(XORASSIGN);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case ORASSIGN:
      n24 = jj_consume_token(ORASSIGN);
                 n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
   ConditionalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   Expression n8;
    n0 = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(HOOK);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(COLON);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n8 = Expression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ConditionalAndExpression n5;
    n0 = ConditionalAndExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_24;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_OR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ConditionalAndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
   InclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveOrExpression n5;
    n0 = InclusiveOrExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_25;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_AND);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InclusiveOrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalAndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
   ExclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveOrExpression n5;
    n0 = ExclusiveOrExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_26;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExclusiveOrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AndExpression n5;
    n0 = AndExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_27;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   EqualityExpression n5;
    n0 = EqualityExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_28;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_AND);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = EqualityExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
   InstanceOfExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   InstanceOfExpression n8;
    n0 = InstanceOfExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_29;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        n5 = jj_consume_token(EQ);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case NE:
        n7 = jj_consume_token(NE);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = InstanceOfExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceOfExpression InstanceOfExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Type n5;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(INSTANCEOF);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Type();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
     {if (true) return new InstanceOfExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   ShiftExpression n12;
    n0 = ShiftExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_30;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n5 = jj_consume_token(LT);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case GT:
        n7 = jj_consume_token(GT);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case LE:
        n9 = jj_consume_token(LE);
                      n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case GE:
        n11 = jj_consume_token(GE);
                       n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n12 = ShiftExpression();
        n2.addNode(n12);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   RSIGNEDSHIFT n6;
   RUNSIGNEDSHIFT n7;
   AdditiveExpression n8;
    n0 = AdditiveExpression();
    label_31:
    while (true) {
      if (jj_2_21(1)) {
        ;
      } else {
        break label_31;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        n5 = jj_consume_token(LSHIFT);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      default:
        jj_la1[71] = jj_gen;
        if (jj_2_22(1)) {
          n6 = RSIGNEDSHIFT();
              n3 = new NodeChoice(n6, 1);
        } else if (jj_2_23(1)) {
          n7 = RUNSIGNEDSHIFT();
              n3 = new NodeChoice(n7, 2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n2.addNode(n3);
      n8 = AdditiveExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;
    n0 = MultiplicativeExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_32;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = MultiplicativeExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;
    n0 = UnaryExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_33;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n5 = jj_consume_token(STAR);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case SLASH:
        n7 = jj_consume_token(SLASH);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case REM:
        n9 = jj_consume_token(REM);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = UnaryExpression();
        n2.addNode(n10);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   PreIncrementExpression n8;
   PreDecrementExpression n9;
   UnaryExpressionNotPlusMinus n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
        n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n4 = jj_consume_token(PLUS);
                     n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case MINUS:
        n6 = jj_consume_token(MINUS);
                     n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case INCR:
      n8 = PreIncrementExpression();
        n0 = new NodeChoice(n8, 1);
      break;
    case DECR:
      n9 = PreDecrementExpression();
        n0 = new NodeChoice(n9, 2);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      n10 = UnaryExpressionNotPlusMinus();
        n0 = new NodeChoice(n10, 3);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PreIncrementExpression PreIncrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(INCR);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreIncrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PreDecrementExpression PreDecrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(DECR);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreDecrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   CastExpression n8;
   PostfixExpression n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
        n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        n4 = jj_consume_token(TILDE);
                     n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case BANG:
        n6 = jj_consume_token(BANG);
                     n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[79] = jj_gen;
      if (jj_2_24(2147483647)) {
        n8 = CastExpression();
        n0 = new NodeChoice(n8, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          n9 = PostfixExpression();
        n0 = new NodeChoice(n9, 2);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new UnaryExpressionNotPlusMinus(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CastLookahead CastLookahead() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Type n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   Type n18;
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   Literal n36;
    if (jj_2_25(3)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(LPAREN);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimitiveType();
        n1.addNode(n4);
      n6 = jj_consume_token(RPAREN);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_26(2147483647)) {
        n7 = new NodeSequence(5);
      n9 = jj_consume_token(LPAREN);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = Type();
        n7.addNode(n10);
      n12 = jj_consume_token(LBRACKET);
                n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
      n14 = jj_consume_token(RBRACKET);
                n13 = JTBToolkit.makeNodeToken(n14);
        n7.addNode(n13);
        n0 = new NodeChoice(n7, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n15 = new NodeSequence(4);
        n17 = jj_consume_token(LPAREN);
                n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
        n18 = Type();
        n15.addNode(n18);
        n20 = jj_consume_token(RPAREN);
                n19 = JTBToolkit.makeNodeToken(n20);
        n15.addNode(n19);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          n23 = jj_consume_token(TILDE);
                      n22 = JTBToolkit.makeNodeToken(n23);
              n21 = new NodeChoice(n22, 0);
          break;
        case BANG:
          n25 = jj_consume_token(BANG);
                      n24 = JTBToolkit.makeNodeToken(n25);
              n21 = new NodeChoice(n24, 1);
          break;
        case LPAREN:
          n27 = jj_consume_token(LPAREN);
                      n26 = JTBToolkit.makeNodeToken(n27);
              n21 = new NodeChoice(n26, 2);
          break;
        case IDENTIFIER:
          n29 = jj_consume_token(IDENTIFIER);
                               n28 = JTBToolkit.makeNodeToken(n29);
              n21 = new NodeChoice(n28, 3);
          break;
        case THIS:
          n31 = jj_consume_token(THIS);
                         n30 = JTBToolkit.makeNodeToken(n31);
              n21 = new NodeChoice(n30, 4);
          break;
        case SUPER:
          n33 = jj_consume_token(SUPER);
                          n32 = JTBToolkit.makeNodeToken(n33);
              n21 = new NodeChoice(n32, 5);
          break;
        case NEW:
          n35 = jj_consume_token(NEW);
                        n34 = JTBToolkit.makeNodeToken(n35);
              n21 = new NodeChoice(n34, 6);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          n36 = Literal();
              n21 = new NodeChoice(n36, 7);
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n15.addNode(n21);
        n0 = new NodeChoice(n15, 2);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastLookahead(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        n4 = jj_consume_token(INCR);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case DECR:
        n6 = jj_consume_token(DECR);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
     {if (true) return new PostfixExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Type n11;
   NodeToken n12;
   Token n13;
   UnaryExpressionNotPlusMinus n14;
    if (jj_2_27(2147483647)) {
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(LPAREN);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimitiveType();
        n1.addNode(n4);
      n6 = jj_consume_token(RPAREN);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n8 = new NodeSequence(4);
        n10 = jj_consume_token(LPAREN);
                n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
        n11 = Type();
        n8.addNode(n11);
        n13 = jj_consume_token(RPAREN);
                n12 = JTBToolkit.makeNodeToken(n13);
        n8.addNode(n12);
        n14 = UnaryExpressionNotPlusMinus();
        n8.addNode(n14);
        n0 = new NodeChoice(n8, 1);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;
    n0 = PrimaryPrefix();
    label_34:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_34;
      }
      n2 = PrimarySuffix();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PrimaryExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MemberSelector MemberSelector() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeArguments n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeArguments();
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new MemberSelector(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {
   NodeChoice n0;
   Literal n1;
   NodeSequence n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   Expression n21;
   NodeToken n22;
   Token n23;
   AllocationExpression n24;
   NodeSequence n25;
   ResultType n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   Name n31;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n1 = Literal();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[87] = jj_gen;
      if (jj_2_29(2147483647)) {
        n2 = new NodeSequence(3);
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_35;
          }
           n4 = new NodeSequence(2);
          n6 = jj_consume_token(IDENTIFIER);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
          n8 = jj_consume_token(DOT);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n3.addNode(n4);
        }
        n3.nodes.trimToSize();
        n2.addNode(n3);
        n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
        n11 = new NodeSequence(3);
          n13 = jj_consume_token(SUPER);
                    n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
          n15 = jj_consume_token(DOT);
                n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
          n17 = jj_consume_token(IDENTIFIER);
                         n16 = JTBToolkit.makeNodeToken(n17);
        n11.addNode(n16);
        n0 = new NodeChoice(n11, 2);
          break;
        case LPAREN:
        n18 = new NodeSequence(3);
          n20 = jj_consume_token(LPAREN);
                n19 = JTBToolkit.makeNodeToken(n20);
        n18.addNode(n19);
          n21 = Expression();
        n18.addNode(n21);
          n23 = jj_consume_token(RPAREN);
                n22 = JTBToolkit.makeNodeToken(n23);
        n18.addNode(n22);
        n0 = new NodeChoice(n18, 3);
          break;
        case NEW:
          n24 = AllocationExpression();
        n0 = new NodeChoice(n24, 4);
          break;
        default:
          jj_la1[88] = jj_gen;
          if (jj_2_30(2147483647)) {
        n25 = new NodeSequence(4);
            n26 = ResultType();
        n25.addNode(n26);
            n28 = jj_consume_token(DOT);
                n27 = JTBToolkit.makeNodeToken(n28);
        n25.addNode(n27);
            n30 = jj_consume_token(CLASS);
                    n29 = JTBToolkit.makeNodeToken(n30);
        n25.addNode(n29);
        n0 = new NodeChoice(n25, 5);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              n31 = Name();
        n0 = new NodeChoice(n31, 6);
              break;
            default:
              jj_la1[89] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return new PrimaryPrefix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimarySuffix PrimarySuffix() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   AllocationExpression n14;
   MemberSelector n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Expression n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   Arguments n27;
    if (jj_2_31(2147483647)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(DOT);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(SUPER);
                   n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_32(2147483647)) {
        n6 = new NodeSequence(3);
      n8 = jj_consume_token(DOT);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
        n0 = new NodeChoice(n6, 1);
    } else if (jj_2_33(2)) {
        n11 = new NodeSequence(3);
      n13 = jj_consume_token(DOT);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = AllocationExpression();
        n11.addNode(n14);
        n0 = new NodeChoice(n11, 2);
    } else if (jj_2_34(3)) {
      n15 = MemberSelector();
        n0 = new NodeChoice(n15, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        n16 = new NodeSequence(3);
        n18 = jj_consume_token(LBRACKET);
                n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
        n19 = Expression();
        n16.addNode(n19);
        n21 = jj_consume_token(RBRACKET);
                n20 = JTBToolkit.makeNodeToken(n21);
        n16.addNode(n20);
        n0 = new NodeChoice(n16, 4);
        break;
      case DOT:
        n22 = new NodeSequence(2);
        n24 = jj_consume_token(DOT);
                n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
        n26 = jj_consume_token(IDENTIFIER);
                         n25 = JTBToolkit.makeNodeToken(n26);
        n22.addNode(n25);
        n0 = new NodeChoice(n22, 5);
        break;
      case LPAREN:
        n27 = Arguments();
        n0 = new NodeChoice(n27, 6);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new PrimarySuffix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CHARACTER_LITERAL:
      n6 = jj_consume_token(CHARACTER_LITERAL);
                               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case STRING_LITERAL:
      n8 = jj_consume_token(STRING_LITERAL);
                            n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case FALSE:
    case TRUE:
      n9 = BooleanLiteral();
        n0 = new NodeChoice(n9, 4);
      break;
    case NULL:
      n10 = NullLiteral();
        n0 = new NodeChoice(n10, 5);
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NullLiteral NullLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = ArgumentList();
        n2.addNode(n3);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Arguments(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList ArgumentList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
    n0 = Expression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_36;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   ArrayDimsAndInits n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ClassOrInterfaceType n9;
   NodeOptional n10 = new NodeOptional();
   TypeArguments n11;
   NodeChoice n12;
   ArrayDimsAndInits n13;
   NodeSequence n14;
   Arguments n15;
   NodeOptional n16 = new NodeOptional();
   ClassOrInterfaceBody n17;
    if (jj_2_35(2)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(NEW);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimitiveType();
        n1.addNode(n4);
      n5 = ArrayDimsAndInits();
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        n6 = new NodeSequence(4);
        n8 = jj_consume_token(NEW);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = ClassOrInterfaceType();
        n6.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          n11 = TypeArguments();
           n10.addNode(n11);
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
        n6.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          n13 = ArrayDimsAndInits();
              n12 = new NodeChoice(n13, 0);
          break;
        case LPAREN:
              n14 = new NodeSequence(2);
          n15 = Arguments();
              n14.addNode(n15);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            n17 = ClassOrInterfaceBody();
                 n16.addNode(n17);
            break;
          default:
            jj_la1[96] = jj_gen;
            ;
          }
              n14.addNode(n16);
              n12 = new NodeChoice(n14, 1);
          break;
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n6.addNode(n12);
        n0 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AllocationExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeList n16 = new NodeList();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   ArrayInitializer n22;
    if (jj_2_38(2)) {
        n1 = new NodeSequence(3);
      label_37:
      while (true) {
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(LBRACKET);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = Expression();
           n3.addNode(n6);
        n8 = jj_consume_token(RBRACKET);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n2.addNode(n3);
        if (jj_2_36(2)) {
          ;
        } else {
          break label_37;
        }
      }
        n2.nodes.trimToSize();
        n1.addNode(n2);
      label_38:
      while (true) {
        if (jj_2_37(2)) {
          ;
        } else {
          break label_38;
        }
           n10 = new NodeSequence(2);
        n12 = jj_consume_token(LBRACKET);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
        n14 = jj_consume_token(RBRACKET);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n10.addNode(n13);
           n9.addNode(n10);
      }
        n9.nodes.trimToSize();
        n1.addNode(n9);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        n15 = new NodeSequence(2);
        label_39:
        while (true) {
           n17 = new NodeSequence(2);
          n19 = jj_consume_token(LBRACKET);
                   n18 = JTBToolkit.makeNodeToken(n19);
           n17.addNode(n18);
          n21 = jj_consume_token(RBRACKET);
                   n20 = JTBToolkit.makeNodeToken(n21);
           n17.addNode(n20);
           n16.addNode(n17);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[99] = jj_gen;
            break label_39;
          }
        }
        n16.nodes.trimToSize();
        n15.addNode(n16);
        n22 = ArrayInitializer();
        n15.addNode(n22);
        n0 = new NodeChoice(n15, 1);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ArrayDimsAndInits(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   LabeledStatement n1;
   AssertStatement n2;
   Block n3;
   EmptyStatement n4;
   NodeSequence n5;
   StatementExpression n6;
   NodeToken n7;
   Token n8;
   SwitchStatement n9;
   IfStatement n10;
   WhileStatement n11;
   DoStatement n12;
   ForStatement n13;
   BreakStatement n14;
   ContinueStatement n15;
   ReturnStatement n16;
   ThrowStatement n17;
   SynchronizedStatement n18;
   TryStatement n19;
    if (jj_2_39(2)) {
      n1 = LabeledStatement();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        n2 = AssertStatement();
        n0 = new NodeChoice(n2, 1);
        break;
      case LBRACE:
        n3 = Block();
        n0 = new NodeChoice(n3, 2);
        break;
      case SEMICOLON:
        n4 = EmptyStatement();
        n0 = new NodeChoice(n4, 3);
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n5 = new NodeSequence(2);
        n6 = StatementExpression();
        n5.addNode(n6);
        n8 = jj_consume_token(SEMICOLON);
               n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 4);
        break;
      case SWITCH:
        n9 = SwitchStatement();
        n0 = new NodeChoice(n9, 5);
        break;
      case IF:
        n10 = IfStatement();
        n0 = new NodeChoice(n10, 6);
        break;
      case WHILE:
        n11 = WhileStatement();
        n0 = new NodeChoice(n11, 7);
        break;
      case DO:
        n12 = DoStatement();
        n0 = new NodeChoice(n12, 8);
        break;
      case FOR:
        n13 = ForStatement();
        n0 = new NodeChoice(n13, 9);
        break;
      case BREAK:
        n14 = BreakStatement();
        n0 = new NodeChoice(n14, 10);
        break;
      case CONTINUE:
        n15 = ContinueStatement();
        n0 = new NodeChoice(n15, 11);
        break;
      case RETURN:
        n16 = ReturnStatement();
        n0 = new NodeChoice(n16, 12);
        break;
      case THROW:
        n17 = ThrowStatement();
        n0 = new NodeChoice(n17, 13);
        break;
      case SYNCHRONIZED:
        n18 = SynchronizedStatement();
        n0 = new NodeChoice(n18, 14);
        break;
      case TRY:
        n19 = TryStatement();
        n0 = new NodeChoice(n19, 15);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssertStatement AssertStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(ASSERT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COLON);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Expression();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    n9 = jj_consume_token(SEMICOLON);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new AssertStatement(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Statement();
     {if (true) return new LabeledStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_40;
      }
      n3 = BlockStatement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   LocalVariableDeclaration n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   Modifiers n6;
   ClassOrInterfaceDeclaration n7;
   Statement n8;
    if (jj_2_40(2147483647)) {
        n1 = new NodeSequence(3);
      n2 = LocalVariableDeclaration();
        n1.addNode(n2);
      n4 = jj_consume_token(SEMICOLON);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_41(2147483647)) {
           n5 = new NodeSequence(2);
      n6 = Modifiers();
           n5.addNode(n6);
      n7 = ClassOrInterfaceDeclaration();
           n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        n8 = Statement();
        n0 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new BlockStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
   Modifiers n0;
   Type n1;
   VariableDeclarator n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   VariableDeclarator n7;
    n0 = Modifiers();
    n1 = Type();
    n2 = VariableDeclarator();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_41;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = VariableDeclarator();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new LocalVariableDeclaration(n0,n1,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(SEMICOLON);
            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new EmptyStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StatementExpression StatementExpression() throws ParseException {
   NodeChoice n0;
   PreIncrementExpression n1;
   PreDecrementExpression n2;
   NodeSequence n3;
   PrimaryExpression n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   AssignmentOperator n12;
   Expression n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      n1 = PreIncrementExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case DECR:
      n2 = PreDecrementExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
        n3 = new NodeSequence(2);
      n4 = PrimaryExpression();
        n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          n8 = jj_consume_token(INCR);
                      n7 = JTBToolkit.makeNodeToken(n8);
              n6 = new NodeChoice(n7, 0);
          break;
        case DECR:
          n10 = jj_consume_token(DECR);
                       n9 = JTBToolkit.makeNodeToken(n10);
              n6 = new NodeChoice(n9, 1);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
              n11 = new NodeSequence(2);
          n12 = AssignmentOperator();
              n11.addNode(n12);
          n13 = Expression();
              n11.addNode(n13);
              n6 = new NodeChoice(n11, 2);
          break;
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n5.addNode(n6);
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StatementExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   SwitchLabel n11;
   NodeListOptional n12;
   BlockStatement n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_42;
      }
        n12 = new NodeListOptional();
        n10 = new NodeSequence(2);
      n11 = SwitchLabel();
        n10.addNode(n11);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_43;
        }
        n13 = BlockStatement();
           n12.addNode(n13);
      }
        n12.nodes.trimToSize();
        n10.addNode(n12);
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n15 = jj_consume_token(RBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new SwitchStatement(n0,n2,n4,n5,n7,n9,n14);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchLabel SwitchLabel() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(CASE);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expression();
        n1.addNode(n4);
      n6 = jj_consume_token(COLON);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case _DEFAULT:
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(_DEFAULT);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(COLON);
                n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n0 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SwitchLabel(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(ELSE);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = Statement();
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoStatement(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   Modifiers n6;
   Type n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeSequence n13;
   NodeOptional n14 = new NodeOptional();
   ForInit n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   Expression n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   ForUpdate n23;
   NodeToken n24;
   Token n25;
   Statement n26;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_42(2147483647)) {
           n5 = new NodeSequence(6);
      n6 = Modifiers();
           n5.addNode(n6);
      n7 = Type();
           n5.addNode(n7);
      n9 = jj_consume_token(IDENTIFIER);
                           n8 = JTBToolkit.makeNodeToken(n9);
           n5.addNode(n8);
      n11 = jj_consume_token(COLON);
                   n10 = JTBToolkit.makeNodeToken(n11);
           n5.addNode(n10);
      n12 = Expression();
           n5.addNode(n12);
           n4 = new NodeChoice(n5, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
           n13 = new NodeSequence(5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case AT:
        case INCR:
        case DECR:
          n15 = ForInit();
              n14.addNode(n15);
          break;
        default:
          jj_la1[113] = jj_gen;
          ;
        }
           n13.addNode(n14);
        n17 = jj_consume_token(SEMICOLON);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          n19 = Expression();
              n18.addNode(n19);
          break;
        default:
          jj_la1[114] = jj_gen;
          ;
        }
           n13.addNode(n18);
        n21 = jj_consume_token(SEMICOLON);
                   n20 = JTBToolkit.makeNodeToken(n21);
           n13.addNode(n20);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          n23 = ForUpdate();
              n22.addNode(n23);
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
           n13.addNode(n22);
           n4 = new NodeChoice(n13, 1);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n25 = jj_consume_token(RPAREN);
             n24 = JTBToolkit.makeNodeToken(n25);
    n26 = Statement();
     {if (true) return new ForStatement(n0,n2,n4,n24,n26);}
    throw new Error("Missing return statement in function");
  }

  final public ForInit ForInit() throws ParseException {
   NodeChoice n0;
   LocalVariableDeclaration n1;
   StatementExpressionList n2;
    if (jj_2_43(2147483647)) {
      n1 = LocalVariableDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n2 = StatementExpressionList();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ForInit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StatementExpressionList StatementExpressionList() throws ParseException {
   StatementExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StatementExpression n5;
    n0 = StatementExpression();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_44;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = StatementExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new StatementExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ForUpdate ForUpdate() throws ParseException {
   StatementExpressionList n0;
    n0 = StatementExpressionList();
     {if (true) return new ForUpdate(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n4 = jj_consume_token(IDENTIFIER);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new BreakStatement(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n4 = jj_consume_token(IDENTIFIER);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ContinueStatement(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ThrowStatement(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;
    n1 = jj_consume_token(SYNCHRONIZED);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new SynchronizedStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Block n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;
   Block n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Block n17;
    n1 = jj_consume_token(TRY);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Block();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_45;
      }
        n4 = new NodeSequence(5);
      n6 = jj_consume_token(CATCH);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(LPAREN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
      n9 = FormalParameter();
        n4.addNode(n9);
      n11 = jj_consume_token(RPAREN);
                n10 = JTBToolkit.makeNodeToken(n11);
        n4.addNode(n10);
      n12 = Block();
        n4.addNode(n12);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(FINALLY);
                      n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n17 = Block();
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
     {if (true) return new TryStatement(n0,n2,n3,n13);}
    throw new Error("Missing return statement in function");
  }

  final public RUNSIGNEDSHIFT RUNSIGNEDSHIFT() throws ParseException {
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        n0 = new NodeSequence(4);
    n2 = jj_consume_token(GT);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    n4 = jj_consume_token(GT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0.addNode(n3);
    n6 = jj_consume_token(GT);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0.addNode(n5);
     {if (true) return new RUNSIGNEDSHIFT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RSIGNEDSHIFT RSIGNEDSHIFT() throws ParseException {
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        n0 = new NodeSequence(3);
    n2 = jj_consume_token(GT);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    n4 = jj_consume_token(GT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0.addNode(n3);
     {if (true) return new RSIGNEDSHIFT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Annotation Annotation() throws ParseException {
   NodeChoice n0;
   NormalAnnotation n1;
   SingleMemberAnnotation n2;
   MarkerAnnotation n3;
    if (jj_2_44(2147483647)) {
      n1 = NormalAnnotation();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_45(2147483647)) {
      n2 = SingleMemberAnnotation();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        n3 = MarkerAnnotation();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Annotation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotation NormalAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   MemberValuePairs n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n6 = MemberValuePairs();
        n5.addNode(n6);
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NormalAnnotation(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotation MarkerAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
     {if (true) return new MarkerAnnotation(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotation SingleMemberAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   MemberValue n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = MemberValue();
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new SingleMemberAnnotation(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePairs MemberValuePairs() throws ParseException {
   MemberValuePair n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   MemberValuePair n5;
    n0 = MemberValuePair();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_46;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = MemberValuePair();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MemberValuePairs(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   MemberValue n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ASSIGN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = MemberValue();
     {if (true) return new MemberValuePair(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValue MemberValue() throws ParseException {
   NodeChoice n0;
   Annotation n1;
   MemberValueArrayInitializer n2;
   ConditionalExpression n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      n1 = Annotation();
        n0 = new NodeChoice(n1, 0);
      break;
    case LBRACE:
      n2 = MemberValueArrayInitializer();
        n0 = new NodeChoice(n2, 1);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = ConditionalExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MemberValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValueArrayInitializer MemberValueArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   MemberValue n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   MemberValue n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MemberValue();
    label_47:
    while (true) {
      if (jj_2_46(2)) {
        ;
      } else {
        break label_47;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = MemberValue();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n10 = jj_consume_token(COMMA);
                n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    n12 = jj_consume_token(RBRACE);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new MemberValueArrayInitializer(n0,n2,n3,n8,n11);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeDeclaration AnnotationTypeDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   AnnotationTypeBody n6;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTERFACE);
                    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(IDENTIFIER);
                     n4 = JTBToolkit.makeNodeToken(n5);
    n6 = AnnotationTypeBody();
     {if (true) return new AnnotationTypeDeclaration(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeBody AnnotationTypeBody() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   AnnotationTypeMemberDeclaration n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_48;
      }
      n3 = AnnotationTypeMemberDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new AnnotationTypeBody(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Modifiers n2;
   NodeChoice n3;
   NodeSequence n4;
   Type n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   DefaultValue n13;
   NodeToken n14;
   Token n15;
   ClassOrInterfaceDeclaration n16;
   EnumDeclaration n17;
   AnnotationTypeDeclaration n18;
   FieldDeclaration n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n1 = new NodeSequence(2);
      n2 = Modifiers();
        n1.addNode(n2);
      if (jj_2_47(2147483647)) {
              n4 = new NodeSequence(7);
        n5 = Type();
              n4.addNode(n5);
        n7 = jj_consume_token(IDENTIFIER);
                              n6 = JTBToolkit.makeNodeToken(n7);
              n4.addNode(n6);
        n9 = jj_consume_token(LPAREN);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n4.addNode(n8);
        n11 = jj_consume_token(RPAREN);
                      n10 = JTBToolkit.makeNodeToken(n11);
              n4.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          n13 = DefaultValue();
                 n12.addNode(n13);
          break;
        default:
          jj_la1[130] = jj_gen;
          ;
        }
              n4.addNode(n12);
        n15 = jj_consume_token(SEMICOLON);
                      n14 = JTBToolkit.makeNodeToken(n15);
              n4.addNode(n14);
              n3 = new NodeChoice(n4, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          n16 = ClassOrInterfaceDeclaration();
              n3 = new NodeChoice(n16, 1);
          break;
        case ENUM:
          n17 = EnumDeclaration();
              n3 = new NodeChoice(n17, 2);
          break;
        case AT:
          n18 = AnnotationTypeDeclaration();
              n3 = new NodeChoice(n18, 3);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          n19 = FieldDeclaration();
              n3 = new NodeChoice(n19, 4);
          break;
        default:
          jj_la1[131] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case SEMICOLON:
           n20 = new NodeSequence(1);
      n22 = jj_consume_token(SEMICOLON);
                   n21 = JTBToolkit.makeNodeToken(n22);
           n20.addNode(n21);
        n0 = new NodeChoice(n20, 1);
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AnnotationTypeMemberDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefaultValue DefaultValue() throws ParseException {
   NodeToken n0;
   Token n1;
   MemberValue n2;
    n1 = jj_consume_token(_DEFAULT);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MemberValue();
     {if (true) return new DefaultValue(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_3R_169() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_234()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_122()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_123()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_3R_351()) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    }
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    if (jj_3R_225()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_332()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_377()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_378()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_38() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  final private boolean jj_3R_346() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    }
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_327()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_79()) return true;
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) return true;
    }
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_311()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_153()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_3R_398()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    }
    }
    if (jj_3R_274()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_274()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_3R_398()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_265()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_3R_394()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_3R_393()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_387()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_273() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    }
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_258()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_273()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_299()) return true;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_228()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_197()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_202()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_251()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_3R_332()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_82()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_197()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_82()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_299()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_173()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_283()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) {
    jj_scanpos = xsp;
    if (jj_3R_392()) return true;
    }
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_3R_379()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    if (jj_3R_306()) return true;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    }
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_3R_383()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_370()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_3R_331()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_3R_73()) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_261()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_351()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_73()) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_395() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) return true;
    }
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_320()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_3R_261()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    if (jj_3R_303()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_64()) return true;
    if (jj_3R_303()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_304()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_86()) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_86()) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_195()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_286()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_284()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_283()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_368()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_3R_367()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) return true;
    }
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_239()) return true;
    return false;
  }

  public JavaParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[133];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x4810100,0x0,0x0,0x0,0x0,0x4000100,0x810000,0x4810100,0x10000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x4000100,0x0,0x14a19500,0x0,0x0,0x0,0x0,0x1000000,0x0,0x14a19500,0x810000,0x10209400,0x14a19500,0x0,0x0,0x0,0x12209400,0x12209400,0x0,0x0,0x0,0x0,0x0,0x0,0x14209500,0x0,0x0,0x0,0xb6359f00,0x0,0x0,0x0,0x0,0x0,0x10209400,0x10209400,0x0,0x1000000,0x10209400,0x1000000,0x10209400,0x10209400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12209400,0x0,0x0,0x12209400,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x2000000,0x2000000,0x12209400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb2349e00,0x0,0xb6359f00,0xb2349e00,0x0,0x0,0x0,0x12209400,0x82000,0xb6359f00,0x82000,0x400000,0x16209500,0x12209400,0x12209400,0x16209500,0x12209400,0x0,0x0,0x0,0x12209400,0x4000,0x8000000,0x0,0x0,0x0,0x12209400,0x0,0x14a19500,0x80000,0x10a19400,0x14a19500,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x2,0x8899c50,0x0,0x0,0x8000,0x0,0x8899c40,0x10,0x8899c50,0x10,0x0,0x0,0x1,0x0,0x0,0x1,0x8899c40,0x0,0xc89dc78,0x0,0x0,0x0,0x0,0x0,0x0,0xc89dc78,0x10,0x4004028,0xc89dc78,0x0,0x0,0x0,0x251241a8,0x251241a8,0x0,0x0,0x400000,0x0,0x0,0x0,0x889dc68,0x0,0x0,0x400000,0x3fbffdf8,0x0,0x120000,0x80,0x0,0x8000,0x4028,0x4028,0x0,0x20000,0x4028,0x20000,0x4028,0x4004028,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x251241a8,0x0,0x0,0x251241a8,0x21120180,0x0,0x0,0x0,0x0,0x0,0x21000100,0x20080,0x0,0x0,0x21000100,0x1000000,0x251241a8,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x373e61a8,0x0,0x3fbffdf8,0x373e61a8,0x0,0x0,0x0,0x251241a8,0x0,0x3fbffdf8,0x0,0x0,0x2d9bdde8,0x251241a8,0x251241a8,0x2d9bdde8,0x251241a8,0x0,0x0,0x0,0x251241a8,0x0,0x0,0x0,0x0,0x0,0x251241a8,0x0,0x889dc78,0x0,0x4038,0x889dc78,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x120000,0x0,0x0,0x0,0x80000,0x100000,0x100000,0x120000,0x0,0x400000,0x0,0x0,0x40000,0x40000,0x0,0x100100,0x40000,0x522100,0x20000,0x800,0x2000,0x40000,0x0,0x0,0x522100,0x100000,0x400100,0x520100,0x40000,0x200000,0x8000,0x18029c2,0x18029c2,0x40000,0x400000,0x0,0x22000,0x8000,0x40000,0x100100,0x0,0x400000,0x0,0x1229c2,0x400000,0x0,0x100,0x800,0x0,0x0,0x100,0x40000,0x0,0x2000100,0x0,0x0,0x100,0x40000,0x200000,0x2000000,0x80000000,0x0,0x0,0x0,0x0,0x48000000,0x48000000,0x0,0x30400000,0x30400000,0x0,0x0,0x0,0x0,0x0,0x0,0x18009c2,0x1800000,0x1800000,0x9c2,0x18009c2,0x800,0x0,0x0,0x800,0x100,0xc2,0x800,0x100,0x88800,0xc2,0x0,0x18009c2,0x40000,0x400000,0x2000,0x8800,0x0,0x8000,0x8000,0x229c2,0x4000000,0x1229c2,0x229c2,0x40000,0x200000,0x200000,0x9c2,0x0,0x1229c2,0x0,0x0,0x1009c2,0x18009c2,0x9c2,0x1209c2,0x9c2,0x40000,0x100,0x100,0x18009c2,0x0,0x0,0x100000,0x100,0x40000,0x19029c2,0x40000,0x120100,0x0,0x100100,0x120100,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x8000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff000,0x0,0x0,0x1,0x100,0x200,0x80,0x0,0x0,0x0,0x4000000,0x4000000,0x800,0x18,0x18,0x460,0x460,0x18,0x1e,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x6,0x6,0x0,0x7ff006,0x7ff006,0x6,0x0,0x6,0x0,0x0,0x6,0x1e,0x6,0x6,0x6,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaParser(CharStream stream) {
    token_source = new JavaParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaParser(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[125];
    for (int i = 0; i < 125; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 133; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 125; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 47; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

@SuppressWarnings("all")
class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = NodeToken.createToken(t);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(NodeToken.createToken(t));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}
