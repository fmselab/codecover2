//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;DO&gt;
 * statement -> Statement()
 * nodeToken1 -> &lt;WHILE&gt;
 * nodeToken2 -> "("
 * expression -> Expression()
 * nodeToken3 -> ")"
 * nodeToken4 -> ";"
 * </PRE>
 */
public class DoStatement extends org.codecover.instrumentation.c.adapter.CCNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public Statement statement;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public Expression expression;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;

   public DoStatement(NodeToken n0, Statement n1, NodeToken n2, NodeToken n3, Expression n4, NodeToken n5, NodeToken n6) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      statement = n1;
      if ( statement != null ) statement.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = n3;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      expression = n4;
      if ( expression != null ) expression.setParent(this);
      nodeToken3 = n5;
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = n6;
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
   }

   public DoStatement(Statement n0, Expression n1) {
      nodeToken = new NodeToken("do");
      if ( nodeToken != null ) nodeToken.setParent(this);
      statement = n0;
      if ( statement != null ) statement.setParent(this);
      nodeToken1 = new NodeToken("while");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = new NodeToken("(");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      expression = n1;
      if ( expression != null ) expression.setParent(this);
      nodeToken3 = new NodeToken(")");
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = new NodeToken(";");
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
   }

   public void accept(org.codecover.instrumentation.c.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.c.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.c.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.c.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

