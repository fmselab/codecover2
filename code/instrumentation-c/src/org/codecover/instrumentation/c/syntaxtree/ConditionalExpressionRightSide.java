//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> "?"
 * expression -> Expression()
 * nodeToken1 -> ":"
 * conditionalExpression -> ConditionalExpression()
 * </PRE>
 */
public class ConditionalExpressionRightSide extends org.codecover.instrumentation.c.adapter.CCNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public Expression expression;
   public NodeToken nodeToken1;
   public ConditionalExpression conditionalExpression;

   public ConditionalExpressionRightSide(NodeToken n0, Expression n1, NodeToken n2, ConditionalExpression n3) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      expression = n1;
      if ( expression != null ) expression.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      conditionalExpression = n3;
      if ( conditionalExpression != null ) conditionalExpression.setParent(this);
   }

   public ConditionalExpressionRightSide(Expression n0, ConditionalExpression n1) {
      nodeToken = new NodeToken("?");
      if ( nodeToken != null ) nodeToken.setParent(this);
      expression = n0;
      if ( expression != null ) expression.setParent(this);
      nodeToken1 = new NodeToken(":");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      conditionalExpression = n1;
      if ( conditionalExpression != null ) conditionalExpression.setParent(this);
   }

   public void accept(org.codecover.instrumentation.c.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.c.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.c.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.c.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

