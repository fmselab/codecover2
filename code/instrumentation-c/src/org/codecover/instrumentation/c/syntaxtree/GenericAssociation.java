//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeChoice -> ( &lt;DFAULT&gt; | TypeName() )
 * nodeToken -> ":"
 * assignmentExpression -> AssignmentExpression()
 * </PRE>
 */
public class GenericAssociation extends org.codecover.instrumentation.c.adapter.CCNode implements Node {
   private Node parent;
   public NodeChoice nodeChoice;
   public NodeToken nodeToken;
   public AssignmentExpression assignmentExpression;

   public GenericAssociation(NodeChoice n0, NodeToken n1, AssignmentExpression n2) {
      nodeChoice = n0;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      assignmentExpression = n2;
      if ( assignmentExpression != null ) assignmentExpression.setParent(this);
   }

   public GenericAssociation(NodeChoice n0, AssignmentExpression n1) {
      nodeChoice = n0;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeToken = new NodeToken(":");
      if ( nodeToken != null ) nodeToken.setParent(this);
      assignmentExpression = n1;
      if ( assignmentExpression != null ) assignmentExpression.setParent(this);
   }

   public void accept(org.codecover.instrumentation.c.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.c.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.c.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.c.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

