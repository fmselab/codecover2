//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeChoice -> &lt;IDENTIFIER&gt;
 *       | &lt;ALIGNOF&gt;
 *       | &lt;AUTO&gt;
 *       | &lt;BREAK&gt;
 *       | &lt;CASE&gt;
 *       | &lt;CHAR&gt;
 *       | &lt;CONST&gt;
 *       | &lt;CONTINUE&gt;
 *       | &lt;DFAULT&gt;
 *       | &lt;DO&gt;
 *       | &lt;DOUBLE&gt;
 *       | &lt;ELSE&gt;
 *       | &lt;ENUM&gt;
 *       | &lt;EXTERN&gt;
 *       | &lt;FLOAT&gt;
 *       | &lt;FOR&gt;
 *       | &lt;GOTO&gt;
 *       | &lt;IF&gt;
 *       | &lt;INLINE&gt;
 *       | &lt;INT&gt;
 *       | &lt;LONG&gt;
 *       | &lt;REGISTER&gt;
 *       | &lt;RESTRICT&gt;
 *       | &lt;RETURN&gt;
 *       | &lt;SHORT&gt;
 *       | &lt;SIGNED&gt;
 *       | &lt;SIZEOF&gt;
 *       | &lt;STATIC&gt;
 *       | &lt;STRUCT&gt;
 *       | &lt;SWITCH&gt;
 *       | &lt;TYPEDEF&gt;
 *       | &lt;UNION&gt;
 *       | &lt;UNSIGNED&gt;
 *       | &lt;VOID&gt;
 *       | &lt;VOLATILE&gt;
 *       | &lt;WHILE&gt;
 *       | &lt;ALIGNAS&gt;
 *       | &lt;ATOMIC&gt;
 *       | &lt;BOOL&gt;
 *       | &lt;COMPLEX&gt;
 *       | &lt;GENERIC&gt;
 *       | &lt;IMAGINARY&gt;
 *       | &lt;NORETURN&gt;
 *       | &lt;STATICASSERT&gt;
 *       | &lt;THREADLOCAL&gt;
 * </PRE>
 */
public class Word extends org.codecover.instrumentation.c.adapter.CCNode implements Node {
   private Node parent;
   public NodeChoice nodeChoice;

   public Word(NodeChoice n0) {
      nodeChoice = n0;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
   }

   public void accept(org.codecover.instrumentation.c.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.codecover.instrumentation.c.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.codecover.instrumentation.c.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.codecover.instrumentation.c.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

