//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.visitor;
import org.codecover.instrumentation.c.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * nodeChoice -> &lt;NUMBER&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    * </PRE>
    */
   public R visit(Constant n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(EnumerationConstant n);

   /**
    * <PRE>
    * nodeList -> ( &lt;STRING_LITERAL&gt; )+
    * </PRE>
    */
   public R visit(StringLiteral n);

   /**
    * <PRE>
    * nodeChoice -> &lt;IDENTIFIER&gt;
    *       | Constant()
    *       | StringLiteral()
    *       | "(" Expression() ")"
    *       | GenericSelection()
    * </PRE>
    */
   public R visit(PrimaryExpression n);

   /**
    * <PRE>
    * nodeToken -> &lt;GENERIC&gt;
    * nodeToken1 -> "("
    * assignmentExpression -> AssignmentExpression()
    * nodeToken2 -> ","
    * genericAssocList -> GenericAssocList()
    * nodeToken3 -> ")"
    * </PRE>
    */
   public R visit(GenericSelection n);

   /**
    * <PRE>
    * genericAssociation -> GenericAssociation()
    * nodeListOptional -> ( "," GenericAssociation() )*
    * </PRE>
    */
   public R visit(GenericAssocList n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;DFAULT&gt; | TypeName() )
    * nodeToken -> ":"
    * assignmentExpression -> AssignmentExpression()
    * </PRE>
    */
   public R visit(GenericAssociation n);

   /**
    * <PRE>
    * nodeChoice -> "(" TypeName() ")" "{" InitializerList() [ "," ] "}"
    *       | PrimaryExpression() ( "[" Expression() "]" | "(" [ ArgumentExpressionList() ] ")" | "." &lt;IDENTIFIER&gt; | &lt;ARROW: "-&gt;"&gt; &lt;IDENTIFIER&gt; | "++" | "--" )*
    * </PRE>
    */
   public R visit(PostfixExpression n);

   /**
    * <PRE>
    * assignmentExpression -> AssignmentExpression()
    * nodeListOptional -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public R visit(ArgumentExpressionList n);

   /**
    * <PRE>
    * nodeChoice -> PostfixExpression()
    *       | "++" UnaryExpression()
    *       | "--" UnaryExpression()
    *       | UnaryOperator() CastExpression()
    *       | &lt;SIZEOF&gt; ( "(" TypeName() ")" | UnaryExpression() )
    *       | &lt;ALIGNOF&gt; "(" TypeName() ")"
    * </PRE>
    */
   public R visit(UnaryExpression n);

   /**
    * <PRE>
    * nodeChoice -> ( "&" | "*" | "+" | "-" | "~" | "!" )
    * </PRE>
    */
   public R visit(UnaryOperator n);

   /**
    * <PRE>
    * nodeChoice -> ( "(" TypeName() ")" CastExpression() | UnaryExpression() )
    * </PRE>
    */
   public R visit(CastExpression n);

   /**
    * <PRE>
    * castExpression -> CastExpression()
    * nodeOptional -> [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
    * </PRE>
    */
   public R visit(MultiplicativeExpression n);

   /**
    * <PRE>
    * multiplicativeExpression -> MultiplicativeExpression()
    * nodeOptional -> [ ( "+" | "-" ) AdditiveExpression() ]
    * </PRE>
    */
   public R visit(AdditiveExpression n);

   /**
    * <PRE>
    * additiveExpression -> AdditiveExpression()
    * nodeOptional -> [ ( &lt;LSH: "&lt;&lt;"&gt; | &lt;RSH: "&gt;&gt;"&gt; ) ShiftExpression() ]
    * </PRE>
    */
   public R visit(ShiftExpression n);

   /**
    * <PRE>
    * shiftExpression -> ShiftExpression()
    * nodeOptional -> [ ( "&lt;" | "&gt;" | &lt;LE: "&lt;="&gt; | &lt;GE: "&gt;="&gt; ) RelationalExpression() ]
    * </PRE>
    */
   public R visit(RelationalExpression n);

   /**
    * <PRE>
    * relationalExpression -> RelationalExpression()
    * nodeOptional -> [ ( &lt;EQ: "=="&gt; | &lt;NE: "!="&gt; ) EqualityExpression() ]
    * </PRE>
    */
   public R visit(EqualityExpression n);

   /**
    * <PRE>
    * equalityExpression -> EqualityExpression()
    * nodeOptional -> [ "&" ANDExpression() ]
    * </PRE>
    */
   public R visit(ANDExpression n);

   /**
    * <PRE>
    * aNDExpression -> ANDExpression()
    * nodeOptional -> [ "^" ExclusiveORExpression() ]
    * </PRE>
    */
   public R visit(ExclusiveORExpression n);

   /**
    * <PRE>
    * exclusiveORExpression -> ExclusiveORExpression()
    * nodeOptional -> [ "|" InclusiveORExpression() ]
    * </PRE>
    */
   public R visit(InclusiveORExpression n);

   /**
    * <PRE>
    * inclusiveORExpression -> InclusiveORExpression()
    * nodeOptional -> [ "&&" LogicalANDExpression() ]
    * </PRE>
    */
   public R visit(LogicalANDExpression n);

   /**
    * <PRE>
    * logicalANDExpression -> LogicalANDExpression()
    * nodeOptional -> [ "||" LogicalORExpression() ]
    * </PRE>
    */
   public R visit(LogicalORExpression n);

   /**
    * <PRE>
    * logicalORExpression -> LogicalORExpression()
    * nodeOptional -> [ ConditionalExpressionRightSide() ]
    * </PRE>
    */
   public R visit(ConditionalExpression n);

   /**
    * <PRE>
    * nodeToken -> "?"
    * expression -> Expression()
    * nodeToken1 -> ":"
    * conditionalExpression -> ConditionalExpression()
    * </PRE>
    */
   public R visit(ConditionalExpressionRightSide n);

   /**
    * <PRE>
    * nodeChoice -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public R visit(AssignmentExpression n);

   /**
    * <PRE>
    * nodeChoice -> "="
    *       | &lt;MULT_EQ: "*="&gt;
    *       | &lt;DIV_EQ: "/="&gt;
    *       | &lt;MOD_EQ: "%="&gt;
    *       | &lt;PLUS_EQ: "+="&gt;
    *       | &lt;SUB_EQ: "-="&gt;
    *       | &lt;LSH_EQ: "&lt;&lt;="&gt;
    *       | &lt;RSH_EQ: "&gt;&gt;="&gt;
    *       | &lt;AND_EQ: "&="&gt;
    *       | &lt;XOR_EQ: "^="&gt;
    *       | &lt;OR_EQ: "|="&gt;
    * </PRE>
    */
   public R visit(AssignmentOperator n);

   /**
    * <PRE>
    * assignmentExpression -> AssignmentExpression()
    * nodeListOptional -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public R visit(Expression n);

   /**
    * <PRE>
    * conditionalExpression -> ConditionalExpression()
    * </PRE>
    */
   public R visit(ConstantExpression n);

   /**
    * <PRE>
    * nodeChoice -> ( DeclarationSpecifiers() [ InitDeclaratorList() ] [ AttributeSpecifierList() ] ";" | Static_AssertDeclaration() )
    * </PRE>
    */
   public R visit(Declaration n);

   /**
    * <PRE>
    * nodeChoice -> StorageClassSpecifier() [ DeclarationSpecifiers() ]
    *       | TypeSpecifier() [ DeclarationSpecifiers() ]
    *       | TypeQualifier() [ DeclarationSpecifiers() ]
    *       | FunctionSpecifier() [ DeclarationSpecifiers() ]
    *       | AlignmentSpecifier() [ DeclarationSpecifiers() ] AttributeSpecifier() [ DeclarationSpecifiers() ]
    * </PRE>
    */
   public R visit(DeclarationSpecifiers n);

   /**
    * <PRE>
    * initDeclarator -> InitDeclarator()
    * nodeListOptional -> ( "," InitDeclarator() )*
    * </PRE>
    */
   public R visit(InitDeclaratorList n);

   /**
    * <PRE>
    * declarator -> Declarator()
    * nodeOptional -> [ "=" Initializer() ]
    * </PRE>
    */
   public R visit(InitDeclarator n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;EXTERN&gt; | &lt;STATIC&gt; | &lt;THREADLOCAL&gt; | &lt;AUTO&gt; | &lt;REGISTER&gt; | &lt;TYPEDEF&gt; )
    * </PRE>
    */
   public R visit(StorageClassSpecifier n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; | &lt;INT&gt; | &lt;LONG&gt; | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | &lt;SIGNED&gt; | &lt;UNSIGNED&gt; | &lt;BOOL&gt; | &lt;COMPLEX&gt; | &lt;EXTENSION&gt; | AtomicSpecifier() | StructOrUnionSpecifier() | EnumSpecifier() | TypedefName() )
    * </PRE>
    */
   public R visit(TypeSpecifier n);

   /**
    * <PRE>

    * structOrUnion -> StructOrUnion()
    * nodeChoice -> ( [ &lt;IDENTIFIER&gt; ] "{" StructDeclarationList() "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public R visit(StructOrUnionSpecifier n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;STRUCT&gt; | &lt;UNION&gt; )
    * </PRE>
    */
   public R visit(StructOrUnion n);

   /**
    * <PRE>
    * nodeList -> ( StructDeclaration() )+
    * </PRE>
    */
   public R visit(StructDeclarationList n);

   /**
    * <PRE>
    * nodeChoice -> ( SpecifierQualifierList() [ StructDeclaratorList() ] ";" | Static_AssertDeclaration() )
    * </PRE>
    */
   public R visit(StructDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> TypeSpecifier() [ SpecifierQualifierList() ]
    *       | TypeQualifier() [ SpecifierQualifierList() ]
    * </PRE>
    */
   public R visit(SpecifierQualifierList n);

   /**
    * <PRE>
    * structDeclarator -> StructDeclarator()
    * nodeListOptional -> ( "," StructDeclarator() )*
    * </PRE>
    */
   public R visit(StructDeclaratorList n);

   /**
    * <PRE>
    * nodeChoice -> Declarator() [ ":" ConstantExpression() ]
    *       | ":" ConstantExpression()
    * </PRE>
    */
   public R visit(StructDeclarator n);

   /**
    * <PRE>
    * nodeToken -> &lt;ENUM&gt;
    * nodeChoice -> ( [ &lt;IDENTIFIER&gt; ] "{" EnumeratorList() [ "," ] "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public R visit(EnumSpecifier n);

   /**
    * <PRE>
    * enumerator -> Enumerator()
    * nodeListOptional -> ( "," Enumerator() )*
    * </PRE>
    */
   public R visit(EnumeratorList n);

   /**
    * <PRE>
    * enumerationConstant -> EnumerationConstant()
    * nodeOptional -> [ "=" ConstantExpression() ]
    * </PRE>
    */
   public R visit(Enumerator n);

   /**
    * <PRE>
    * nodeToken -> &lt;ATOMIC&gt;
    * nodeToken1 -> "("TypedefName()
    * nodeToken2 -> ")"
    * </PRE>
    */
   public R visit(AtomicSpecifier n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;CONST&gt; | &lt;RESTRICT&gt; | &lt;VOLATILE&gt; | &lt;ATOMIC&gt; )
    * </PRE>
    */
   public R visit(TypeQualifier n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;INLINE&gt; | &lt;NORETURN&gt; )
    * </PRE>
    */
   public R visit(FunctionSpecifier n);

   /**
    * <PRE>
    * nodeToken -> &lt;ALIGNAS&gt;
    * nodeToken1 -> "("
    * nodeChoice -> ( TypedefName() | ConstantExpression() )
    * nodeToken2 -> ")"
    * </PRE>
    */
   public R visit(AlignmentSpecifier n);

   /**
    * <PRE>
    * nodeOptional -> [ Pointer() ]
    * directDeclarator -> DirectDeclarator()
    * </PRE>
    */
   public R visit(Declarator n);

   /**
    * <PRE>
    * nodeChoice -> ( t=&lt;IDENTIFIER&gt; | "(" Declarator() ")" )
    * nodeListOptional -> ( "[" ( &lt;STATIC&gt; [ TypeQualifierList() ] AssignmentExpression() | TypeQualifierList() &lt;STATIC&gt; AssignmentExpression() | [ TypeQualifierList() ] "*" "]" | [ ConstantExpression() ] ) "]" | "(" ParameterTypeList() ")" | "(" [ IdentifierList() ] ")" )*
    * </PRE>
    */
   public R visit(DirectDeclarator n);

   /**
    * <PRE>
    * nodeToken -> "*"
    * nodeOptional -> [ TypeQualifierList() ]
    * nodeOptional1 -> [ Pointer() ]
    * </PRE>
    */
   public R visit(Pointer n);

   /**
    * <PRE>
    * nodeList -> ( TypeQualifier() )+
    * </PRE>
    */
   public R visit(TypeQualifierList n);

   /**
    * <PRE>
    * parameterList -> ParameterList()
    * nodeOptional -> [ "," &lt;ELLIPSIS: "..."&gt; ]
    * </PRE>
    */
   public R visit(ParameterTypeList n);

   /**
    * <PRE>
    * parameterDeclaration -> ParameterDeclaration()
    * nodeListOptional -> ( "," ParameterDeclaration() )*
    * </PRE>
    */
   public R visit(ParameterList n);

   /**
    * <PRE>
    * declarationSpecifiers -> DeclarationSpecifiers()
    * nodeChoice -> ( Declarator() | [ AbstractDeclarator() ] )
    * </PRE>
    */
   public R visit(ParameterDeclaration n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeListOptional -> ( "," &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public R visit(IdentifierList n);

   /**
    * <PRE>
    * specifierQualifierList -> SpecifierQualifierList()
    * nodeOptional -> [ AbstractDeclarator() ]
    * </PRE>
    */
   public R visit(TypeName n);

   /**
    * <PRE>
    * nodeChoice -> ( Pointer() | [ Pointer() ] DirectAbstractDeclarator() )
    * </PRE>
    */
   public R visit(AbstractDeclarator n);

   /**
    * <PRE>
    * nodeChoice -> ( "(" AbstractDeclarator() ")" | "(" [ ParameterTypeList() ] ")" | "[" ( &lt;STATIC&gt; [ TypeQualifierList() ] AssignmentExpression() | TypeQualifierList() &lt;STATIC&gt; AssignmentExpression() | "*" | [ TypeQualifierList() ] AssignmentExpression() ) "]" )
    * nodeListOptional -> ( "(" [ ParameterTypeList() ] ")" | "[" ( &lt;STATIC&gt; [ TypeQualifierList() ] AssignmentExpression() | TypeQualifierList() &lt;STATIC&gt; AssignmentExpression() | "*" | [ TypeQualifierList() ] AssignmentExpression() ) "]" )*
    * </PRE>
    */
   public R visit(DirectAbstractDeclarator n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(TypedefName n);

   /**
    * <PRE>
    * nodeChoice -> ( AssignmentExpression() | "{" InitializerList() [ "," ] "}" )
    * </PRE>
    */
   public R visit(Initializer n);

   /**
    * <PRE>
    * nodeOptional -> [ Designation() ]
    * initializer -> Initializer()
    * nodeListOptional -> ( "," Initializer() )*
    * </PRE>
    */
   public R visit(InitializerList n);

   /**
    * <PRE>
    * designatorList -> DesignatorList()
    * nodeToken -> "="
    * </PRE>
    */
   public R visit(Designation n);

   /**
    * <PRE>
    * nodeList -> ( Designator() )+
    * </PRE>
    */
   public R visit(DesignatorList n);

   /**
    * <PRE>
    * nodeChoice -> ( "[" ConstantExpression() "]" | "." &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public R visit(Designator n);

   /**
    * <PRE>
    * nodeToken -> &lt;STATICASSERT&gt;
    * nodeToken1 -> "("
    * constantExpression -> ConstantExpression()
    * nodeToken2 -> ","
    * stringLiteral -> StringLiteral()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    * </PRE>
    */
   public R visit(Static_AssertDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> ( LabeledStatement() | CompoundStatement() | ExpressionStatement() | IfStatement() | SwitchStatement() | WhileStatement() | DoStatement() | ForStatement() | JumpStatement() )
    * </PRE>
    */
   public R visit(Statement n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;IDENTIFIER&gt; ":" [ AttributeSpecifierList() ] Statement() | CaseStatement() | DefaultStatement() )
    * </PRE>
    */
   public R visit(LabeledStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;CASE&gt;
    * constantExpression -> ConstantExpression()
    * nodeToken1 -> ":"
    * statement -> Statement()
    * </PRE>
    */
   public R visit(CaseStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;DFAULT&gt;
    * nodeToken1 -> ":"
    * statement -> Statement()
    * </PRE>
    */
   public R visit(DefaultStatement n);

   /**
    * <PRE>
    * nodeToken -> "{"
    * nodeOptional -> [ BlockItemList() ]
    * nodeToken1 -> "}"
    * </PRE>
    */
   public R visit(CompoundStatement n);

   /**
    * <PRE>
    * nodeList -> ( BlockItem() )+
    * </PRE>
    */
   public R visit(BlockItemList n);

   /**
    * <PRE>
    * nodeChoice -> Declaration()
    *       | Statement()
    * </PRE>
    */
   public R visit(BlockItem n);

   /**
    * <PRE>
    * nodeOptional -> [ Expression() ]
    * nodeToken -> ";"
    * </PRE>
    */
   public R visit(ExpressionStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;IF&gt;
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeOptional -> [ &lt;ELSE&gt; Statement() ]
    * </PRE>
    */
   public R visit(IfStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;SWITCH&gt;
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * </PRE>
    */
   public R visit(SwitchStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;WHILE&gt;
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * </PRE>
    */
   public R visit(WhileStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;DO&gt;
    * statement -> Statement()
    * nodeToken1 -> &lt;WHILE&gt;
    * nodeToken2 -> "("
    * expression -> Expression()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    * </PRE>
    */
   public R visit(DoStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;FOR&gt;
    * nodeToken1 -> "("
    * nodeChoice -> ( Declaration() [ Expression() ] | [ Expression() ] ";" [ Expression() ] )
    * nodeToken2 -> ";"
    * nodeOptional -> [ Expression() ]
    * nodeToken3 -> ")"
    * statement -> Statement()
    * </PRE>
    */
   public R visit(ForStatement n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;GOTO&gt; &lt;IDENTIFIER&gt; ";" | &lt;CONTINUE&gt; ";" | &lt;BREAK&gt; ";" | ReturnStatement() )
    * </PRE>
    */
   public R visit(JumpStatement n);

   /**
    * <PRE>
    * nodeToken -> &lt;RETURN&gt;
    * nodeOptional -> [ Expression() ]
    * nodeToken1 -> ";"
    * </PRE>
    */
   public R visit(ReturnStatement n);

   /**
    * <PRE>

    * nodeList -> ( ExternalDeclaration() )+
    * </PRE>
    */
   public R visit(TranslationUnit n);

   /**
    * <PRE>
    * nodeChoice -> ( Declaration() | FunctionDefinition() )
    * </PRE>
    */
   public R visit(ExternalDeclaration n);

   /**
    * <PRE>
    * nodeOptional -> [ DeclarationSpecifiers() ]
    * declarator -> Declarator()
    * nodeOptional1 -> [ DeclarationList() ]
    * compoundStatement -> CompoundStatement()
    * </PRE>
    */
   public R visit(FunctionDefinition n);

   /**
    * <PRE>
    * nodeList -> ( Declaration() )+
    * </PRE>
    */
   public R visit(DeclarationList n);

   /**
    * <PRE>
    * nodeList -> ( AttributeSpecifier() )+
    * </PRE>
    */
   public R visit(AttributeSpecifierList n);

   /**
    * <PRE>
    * nodeChoice -> ( &lt;ATTRIBUTE&gt; | &lt;NONNULL&gt; ) "(" "(" AttributeList() ")" ")"
    *       | Asm()
    * </PRE>
    */
   public R visit(AttributeSpecifier n);

   /**
    * <PRE>
    * nodeToken -> &lt;ASM&gt;
    * nodeToken1 -> "("
    * stringLiteral -> StringLiteral()
    * nodeToken2 -> ")"
    * </PRE>
    */
   public R visit(Asm n);

   /**
    * <PRE>
    * nodeOptional -> [ Attribute() ]
    * nodeListOptional -> ( "," [ Attribute() ] )*
    * </PRE>
    */
   public R visit(AttributeList n);

   /**
    * <PRE>
    * word -> Word()
    * nodeOptional -> [ "(" Expression() ")" ]
    * </PRE>
    */
   public R visit(Attribute n);

   /**
    * <PRE>
    * nodeChoice -> &lt;IDENTIFIER&gt;
    *       | &lt;ALIGNOF&gt;
    *       | &lt;AUTO&gt;
    *       | &lt;BREAK&gt;
    *       | &lt;CASE&gt;
    *       | &lt;CHAR&gt;
    *       | &lt;CONST&gt;
    *       | &lt;CONTINUE&gt;
    *       | &lt;DFAULT&gt;
    *       | &lt;DO&gt;
    *       | &lt;DOUBLE&gt;
    *       | &lt;ELSE&gt;
    *       | &lt;ENUM&gt;
    *       | &lt;EXTERN&gt;
    *       | &lt;FLOAT&gt;
    *       | &lt;FOR&gt;
    *       | &lt;GOTO&gt;
    *       | &lt;IF&gt;
    *       | &lt;INLINE&gt;
    *       | &lt;INT&gt;
    *       | &lt;LONG&gt;
    *       | &lt;REGISTER&gt;
    *       | &lt;RESTRICT&gt;
    *       | &lt;RETURN&gt;
    *       | &lt;SHORT&gt;
    *       | &lt;SIGNED&gt;
    *       | &lt;SIZEOF&gt;
    *       | &lt;STATIC&gt;
    *       | &lt;STRUCT&gt;
    *       | &lt;SWITCH&gt;
    *       | &lt;TYPEDEF&gt;
    *       | &lt;UNION&gt;
    *       | &lt;UNSIGNED&gt;
    *       | &lt;VOID&gt;
    *       | &lt;VOLATILE&gt;
    *       | &lt;WHILE&gt;
    *       | &lt;ALIGNAS&gt;
    *       | &lt;ATOMIC&gt;
    *       | &lt;BOOL&gt;
    *       | &lt;COMPLEX&gt;
    *       | &lt;GENERIC&gt;
    *       | &lt;IMAGINARY&gt;
    *       | &lt;NORETURN&gt;
    *       | &lt;STATICASSERT&gt;
    *       | &lt;THREADLOCAL&gt;
    * </PRE>
    */
   public R visit(Word n);

}

