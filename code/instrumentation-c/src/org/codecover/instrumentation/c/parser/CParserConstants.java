/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */
package org.codecover.instrumentation.c.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMBER = 1;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 2;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 3;
  /** RegularExpression Id. */
  int HEX_LITERAL = 4;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 5;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 6;
  /** RegularExpression Id. */
  int EXPONENT = 7;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 8;
  /** RegularExpression Id. */
  int STRING_LITERAL = 9;
  /** RegularExpression Id. */
  int ALIGNOF = 10;
  /** RegularExpression Id. */
  int AUTO = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int CHAR = 14;
  /** RegularExpression Id. */
  int CONST = 15;
  /** RegularExpression Id. */
  int CONTINUE = 16;
  /** RegularExpression Id. */
  int DFAULT = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int DOUBLE = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int ENUM = 21;
  /** RegularExpression Id. */
  int EXTERN = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int GOTO = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int INLINE = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int LONG = 29;
  /** RegularExpression Id. */
  int REGISTER = 30;
  /** RegularExpression Id. */
  int RESTRICT = 31;
  /** RegularExpression Id. */
  int RETURN = 32;
  /** RegularExpression Id. */
  int SHORT = 33;
  /** RegularExpression Id. */
  int SIGNED = 34;
  /** RegularExpression Id. */
  int SIZEOF = 35;
  /** RegularExpression Id. */
  int STATIC = 36;
  /** RegularExpression Id. */
  int STRUCT = 37;
  /** RegularExpression Id. */
  int SWITCH = 38;
  /** RegularExpression Id. */
  int TYPEDEF = 39;
  /** RegularExpression Id. */
  int UNION = 40;
  /** RegularExpression Id. */
  int UNSIGNED = 41;
  /** RegularExpression Id. */
  int VOID = 42;
  /** RegularExpression Id. */
  int VOLATILE = 43;
  /** RegularExpression Id. */
  int WHILE = 44;
  /** RegularExpression Id. */
  int ALIGNAS = 45;
  /** RegularExpression Id. */
  int ATOMIC = 46;
  /** RegularExpression Id. */
  int BOOL = 47;
  /** RegularExpression Id. */
  int COMPLEX = 48;
  /** RegularExpression Id. */
  int GENERIC = 49;
  /** RegularExpression Id. */
  int IMAGINARY = 50;
  /** RegularExpression Id. */
  int NORETURN = 51;
  /** RegularExpression Id. */
  int STATICASSERT = 52;
  /** RegularExpression Id. */
  int THREADLOCAL = 53;
  /** RegularExpression Id. */
  int ATTRIBUTE = 54;
  /** RegularExpression Id. */
  int EXTENSION = 55;
  /** RegularExpression Id. */
  int NONNULL = 56;
  /** RegularExpression Id. */
  int ASM = 57;
  /** RegularExpression Id. */
  int IDENTIFIER = 58;
  /** RegularExpression Id. */
  int LETTER = 59;
  /** RegularExpression Id. */
  int DIGIT = 60;
  /** RegularExpression Id. */
  int INC = 61;
  /** RegularExpression Id. */
  int DEC = 62;
  /** RegularExpression Id. */
  int LAND = 63;
  /** RegularExpression Id. */
  int LOR = 64;
  /** RegularExpression Id. */
  int RBL = 65;
  /** RegularExpression Id. */
  int RBR = 66;
  /** RegularExpression Id. */
  int CBL = 67;
  /** RegularExpression Id. */
  int CBR = 68;
  /** RegularExpression Id. */
  int SBL = 69;
  /** RegularExpression Id. */
  int SBR = 70;
  /** RegularExpression Id. */
  int STAR = 71;
  /** RegularExpression Id. */
  int SLASH = 72;
  /** RegularExpression Id. */
  int MOD = 73;
  /** RegularExpression Id. */
  int PLUS = 74;
  /** RegularExpression Id. */
  int MINUS = 75;
  /** RegularExpression Id. */
  int EXCL = 76;
  /** RegularExpression Id. */
  int AMP = 77;
  /** RegularExpression Id. */
  int QEM = 78;
  /** RegularExpression Id. */
  int TILDE = 79;
  /** RegularExpression Id. */
  int CARE = 80;
  /** RegularExpression Id. */
  int PIPE = 81;
  /** RegularExpression Id. */
  int COMMA = 82;
  /** RegularExpression Id. */
  int SEMICOLON = 83;
  /** RegularExpression Id. */
  int COLON = 84;
  /** RegularExpression Id. */
  int ASSIGNMENT = 85;
  /** RegularExpression Id. */
  int DOT = 86;
  /** RegularExpression Id. */
  int LESS = 87;
  /** RegularExpression Id. */
  int GREATER = 88;
  /** RegularExpression Id. */
  int ARROW = 89;
  /** RegularExpression Id. */
  int LSH = 90;
  /** RegularExpression Id. */
  int RSH = 91;
  /** RegularExpression Id. */
  int LE = 92;
  /** RegularExpression Id. */
  int GE = 93;
  /** RegularExpression Id. */
  int EQ = 94;
  /** RegularExpression Id. */
  int NE = 95;
  /** RegularExpression Id. */
  int MULT_EQ = 96;
  /** RegularExpression Id. */
  int DIV_EQ = 97;
  /** RegularExpression Id. */
  int MOD_EQ = 98;
  /** RegularExpression Id. */
  int PLUS_EQ = 99;
  /** RegularExpression Id. */
  int SUB_EQ = 100;
  /** RegularExpression Id. */
  int LSH_EQ = 101;
  /** RegularExpression Id. */
  int RSH_EQ = 102;
  /** RegularExpression Id. */
  int AND_EQ = 103;
  /** RegularExpression Id. */
  int XOR_EQ = 104;
  /** RegularExpression Id. */
  int OR_EQ = 105;
  /** RegularExpression Id. */
  int ELLIPSIS = 106;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<NUMBER>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"alignof\"",
    "\"auto\"",
    "\"break\"",
    "\"case\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"DFAULT\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"int\"",
    "\"long\"",
    "\"register\"",
    "\"restrict\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"sizeof\"",
    "\"static\"",
    "\"struct\"",
    "\"switch\"",
    "\"typedef\"",
    "\"union\"",
    "\"unsigned\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"_Alignas\"",
    "\"_Atomic\"",
    "\"_Bool\"",
    "\"_Complex\"",
    "\"_Generic\"",
    "\"_Imaginary\"",
    "\"_Noreturn\"",
    "\"_Static_assert\"",
    "\"_Thread_local\"",
    "\"__attribute__\"",
    "\"__extension__\"",
    "\"__nonnull\"",
    "\"__asm__\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+\"",
    "\"-\"",
    "\"!\"",
    "\"&\"",
    "\"?\"",
    "\"~\"",
    "\"^\"",
    "\"|\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\".\"",
    "\"<\"",
    "\">\"",
    "\"->\"",
    "\"<<\"",
    "\">>\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"...\"",
  };

}
